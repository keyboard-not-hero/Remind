1.下载V2Ray：
wget https://install.direct/go.sh
2.安装/更新V2Ray(系统需自带systemd)：
bash go.sh
**v2ray每周更新，更新不改动配置文件。版本号vX.Y.Z，X为大更新版本(一年)，Y为小更新版本(一周)，Z为0则为稳定版本
3.编辑配置文件：
vi /etc/v2ray/config.json
"inbounds": [{
    "port": 1910,   //服务器开放端口
    "protocol": "vmess",    //服务器与客户端连接的传输协议
    "settings": {
      "clients": [
        {
          "id": "16f838e3-2b66-fe8b-6162-d0e61bbb706c",  //uuid，用于客户端身份识别
          "alterId": 64   //30~100，越大越耗服务器内存
        }
      ]
    }
  }],
  "outbounds": {
    "protocol": "freedom",     //服务器与目标网站的传输协议,freedom为不限制
    "settings": {}
  }
**uuid可使用指令生成：systemctl start v2ray，或工具网站在线生成：www.uuid.online
4.启动软件：
systemctl start v2ray
5.运行状态查看：
systemctl status v2ray
6.开放防火墙：
firewall-cmd --add-port=1910/tcp
firewall-cmd --add-port=1910/udp


github地址：https://github.com/v2ray/v2ray-core
官方手册地址：https://www.v2ray.com/
配置参考地址：https://toutyrater.github.io/

v2ray须知：
1.传输协议：使用自创VMess加密传输协议
2.时间限制：客户端和服务器时间差距不能超过2min，时区不做限制
3.输出流量：客户端配置为服务器监听端口，使用VMess协议；服务器端为目标网站
4.输入流量：客户端配置为socks 1080端口；服务器配置为监听端口，使用VMess协议
5.C/S软件：客户端和服务器端不作软件区分，inbound和outbound配置不同

原理:
浏览器 <--socks--> 客户端 <--vmess--> 服务器端 <--freedom--> 目标网站


特性配置：
1.服务器(inbound)配置动态端口：
{
  "inbounds":[
  { //主端口配置
      "port": 37192,
      "protocol": "vmess",
      "settings": {
        "clients": [
          {
            "id": "d17a1af7-efa5-42ca-b7e9-6a35282d737f",
            "alterId": 64
          }
        ],
        "detour": { //绕行配置，即指示客户端使用 dynamicPort 的配置通信
          "to": "dynamicPort"   
        }
      }
    },
    {
      "protocol": "vmess",
      "port": "10000-20000", // 端口范围
      "tag": "dynamicPort",  // 与上面的 detour to 相同
      "settings": {
        "default": {
          "alterId": 64
        }
      },
      "allocate": {            // 分配模式
        "strategy": "random",  // 随机开启
        "concurrency": 2,      // 同时开放两个端口,这个值最大不能超过端口范围的 1/3
        "refresh": 3           // 每三分钟刷新一次
      }
    }
  ]
}
**动态端口用于放置运营商对单个端口进行流量限制

2.服务器(inbound)和客户端(outbound)配置mKCP：
"streamSettings": {
        "network": "mkcp", //此处的 mkcp 也可写成 kcp，两种写法是起同样的效果
        "kcpSettings": {
          "uplinkCapacity": 5,
          "downlinkCapacity": 100,
          "congestion": true,
          "header": {
            "type": "none"
          }
        }
      }
**streanSettings与settings同级
**mKCP用于高丢包率环境
