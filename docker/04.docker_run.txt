docker run - 新建一个container，并在其中运行进程

语法:
docker run [options] image [command] [args]

参数
-a, --attach={stdin|stdout|stderr}
	与stdin/stdout/stderr连接

--add-host=host:ip
	添加一条hostname到ip映射记录到/etc/hosts

-c, --cpu-shares=<weight>
	当前container占用cpu时间为当前container的cpu-shares值/所有container的cpu-shares总值的权重, container内的process等分该权重. 默认为1024

--cidfile=<file_name>
	将container ID保存到指定文件中

--cpu-count=<cpu_count>
	限制container可获取的cpu数量资源

--cpu-period=<period>
	限制container的CPU调度时间段

-d, --detach={true|false}
	在background下运行，并打印container ID. 默认为false
	
--dns=<dns>
	设置container使用的DNS服务器

-e, --env=<variable>
	设置container中的环境变量

--env-file=<env_file>
	指定用于读取container内使用环境变量的文件，环境变量之间以行进行分隔

--help
	帮助文档

-i, --interactive={true|false}
	保持与stdin连接. 默认为false

--ip=<IPv4_ADDR>
	container的IPv4地址. 必须配合--network使用

--ip6=<IPv6_ADDR>
	container的IPv6地址. 必须配合--network使用

--kernel-memory=<num>
	限定container使用的内存空间，可使用单位后缀: b/k/m/g
	0代表不限制

-l, --label <key>=<value>
	设置container中的metadata

--label-file=<label_file>
	读取label的文件，label之间以行分隔

-m, --memory=<nun>
	限定container使用的内存空间(支持swap)，可使用单位后缀: b/k/m/g

--mac-address=<MAC>
	container的MAC地址

--name=<name>
	container的名称. 未指定时随机分配一个字符串
	
--network=<type>
	指定container的network模式. 列表如下:
		none - 没有network
		bridge - 与主机ip处于同网段的虚拟ip. 默认选项
		host - 只能连接到主机的container

-p, --publish {ip:[hostPort]:containerPort|[hostPort:]containerPort}
	将container的端口映射到主机，并可以指定ip
	containerPort和hostPort可以为范围端口，但端口数量需一致

--privileged {true|false}
	给予额外权限给container，使其可以被其他设备访问

--read-only={true|false}
	container的root filesystem权限为read only
	默认container的root filesystem给予其内的process writable权限

--rm {true|false}
	当container退出后，自动remove
	默认为false

-t, --tty={true|false}
	分配一个pseudo tty给container
	默认为false


container识别方式:
1.完整UUID
2.短UUID(前12位16进制数字)
3.name


示例:
1.在docker中启动ubuntu, 并在其中执行bash
docker run --rm -it ubuntu /bin/bash
