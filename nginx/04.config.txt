配置文件位置
package安装
CentOS:
/etc/nginx/nginx.conf
/etc/nginx/conf.d/*.conf

Ubuntu:
/etc/nginx/nginx.conf
/etc/nginx/sites-enabled/*


源文件编译安装
CentOS/Ubuntu:
<prefix>/conf/nginx.conf



查看master进程ID(由config文件的pid directive决定)
package安装
CentOS:
/var/run/nginx.pid

Ubuntu:
/run/nginx.pid


源文件编译安装
CentOS/Ubuntu
<prefix>/logs/nginx.pid



log文件(由config文件的error_log和access_log directive决定)
package安装
CentOS/Ubuntu:
/var/log/nginx/error.log
/var/log/nginx/access.log


源文件编译安装
CentOS/Ubuntu:
<prefix>/logs/error.log
<prefix>/logs/access.log



web文件根目录(由config文件的{http}/{server}/{location /}/root directive决定)
package安装
CentOS:
/usr/share/nginx/html

Ubuntu:
/var/www/html


源文件编译安装
CentOS/Ubuntu:
<prefix>/html



directive种类:
1.simple directive
格式
  key <space> value;

2.block directive
格式
  key {
    simple directives...
  }

以#为开头的行即注释


directive层级
main ─┬─ events 
      │ 
      └─ http ─── server ─── location   

directive层级列表
main区域(config文件最外层directive)
    events {}
        影响连接进程的context

        worker_connections
	    单个worer process最大同时连接数量

    http {}
        HTTP服务器的context

        server {}
	    virtual host配置. 有IP-based/name_based模式

	    error_page <error_codes> <uri>
	        指定错误code使用指定界面

            listen [<address>:]<port> [default_server] [ssl]...
	        监听的网络接口和端口

            location [ = | ~ | ~* | ^~ ] <uri> {}
	        请求文件定位. 定位格式如下:
		    =  精确匹配路径. 如: location = /只能匹配<url>格式的请求
		    ~  正则匹配模式(大小写敏感)
		    ~* 正则匹配模式(大小写不敏感)
		    ^~ 当最长符合路径匹配时, 不继续进行正则模式匹配
	        
                ** 当一个server中包含多个location时，请求只与最长符合路径匹配. 如:
                    location / {
                        root /usr/local/nginx/html;
                        index index.html index.htm;
                    }
    
                    location /image/ {
                        root /usr/local/nginx;
                    }
    
                访问URI/image/cat.jpeg时, 匹配顺序:
                1)由于URI/image与location /image匹配, 搜寻路径/usr/local/nginx/image/cat.jpeg
                2)当第一步不成功, 返回404错误

		allow <address> | CIDR | all
		    服务器允许连接的客户端

		deny <address> | CIDR | all
		    服务器拒绝连接的客户端

                index <file>
		    指定索引文件

	        root <path>
		    URL请求的根目录

            server_name <name>
	        服务器名称. 包含精确名称/通配符/正则表达式格式
                ** 格式匹配优先顺序:
                   1)精确名称
                   2)最长内容匹配, 以'*'开头的名称
                   3)最长内容匹配, 以'*'结尾的名称
                   4)正则表达式(以波浪线'~'起始)
                ** 当接收到一个请求时, 请求域名与server_name匹配, 则使用当前server_name所属server的内容; 否则, 匹配默认server(第一个server或listen内包含default_server关键字的server)

            ssl_certificate <file>
	        指定服务器的证书

            ssl_certificate_key
	        指定服务器的私钥

    pid <file>
        保存master process ID的文件

    user <user> [group]
        执行worker process的用户. user默认为nobody, 当group省略时, 默认等于user的值



示例1 - 普通web服务
server {
    listen	    80;
    # list - 监听端口, 默认为80
    server_name localhost;
    # server_name - 服务器域名, 默认为localhost
    location / {
        root /data/www;
	# root - 访问文件根目录

        index index.html index.htm;
        # index - 默认文件名称
    }

    location /image/ {
        root /data;
    }
}

当URI中包含URL/image/部分时, 首先将 '/image/' 的 '/' 替换为 '/data', 结果为/data/image/


示例2 - 代理
proxied server:
server {
    listen 8080;

    location / {
        root /data/up1;
    }
}

proxy server:
server {
    location / {
	proxy_pass http://localhost:8080;
        # proxy_pass - 代理服务器指向的主机与端口
    }
   
    location /image/ {
	root /data;
    }
}
