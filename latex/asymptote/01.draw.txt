// warning: 每个示例头三行必添加内容
import settings;
outformat="pdf";
pdfviewer="evince";

一、Demo(示例)01 - basic line
draw((0,0)--(100,100));

// draw((start_coor)--(end_coor)); 作一条从坐标start_coor到坐标end_coor的直线, --代表线条类型为直线. 默认长度单位为bp, 1 bp=1/72 inch, 默认长度为0.5 bp

// draw(picture pic=currentpicture, Label L="", path g, align align=NoAlign, pen p=currentpen, arrowbar arrow=None, arrowbar bar=None, margin margin=NoMargin, Label legend="", marker marker=nomarker)
// pic - 默认为currentpicture
// L - 直线的注解label
// g - 作图路径
// align - 注解相对于直线中心的位置. 可选N/S/W/E及其组合. 默认为下方(自左至右)
// p - 线条颜色/类型/宽度, label大小, 详情见后续.可使用'+'组合, 如: p=fontsize(10)+blue
    1.线条颜色
    pen gray(real g); g为灰度, 范围[0,1], 0代表黑色
    pen rgb(real r, real g, real b); r/g/b分别为rgb颜色深度, 范围[0,1]
    pen RGB(int r, int g, int b); r/g/b分别为rgb颜色深度, 范围[0,255]
    pen cmyk(real c, real m, real y, real k); c/m/y/k分别为cmyk颜色深度, 范围[0,1]
    pen invisible; 设置为不可见, 可通过invisible(pen p)查看pen是否可见 
    可通过colorspace(pen p)查看色彩模式, 默认颜色为black
    2.线条类型
    pen linetype(real[] a, real offset=0, bool scale=true, bool adjust=true); 指定线条类型, a[0]代表第一个虚线的宽度, a[1]代表第一个虚线之间的间隔, a[2]代表第二个虚线的宽度, a[3]代表第二个虚线间隔..., 元素以此循环类推, a元素单位长度参考linewidth的0.5bp; offset代表
    预定义线条: 
	pen solid - linetype(new real[]);
	pen dotted - linetype(new real[]{0,4});
	pen dashed - linetype(new real[]{8,8});
	pen longdashed - linetype(new real[]{24,8});
	pen dashdotted - linetype(new real[]{8,8,0,8});
	pen longdashdotted - linetype(new real[]{24,8,0,8});
	pen Dotted - linetype(new real[]{0,3})+2*linewidth(currentpen);
    默认为solid实线
    3.线条宽度
    pen linewidth(real width); width指定线条宽度, 默认为0.5bp
    4.label大小
    pen fontsize(real size, real lineskip=1.2*size); 指定label字体大小, size为字体大小, 默认单位为pt, 默认大小为12pt; lineskip为行距(字体高度+行间隔)
// arrow - 箭头类型. 箭头位置如下:
		None - 没有箭头
		Blank - 没有箭头
		BeginArrow - 起始位置放置箭头, 接受箭头类型参数
		MidArrow - 中间位置放置箭头, 接受箭头类型参数 
		EndArrow - 结束位置放置箭头, 接受箭头类型参数. Arrow与之含义相同
		Arrows - 起始和结束位置放置箭头, 接受箭头类型参数
	箭头类型, 以Arrow为例(BeginArrow格式为BeginArcArrow), 可选列表如下:
		Arrow()
		ArcArrow()
		Arrow(SimpleHead)
		ArcArrow(SimpleHead)
		Arrow(HookHead)
		ArcArrow(HookHead)
		Arrow(TexHead)
		ArcArrow(TeXHead)
// bar - bar类型. 可选位置如下:
		None - 没有bar
		BeginBar - 起始位置放置bar, 可接受bar大小参数
		EndBar - 结束位置放置bar, 可接受bar大小参数. Bar与之含义相同
		Bars - 起始和结束位置放置bar, 可接受bar大小参数
// margin - 路径起始或结尾处的边距, 可选列表如下:
		NoMargin - 不包含margin
		BeginMargin - path起始处包含margin
		EndMargin - path结尾处包含margin
		Margins - path起始和结尾处包含margin
		TrueMargin(begin_margin, end_margin) - 用于详细指定起始和结尾处的margin尺寸, 详情见例11
// legend - 线条图例名称
// marker - 线条的描点, 为Mark/MarkFill数组元素, Mark数组包含7个元素, MarkFill包含5个元素



二、Demo(示例)02 - size
size(100);
draw((0,0)--(1,1));

// size(100, 100)设定方向允许的最大长度, 图像按长宽比例进行调整, 但都不能大于对应方向指定的长度. size(100)/size(0,100)/size(100,0)都等同于size(100,100), 默认单位为bp, 可选单位列表:
	1 bp = 1/72 inch
	1 pt = 1/72.27 inch
	1 cm 
	1 mm
	1 inch

// draw((0,0)--(1,1)); 作一条横向和纵向都为单位长度的直线



三、Demo(示例)03 - unit size
unitsize(100);
draw((0,0)--(2,2));

// unitsize(100, 100)设定方向单位长度, 规则类似于size, 覆盖size值, 不论语句顺序先后

// draw((0,,0)--(2,2)); 作一条可以在方向上指定长度系数的直线, 这里与size不同的地方在于, 任意方向系数可以随意指定



四、Demo(示例)04 - arraw
size(3cm);
draw((0,0)--(1,1), arrow=Arrow);

// draw((0,0)--(1,1), arrow=Arrow); 作一条路径为直线, 终点为箭头的图像. 箭头列表:
	Arrow()
	ArcArrow()
	Arrow(SimpleHead)
	ArcArrow(SimpleHead)
	Arrow(HookHead)
	ArcArrow(HookHead)
	Arrow(TexHead)



五、Demo(示例)05 - cycle
size(3cm);
draw((0,0)--(1,0)--(1,1)--(0,1)--cycle);

// draw((0,0)--(1,0)--(1,1)--(0,1)--cycle); 作一条闭环路径, cycle用于连接线条的终点和起点, 使其闭环



六、Demo(示例)06 - unit shape
unitsize(1cm);
draw(unitsquare);

// unitsquare为边长为单位长度的正方形, 可选单位图像如下:
//		unitsquare - 左下角为(0,0), 边长为单位长度的正方形
//		unitcircle - 圆心为(0,0), 半径为单位长度的圆形
//      polygon - 限定在单位圆内的正多边形


七、Demo(示例)07 - path
size(100,0);
path p=(1,0){up}..{left}(0,1)
draw(p, arrow=Arrow);

// path p=(1,0){up}..{left}(0,1) 定义一条坐标(1,0)到坐标(0,1)的路径, ..代表线条类型为曲线; (1,0){up}的up代表从(1,0)的出向切线为(0,1), {left}(0,1)的left代表从(0,1)的入向切线为(-1,0). 
	path连接方式列表:
	-- - 直线
	.. - 曲线
	^^ - 无连接
	切线方向列表:
	up - (0,1)
	down - (0,-1)
	left - (-1,0)
	right - (1,0)
	可使用(x,y)灵活定义切线方向



八、Demo(示例)08 - circle/ellipse
unitsize(1cm);
draw(circle((0,0),5), pen=green);
draw(ellipse((0,0),5,2), pen=blue);

// circle((0,0),5)是圆心为(0,0), 半径为5的圆

// ellipse((0,0),5,2)是圆心为(0,0), 水平直径为10, 垂直直径为4的椭圆



九、Demo(示例)09 - box/polygon
unitsize(1cm);
draw(box((0,0),(1,1)));
draw(unitcircle);
draw(polygon(6));

// box(pair a, pair b); 作长为a, 宽为b的长方形

// polygon(int n); 限定在单位圆内的正n边形



十、Demo(示例)10 - transform
unitsize(1cm);
path p=box((0,0),(1,1));
draw(shift(1.2)*p, blue);
draw(xscale(1.4)*p, green);
draw(yscale(1.6)*p, orange);
draw(scale(1.8)*p, red);
draw(rotate(60)*p, purple);
path q=scale(2)*rotate(60)*p;
draw(q);

// shift(x, y)在水平方向平移n*宽度, 在垂直方向平移n*高度
// xscale(n)将图形在水平方向拉伸/缩小为n倍
// yscale(n)将图形在垂直方向拉伸/缩小为n倍
// scale(n)将图形在水平和垂直方向拉伸/缩小为n倍
// rotate(degree)将图形逆时针旋转degree度
// 可使用*操作符连接多个图像转化操作



十一、Demo(示例)11 - arc/margin
unitsize(1cm);
pen p=linewidth(5pt);
real line=labelmargin(p);
margin ArrowMargin = TrueMargin(0.8*line, 0.8line);
draw((0,0)--(0,6), p=p);
draw((0,0)--(6,0), p=p);
draw(arc((0,0),5,0,90), red, arrow=Arrow(), margin=ArrowMargin);
draw(arc((0,0),(5,0),(0,5),CW), blue, arrow=Arrow(), margin=ArrowMargin);

// linewidth(5pt)指定线条宽度, 并返回pen对象
// labelmargin(p)返回pen对象p需要与外部拉开的边距, 该边距略大于0.5倍线条宽度, 返回对象为real类型
// TrueMargin(0.8*line, 0.8*line)指定path的起始边距和结束边距, 返回margin对象
// arc(pair c, real r, real angle1, real angle2)代表画一个圆弧, 圆心为c, 半径为r, 起始角度为angle1, 结束角度为angle2
// arc(pair c, real r, real angle1, real angle2, bool direction=CCW)为带方向的版本, direction可选参数: CCW为逆时针, CW为顺时针
// arc(pair c, explicit pair z1, explicit pair z2, bool direction=CCW)为作指定起始点和结束点的圆弧, 并保证|z1-c|=|z2-c|



十二、Demo(示例)12 - others plot cmd
void dot(picture pic=currentpicture, pair z, pen p=currentpen, filltype filltype=dotfilltype)
	画一个实心圆点, 参数列表如下
	z - 圆心位置
	p - 该圆实质为空心圆, 该参数指定边框的颜色
	filltype - 填充类型, 默认dotfilltype填充圆心. 详情参考label参数
	

void fill(picture pic=currentpicture, path g, pen p=currentpen)
	填充包围区域

void filldraw(picture pic=currentpicture, path g, pen fillpen=currentpen, pen drawpen=currentpen)
	填充包围区域和边框
	
