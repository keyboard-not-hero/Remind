// warning: 每个示例头三行必添加内容
import settings;
outformat="pdf";
pdfviewer="evince";

一、Demo(示例)01 - basic line
size(100);
draw((0,0)--(100,100));

// draw((start_coor)--(end_coor)); 作一条从坐标start_coor到坐标end_coor的直线, --代表线条类型为直线. 默认长度单位为bp, 1 bp=1/72 inch, 默认长度为0.5 bp

// draw(picture pic=currentpicture, Label L="", path g, align align=NoAlign, pen p=currentpen, arrowbar arrow=None, arrowbar bar=None, margin margin=NoMargin, Label legend="", marker marker=nomarker)
// pic - 默认为currentpicture
// L - 直线的注解label
// g - 作图路径, 格式: (x1,y1)--(x2,y2)--cycle, cycle代表将最后一个点连接到第一个点, 闭合图形
// align - 注解相对于线条中心的位置. 可选N/S/W/E及其组合. 默认为S
// p - 画笔所勾勒线条的属性. 列表如下:
    颜色(默认为black):
        pen gray(real g) - 区间范围为[0,1]的灰度
        pen rgb(reak r, real g, real b) - 使用RGB表示颜色, 每个原始色的区间为[0,1]
        pen RGB(reak r, real g, real b) - 使用RGB表示颜色, 每个原始色的区间为[0,255]
        pen cmyk(real c, real m, real y, real k) - 使用cmyk表示颜色, 每个原始色的区间为[0,1]
        pen invisible - 不可见
    类型(默认为实线, 即new real[])
        pen linetype(real[] a, real offset=0, bool scale=true, bool adjust=true)
            a - 代表各部分的长度, 如下:
            ___  .  ___  .  ___
             1 2 3 4
            示例: linetype(new real[]{8, 8, 1, 8})
        预定义线条类型: 
	pen solid - linetype(new real[]);
	pen dotted - linetype(new real[]{0,4});
	pen dashed - linetype(new real[]{8,8});
	pen longdashed - linetype(new real[]{24,8});
	pen dashdotted - linetype(new real[]{8,8,0,8});
	pen longdashdotted - linetype(new real[]{24,8,0,8});
	pen Dotted - linetype(new real[]{0,3})+2*linewidth(currentpen);
    宽度(默认为0.5bp)
        pen linewidth(real)
    图形角弧度类型(默认为1)
        pen linecap(int)
        int数字列表:
            0 - 直角弧度, 从原始位置
            1 - 圆角弧度
            2 - 直角弧度, 从圆角弧度的最外距离
    多种属性组合格式:
        linetype(new real[]{8, 8}) + linewidth(2bp)
    默认pen属性修改
        default(p)
// arrow - 箭头类型. 箭头位置方法如下:
    None - 没有箭头
    Blank - 没有箭头
    BeginArrow(arrowhead arrowhead=DefaultHead, real size=7.5, real angle=15, filltype filltype, real position)
        起始位置放置反向箭头, 接受箭头类型参数. 参数列表如下:
        arrowhead - 箭头类型, 列表: DefaultHead/SimpleHead/HookHead/TeXHead
        size - 箭头大小
        angle -  箭头斜边与水平线的夹角度数
        filltype - 箭头填充类型. 列表如下:
            FillDraw - 填充内部, 画边界
            Fill - 填充内部
            NoFill - 不填充内部, 画边界
            Draw - 只画边界
            UnFill - 不填充内部(裁剪内部边缘)
        position - 箭头在线条的位置. 格式为: point(path p, real t)
            p的格式为(x1,y1)--(x2,y2), 每个数值的取值范围为[0,1], 代表直线的起始百分比位置和结束百分比位置; t代表从该路径上取的百分比位置
            示例: draw((0,0)--(4,0), arrow=BeginArrow(DefaultHead, position=point((0.2, 0.2)--(1,1), 0.25))); 
            从(0,0)--(4,0)截取[0.2, 1]区间的线条, 再将箭头放置到截取后的线条0.25部位处
    MidArrow(arrowhead arrowhead, real size, real angle, filltype filltype)
        中间位置放置正向箭头, 接受箭头类型参数 
    EndArrow(arrowhead arrowhead, real size, real angle, filltype filltype, real position)
        结束位置放置正向箭头, 接受箭头类型参数
    Arrows(arrowhead arrowhead, real size, real angle, filltype filltype)
        起始位置放置反向箭头和结束位置放置正向箭头, 接受箭头类型参数
    差异版本箭头:
        BeginArcArrow/MidArcArrow/EndArcArrow/ArcArrows
// bar - bar类型. 可选位置如下:
    None - 没有bar
    BeginBar(real size=7.5) 
        起始位置放置bar
    EndBar(real size=7.5)
        结束位置放置bar
    Bars(real size=7.5)
        起始和结束位置放置bar
// margin - 线条与起始或结尾处的距离, 可选列表如下:
    NoMargin - 不包含margin
    Margin(real begin, real end=begin)
        线条与起始和结尾处的距离
// legend - 线条在legend中的label名称



二、Demo(示例)02 - size
size(100);
draw((0,0)--(1,1));

// size(picture pic=currentpicture, real x, real y=x, bool keepAspect=Aspect)
// x - 代表x轴上的单位长度
// y - 代表y轴上的单位长度
// * x或y其中一个为0时, 根据另一个轴取单位长度
// x/y默认长度单位为bp, 可选长度单位列表:
	1 bp = 1/72 inch
	1 pt = 1/72.27 inch
	1 cm 
	1 mm
	1 inch
// keepAspect - 遵守size或path的长宽比率. 列表如下:
    Aspect/true - 遵守path的长宽比率(x轴的长度不大于x值, y轴的长度不大于y值)
    IgnoreAspect/false - 遵守size的长宽比率(x轴的长度等于x值, y轴的长度等于y值)



三、Demo(示例)03 - unit size
unitsize(100);
draw((0,0)--(2,2));

// unitsize(100, 100)设定方向单位长度, 规则类似于size, 覆盖size值, 不论语句顺序先后

// draw((0,,0)--(2,2)); 作一条可以在方向上指定长度系数的直线, 这里与size不同的地方在于, 任意方向系数可以随意指定



四、Demo04 - axis
import graph;
size(100);
xaxis("$x$", xmin=-5, xmax=5);

// axis包含在graph模块中
// xaxis("$x$", xmin=-5, xmax=5); 作x轴, 起始值为-5, 终止值为5
// xaxis(picture pic=currentpicture, Label L="", axis axis=YZero, real xmin=-infinity, real xmax=infinity, pen p=currentpen, ticks ticks=NoTicks, arrowbar arrow=None, bool above=false);
    x坐标轴, 参数如下:
// pic - 默认为currentpicture
// L - 坐标轴的label
// axis - 坐标轴放置的位置. 列表如下:
    YZero(bool extend=true) - y=0的位置
    YEquals(real Y, bool extend=true) - y=Y的位置
    Bottom(bool extend=false) - 位于最底部
    Top(bool extend=false) - 位于最顶部
    BottomTop(bool extend=false) - 顶部和底部都作一个坐标轴
// xmin - 起始位置
// xmax - 终止位置
// p - 画笔属性, 参考draw方法的p参数
// ticks - 刻度线, 列表如下:
    NoTicks - 没有刻度线, 默认值
    LeftTicks(Label format="", ticklabel ticklabel=null, bool beginlabel=true, bool endlabel=true, int N=0, int n=0, real Step=0, real step=0, bool begin=true, bool end=true, tickmodifier modify=None, real Size=0, real size=0, bool extend=false, pen pTick=nullpen, pen ptick=nullpen)
        顺着直线方向, 左边的刻度线(等分或划单元). 参数列表如下:
        format - 刻度线label格式, 支持LaTeX数学格式(即$$), 默认为$%.4g$. 列表如下:
            $$ - LaTeX math模式
            % - 不输出刻度线label
        beginlabel - 起始刻度线的label是否显示
        endlabel - 结束刻度线的label是否显示
        N - 将区间[xmin, xmax]等分为N份major, 并显示刻度线
        n - 将每个major等分为n份minor, 并显示刻度线
        Step - 当N=0时, 将区间[xmin, xmax]分为每份大小为Step的major
        step - 当n=0时, 将major分为每份大小为step的minor
        begin - 起始major刻度线是否显示
        end - 结束monjor刻度线是否显示
        Size - major刻度线的大小
        size - minor刻度线的大小
        pTick - major刻度线的pen, 参考draw方法的p参数
        ptick - minor刻度线的pen, 参考draw方法的p参数
    LeftTicks(Label format="", ticklabel ticklabel=null, bool beginlabel=true, bool endlabel=true, real[] Ticks, real ticks=new real[], real Size=0, real size=0, bool extend=false, pen pTick=nullpen, pen ptick=nullpen)
        顺着直线方向, 左边的刻度线(具体刻度位置). 参数列表如下:
        Ticks - major刻度线位置数组, 格式: Ticks=new real[]{...}
        ticks - minor刻度线位置数组, 格式: ticks=new real[]{...}
    RightTicks(Label format="", ticklabel ticklabel=null, bool beginlabel=true, bool endlabel=true, int N=0, int n=0, real Step=0, real step=0, bool begin=true, bool end=true, tickmodifier modify=None, real Size=0, real size=0, bool extend=false, pen pTick=nullpen, pen ptick=nullpen)
        顺着直线方向, 右边的刻度线(等分或划单元)
    Ticks(Label format="", ticklabel ticklabel=null, bool beginlabel=true, bool endlabel=true, int N=0, int n=0, real Step=0, real step=0, bool begin=true, bool end=true, tickmodifier modify=None, real Size=0, real size=0, bool extend=false, pen pTick=nullpen, pen ptick=nullpen)
        顺着直线方向, 左/右边的刻度线(等分或划单元)
// arrow - 箭头, 参考draw的arrow参数
// above - 是否位于最顶层图层. true代表位于最顶层, false代表位于最底层

// yaxis(picture pic=currentpicture, Label L="", axis axis=XZero, real xmin=-infinity, real xmax=infinity, pen p=currentpen, ticks ticks=NoTicks, arrowbar arrow=None, bool above=false, bool autorotate=true);
    y坐标轴, 与x轴差异参数如下:
// axis - 坐标轴放置的位置. 列表如下:
       XZero(bool extend=true)
           放置在x=0处
       XEquals(real X, bool extend=true)
           放置在x=X处
       Left(bool extend=true)
           放置在最左侧
       Right(bool extend=true)
           放置在最右侧
       LeftRight(bool extend=true)
           放置在左右两侧
// autorotate - 标签L是否开启autorotate特性

// void axes(picture pic=currentpicture, Label xlabel="", Label ylabel="", bool extend=true, pair min=(-infinity,-infinity), pair max=(infinity,infinity), pen p=currentpen, arrowbar arrow=None, bool above=false);
    x/y坐标轴.  参数列表如下:
// xlabel - x轴的标签
// ylabel - y轴的标签
// min - x和y轴的起始点
// max - x和y轴的结束点
// p - 坐标轴的画笔属性, 参考draw方法的p参数
// arrow - 坐标轴箭头格式, 参考draw方法的arrow参数
// above - 是否将坐标轴放置在最顶层



五、Demo(示例)05 - unit shape
unitsize(1cm);
draw(unitsquare);

// draw(unitsquare); 作边长为单位长度的正方形, 可选单位图像如下:
//    unitsquare - 左下角为(0,0), 边长为单位长度的正方形
//    unitcircle - 圆心为(0,0), 半径为单位长度的圆形



六、Demo06 - dot
void dot(picture pic=currentpicture, Label L, pair z, align align=NoAlign, string format=defaultformat, pen p=currentpen, filltype filltype=dotfilltype);
    作一个点. 参数列表如下:
//      L - 点的标签
//      z - 点坐在的坐标
//      align - lable相对于点的位置, 可选列表: N/S/E/W或其结合. 默认为E
//      p - 点的画笔属性. 参考draw方法的p参数
//      filltype - 填充类型. 列表如下:
            FillDraw - 填充内部, 画边界
            Fill - 填充内部
            NoFill - 不填充内部, 画边界
            Draw - 只画边界
            UnFill - 不填充内部(裁剪内部边缘)


七、Demo(示例)07 - path
size(100);
path p=(1,0){up}..{left}(0,1)
draw(p, arrow=Arrow);

// path p=(1,0){up}..{left}(0,1) 定义一条坐标(1,0)到坐标(0,1)的路径, ..代表线条类型为曲线; (1,0){up}的up代表从(1,0)的出向切线为(0,1), {left}(0,1)的left代表从(0,1)的入向切线为(-1,0). 
	path连接方式列表:
	-- - 直线
	.. - 曲线
	^^ - 无连接
	切线方向列表:
	up - (0,1)
	down - (0,-1)
	left - (-1,0)
	right - (1,0)
	可使用(x,y)灵活定义切线方向



八、Demo(示例)08 - circle/ellipse
unitsize(1cm);
draw(circle((0,0),5), pen=green);
draw(ellipse((0,0),5,2), pen=blue);

// circle((0,0),5)是圆心为(0,0), 半径为5的圆

// ellipse((0,0),5,2)是圆心为(0,0), 水平直径为10, 垂直直径为4的椭圆



九、Demo(示例)09 - box/polygon
unitsize(1cm);
draw(box((0,0),(1,1)));
draw(unitcircle);
draw(polygon(6));

// box(pair a, pair b); 作长为a, 宽为b的长方形

// polygon(int n); 限定在单位圆内的正n边形



十、Demo(示例)10 - transform
unitsize(1cm);
path p=box((0,0),(1,1));
draw(shift(1.2)*p, blue);
draw(xscale(1.4)*p, green);
draw(yscale(1.6)*p, orange);
draw(scale(1.8)*p, red);
draw(rotate(60)*p, purple);
path q=scale(2)*rotate(60)*p;
draw(q);

// shift(x, y)在水平方向平移n*宽度, 在垂直方向平移n*高度
// xscale(n)将图形在水平方向拉伸/缩小为n倍
// yscale(n)将图形在垂直方向拉伸/缩小为n倍
// scale(n)将图形在水平和垂直方向拉伸/缩小为n倍
// rotate(degree)将图形逆时针旋转degree度
// 可使用*操作符连接多个图像转化操作



十一、Demo(示例)11 - arc/margin
unitsize(1cm);
pen p=linewidth(5pt);
real line=labelmargin(p);
margin ArrowMargin = TrueMargin(0.8*line, 0.8line);
draw((0,0)--(0,6), p=p);
draw((0,0)--(6,0), p=p);
draw(arc((0,0),5,0,90), red, arrow=Arrow(), margin=ArrowMargin);
draw(arc((0,0),(5,0),(0,5),CW), blue, arrow=Arrow(), margin=ArrowMargin);

// linewidth(5pt)指定线条宽度, 并返回pen对象
// labelmargin(p)返回pen对象p需要与外部拉开的边距, 该边距略大于0.5倍线条宽度, 返回对象为real类型
// TrueMargin(0.8*line, 0.8*line)指定path的起始边距和结束边距, 返回margin对象
// arc(pair c, real r, real angle1, real angle2)代表画一个圆弧, 圆心为c, 半径为r, 起始角度为angle1, 结束角度为angle2
// arc(pair c, real r, real angle1, real angle2, bool direction=CCW)为带方向的版本, direction可选参数: CCW为逆时针, CW为顺时针
// arc(pair c, explicit pair z1, explicit pair z2, bool direction=CCW)为作指定起始点和结束点的圆弧, 并保证|z1-c|=|z2-c|



十二、Demo(示例)12 - others plot cmd
void dot(picture pic=currentpicture, pair z, pen p=currentpen, filltype filltype=dotfilltype)
	画一个实心圆点, 参数列表如下
	z - 圆心位置
	p - 该圆实质为空心圆, 该参数指定边框的颜色
	filltype - 填充类型, 默认dotfilltype填充圆心. 详情参考label参数
	

void fill(picture pic=currentpicture, path g, pen p=currentpen)
	填充包围区域

void filldraw(picture pic=currentpicture, path g, pen fillpen=currentpen, pen drawpen=currentpen)
	填充包围区域和边框
	
