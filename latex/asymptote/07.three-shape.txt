一、Demo(示例)01 - simple demo
import settings;
outformat="pdf";
pdfviewer="evince";
prc=false;
import three;
unitsize(5cm);

draw(unitsphere);

// prc=false; 不启动interactive模式. interactive模式图像可旋转, 被adobe reader支持, 但label在旋转图像后会出现消失等现象

// import three; 导入three包, 绘制三维图像必须的包



二、Demo(示例)02 - vector alias
import settings;
outformat="pdf";
pdfviewer="evince";
prc=false;
import three;
unitsize(1cm);

draw(O--2X, blue);
draw(O--2Y, green);
draw(O--2Z, red);

// 向量与对应的alias, 列表如下:
	O(letter) - (0,0,0)
	X - (1,0,0)
	Y - (0,1,0)
	Z - (0,0,1)



三、Demo(示例)03 - 栅栏化图形的优化1(取消栅栏化)
import settings;
outformat="pdf";
pdfviewer="evince";
render=0;
prc = false;
import three;
size(1cm, 0);
draw((0,0,0) -- (1,1,1), linewidth(2pt));

// render=0; 取消栅栏化, 完全归属于矢量图. 只有等于0时，生成目标文件



四、Demo(示例)04 - 栅栏化图形的优化2(修改目标文件格式并提升渲染度)
import settings;
outformat="png";
pdfviewer="evince";
render=16;
prc = false;
import three;
size(1cm, 0);
draw((0,0,0) -- (1,1,1), linewidth(2pt));

// outformat="png"; 修改目标文件为png, 该格式为栅栏化最佳匹配格式

// render=16; 提升图片的渲染精度



五、Demo(示例)05 - 栅栏化图形的优化3(提升渲染极限并提升渲染度)
import settings;
outformat="pdf";
pdfviewer="evince";
render=16;
prc = false;
import three;
size(1cm, 0);
draw((0,0,0) -- (1,1,1), linewidth(2pt));
shipout(scale(4.0)*currentpicture.fit());

// shipout(scale(4.0)*currentpicture.fit()); 提升渲染极限, 该方法的两个缺点:
	1.在导入到LaTeX文件无效
	2.图片尺寸会有偏差



六、Demo(示例)06 - smooth curve
import settings;
outformat="png";
pdfviewer="evince";
render=8;
import three;
size(4cm,0);
draw(-X --- X .. Y .. X-Y+Z .. cycle);
dot(-X ^^ X ^^ Y ^^ X-Y+Z);

// '---'连接两点, 与'--'不同, 该符号修改两点的另一边, 使其尽量线条更圆滑



七、Demo(示例)07 - parallelogram
import settings;
outformat="png";
pdfviewer="evince";
render=16;
import three;
unitsize(4cm);
draw(O--2X ^^ O--2Y ^^ O--2Z, black);
draw(plane(u=Y-X, v=Z-X, O=X), blue);

// plane(u=Y-X, v=Z-X, O=X); 指定平行四边形的一个角为X, u为起始于O的边向量, v为起始于O的另一个边向量

// path3 plane(triple u, triple v, triple O=O), 参数列表如下:
	u - 确定平行四边形的一个边向量
	v - 确定平行四边形的另一个边向量
	O - 两个向量的起始角



八、Demo(示例)08 - 3D box
import settings;
outformat="png";
pdfviewer="evince";
render=16;
import three;
unitsize(4cm);
draw(O--2X ^^ O--2Y ^^ O--2Z, black);
draw(box(v1=O, v2=(1,0.5,2)), blue);

// box(v1=O, v2=(1,0.5,2)); 指定一个对角为v1和v2的长方体

// path3[] box(triple v1, triple v2), 参数列表如下:
	v1 - 长方体的一个角
	v2 - 与v1互为对角的另一个角



九、Demo(示例)09 - circle
import settings;
outformat="png";
pdfviewer="evince";
render=16;
import three;
unitsize(4cm);
draw(O--2X ^^ O--2Y ^^ O--2Z, black);
triple circleCenter=X+(Y+Z)/sqrt(2);
path3 mycircle=circle(c=circleCenter, r=1, normal=Y+Z);
draw(mycircle, blue);
draw(plane(u=2X, v=sqrt(2)*(Z-Y), O=sqrt(2)*Y), mediumgray);
draw(shift(circleCenter)*(O--Y+Z), green, arrow=Arrow3());

// circle(c=circleCenter, r=1, normal=Y+Z); 以c为中心, r为半径, 法线为normal的圆

// circle(triple c, real r, triple normal=Z), 参数列表如下:
	c - 圆的中心
	r - 圆的半径
	normal - 圆的法线, 默认为Z, 即圆位于X+Y平面



十、Demo(示例)10 - 2D convert 3D
import settings;
outformat="png";
pdfviewer="evince";
render=16;
import three;
unitsize(4cm);
path p=box((0,0),(3,1));
draw(path3(p, plane=XYplane), green);
draw(path3(p, plane=ZXplane), blue);
draw(path3(p, plane=YZplane), red);

// path3(p, plane=XYplane); 将原来的2D图像贴合带三维空间的X轴和Y轴组成的平面上

// path3 path3(path p, triple plane(pair)=XYplane); 列表如下:
	p - 原二维路径
	plane - 贴合到三维图像的哪一个平面
