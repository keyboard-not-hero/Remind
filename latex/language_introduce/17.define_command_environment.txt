一、Demo(示例)01 - newcommand/renewcommand
\documentclass{article}
\usepackage{xspace}
\newcommand{\gn}{$\Gamma_i$}
\newcommand{\cn}{\ensuremath{\Delta_{j}}}
\newcommand{\vn}{$\Gamma_j$\xspace}
\begin{document}
    Let \gn\ in the first line\\
    Let \cn\ in the second line\\
    Let $\cn$\ in the third line\\
    Let \vn in the forth line
\end{document}

内容讲解
1.\newcommand{cmd}[num][default_val]{content}
    用于新建指令, 参数如下:
	cmd - 指令名称, 不能与已有指令和环境重名, 并且不能以\end开头; 
	num - 新建指令的参数个数, 范围为0~9, 默认为0; 
	default_val - 指令第一个参数的默认值, 使之成为新建指令的可选参数;
	content - 指令代表的内容, 可使用#1,#2...引用新建指令传递的参数, 并建议$N使用{}包裹, 限定declaration指令的区域. 
	** 该指令位于preamble区时, 新建指令可作用于正文所有区域; 位于正文时, 新建指令只作用于该指令之后. 建议放置在preamble区域

2.\newcommand*{\cmd}[num][default_val]{content}为\newcommand的带'*'模式, 即新建指令参数中不能包含换段落指令(\par或者空行)

3.使用\newcommand定义的指令时, 所有后续空格被忽略, 需使用\<space>注明断词

4.\ensuremath{}用于确保内容位于math mode
位于paragraph/LR mode时, 内容为$$; 位于math mode时, 内容为<content>

5.\xspace用于识别新指令的后续空格. 包含在xspace宏包中

6.\renewcommand{cmd}[num][default_val]{content}
    用于重新定义已有指令, 参数参考\newcommand
    重定义的指令必须已存在



二、Demo(示例)02 - newenvironment/renewenvironment
\documentclass{article}
\newenvironment{emphit}[1]{\begin{itemize}\em{#1}}{\end{itemize}}
\begin{document}
this paragraph is normal
\begin{emphit}{\bfseries}
    \item this paragraph is em
\end{emphit}
\end{document}

内容讲解
1.\newenvironment{env_name}[env_arg_num]{begin_cmd}{end_cmd}
    用于定义新环境, 参数列表如下:
        env_name - 环境名称 
	env_arg_num - 新环境使用时携带的参数个数 
	begin_cmd - 引用的\begin环境. 可使用#1,#2...引用参数
	end_cmd - 引用的\end环境. 不可使用#1,#2...引用参数

2.\renewenvironment语法与\newenvironment类似, 用于重定义已存在环境名称



三、Demo(示例)03 - declare math operator
\documentclass{article}
\usepackage{amsmath}
\DeclareMathOperator{\Span}{Span}
\begin{document}
$\Span{\mathbf{v}_1,\mathbf{v}_2,\cdots,\mathbf{v}_n}$
\end{document}

内容讲解
1.\DeclareMathOperator{\Span}{Span}用于将Span指令定义为数学模式下字符串Span. 包含在amsmath宏包中

2.\DeckareMathOperator*{\Con}{Con}用于在在math mode的\displaystyle下，使上/下标位于正上/下方



四、Demo(示例)04 - set length
\documentclass{article}
\setlength{\parindent}{0cm}
\begin{document}
this is first paragraph

\setlength{\parindent}{2cm}
this is second paragraph

\addtolength{\parindent}{0.5\parskip}
this is third paragraph

\setlength{\parindent}{0cm}
smallthis is fourth paragraph

\settowidth{\parindent}{\em small}
this is fifth paragraph
\end{document}

内容讲解
1.\setlength{\parindent}{0cm}用于配置\parindent指令的长度

2.\addtolength{\parindent}{0.5\parindent}用于添加0.5个原parindent长度到parindent上

3.\newlength{\cmd}配置一个新长度指令, 并且长度为0in

4.\settowidth{\parindent}{\em small}用于配置parindent长度与指定文本长度一致, 该文本处于LR mode

5.\settoheight, \settodepth与\settowidth类似, 但用于设置垂直高度指令, 使该指令高度与文本的height/depth一致. 相关概念如下:
	reference point - 引用点, 位于字母t的左下方
	base line - 基线, 穿过引用点的水平线
	height - 基线到最高字母的顶部
	depth - 基线到字母g的底部



五、Demo(示例)05 - def
\documentclass{article}
\def\stretchint#1{\vcenter{\hbox{\stretchto[440]{\displaystyle\int}{#1}}}}
\begin{document}
\end{document}

内容讲解
1.\def <command><parameter>{<content>}为TeX原生指令, 用于定义新指令, 参数列表如下:
	command - 新指令名称; 
	parameter - 指令参数, 参数格式为#1~#9, 用于指代使用新指令时, 必选参数内容, 并且可用于content内容对其进行引用, [#1]代表第一个参数为可选参数;
	content - 指令执行的操作内容



六、Demo(示例)06 - definecolor
\documentclass{article}
\usepackage{color}
\definecolor{lightgray}{gray}{0.7}
\begin{document}
\textcolor{lightgray}{this is demo text}
\end{document}

内容讲解
1.\definecolor{color_name}{model}{color_spec}用于定义名字为color_name的颜色, 该颜色采用model颜色模式, 并且使用color_spec指定该模式下的颜色数值. 包含在color宏包中



七、Demo07 - newcolumntype
\documentclass[UTF8,fontset=ubuntu]{ctexart}
\usepackage{array}
\begin{document}
\newcolumntype{k}[1]{>{\centering\arraybackslash}p{#1\textwidth}}
\begin{tabular}{|k{0.2}|k{0.4}|}
\hline
aaaa & bbbb\\
\hline
cccc & dddd\\
\hline
eeee & ffff\\
\hline
\end{tabular}
\end{document}

内容讲解
1.newcolumntype{name}[args_num]{column_format}
    定义新的列格式. 列表如下:
        name - 列格式的名称, 该名称只能为一个字母
	args_num - 新名称可以使用的参数数量. 默认为0
	column_format - 列格式, 参考tabular环境的column_format参数. #1代表名称第一个参数的值, #2代表第二个, 以此类推

