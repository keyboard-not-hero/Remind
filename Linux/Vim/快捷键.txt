h    向左移动光标
l    向右移动光标
gj    向下移动光标(针对屏幕行，用于占据多行的长行)
j    向下移动光标
gk    向上移动光标(针对屏幕行，用于占据多行的长行)
k    向上移动光标
--------------------------------------------
**上述操作前加上数字，可以重复操作多次

--------------------------------------------
w    移动到下一个[单词起始]处
b    移动到前一个[单词起始]处
e    移动到下一个[单词末尾]处
ge    移动到前一个[单词末尾]处
dw    从当前字符(包含)删除至下一个[单词起始]处(不包含)
db    从当前字符(不包含)删除到上一个[单词起始]处(包含)
de    从当前字符(包含)删除至下一个[单词末尾](包含)
d$|C    从当前字符(包含)删除至当前行最后一个字符(包含)
diw    删除当前光标所在单词(不包含单词后空格)
daw    删除当前光标所在单词(包含单词后空格)
dd    删除当前行
dG    从当前行删除到文件末尾
dgg    从当前行删除到文件开始
cw    删除当前字符(包含)至下一个[单词起始]处(不包含)，并进入插入模式
cb    删除当前字符(不包含)至上一个[单词起始]处(包含)，并进入插入模式
ce    删除当前字符(包含)至下一个[单词末尾]处(包含)，并进入插入模式
c$|C    删除当前字符(包含)至当前行最后一个字符(包含)，并进入插入模式
cis    删除当前所在段落([. ]代表段落结束，不删除段落后空格)，并进入插入模式
cas    删除当前所在段落([. ]代表段落结束，删除段落后空格)，并进入插入模式
s    删除光标所在字符，并进入插入模式
cc|S    删除当前行，并进入插入模式
.    重复前一步对文本做的改变操作，除undo/redo和:命令模式做的改变除外
y    复制选中内容
yw    从当前字符(包含)复制至下一个[单词起始]处(不包含)
yb    从当前字符(不包含)复制至上一个[单词起始]处(包含)
ye    从当前字符(包含)复制至下一个[单词结束]处(包含)
y$    从当前字符(包含)复制至行尾(包含)
yy    复制当前行
p    粘贴内容到光标之后
P    粘贴内容到光标之前
~    当前光标内容大小写切换，并将光标右移一个字符(需要在notildeop配置下，可适用<number>~操作多个字符)
~~    改变当前行内容大小写(需要在tildeop配置下)
--------------------------------------------
**w/b/e的大写版本，可以将[a-zA-Z0-9_]之外的符号作为单词部分，小写版本将之作为单独的单词
**w/b/e操作前加上数字，可以重复操作多次
**dd/cc操作前加上数字，可以重复多次
**yw可修改为y<number>w，进行多个单词复制
**p/P前可添加数字，重复粘贴操作多次
**在视图模式下，无论实在notildeop或tildeop配置下，都可以使用~进行选中内容大小写切换

--------------------------------------------
f<alpha>    查找当前行光标之后的第一个<alpha>字母
F<alpha>    查找当前行光标之前的第一个<alpha>字母
t<alpha>    查找当前行光标之后的第一个<alpha>字母，光标停留在该查找目标之前，并只支持一次查找
T<alpha>    查找当前行光标之前的第一个<alpha>字母，光标停留在该查找目标之后，并只支持一次查找
--------------------------------------------
**上述操作可使用';'正向重复查找，使用','反向重复查找

--------------------------------------------
x    删除光标所在字符
X    删除光标左侧字符
--------------------------------------------
**上述操作前加上数字，可以重复操作多次
u    撤销上一步操作，即后退操作(undo)
U    撤销上一步操作所在行的所有操作
ctrl+r    撤销掉已撤销的操作，即前进操作(redo)

--------------------------------------------视图模式
v    进入内容选择字符模式
V    进入内容选择行模式
ctrl+v    进入内容选择块模式
**以下为进入视图模式后的操作
gv    重复选中上次视图模式选中的内容
o    切换光标到相反位置
as    选取光标当前所在段落
~    改变大小写
U    改变为大写
u    改变为小写
r    所有选中字符替换为输入字符
zf    对选中行进行折叠
--------------------------------------------
**在ctrl+v的视图块中，使用$跳转到选取块的所有行最后
**在ctrl+v的视图块中，可使用I/A在每一行选取内容前/后插入内容
**在ctrl+v的视图块中，可使用c在每一行删除选取内容后插入内容
**在ctrl+v的视图块中，可使用C在每一行删除选取内容左边至行末后插入内容
**在ctrl+v的视图块中，>代表将选中内容之后的整体移动shiftwidth距离
**在非ctrl+v的视图模式中，J用于合并多行，行内容使用joinspaces个空格分隔(每行的前置和后缀空格去掉)

--------------------------------------------编辑模式
i    从当前字符之前插入
I    从当前行第一个字符之前插入
a    从光标之后插入
A    从当前行最后插入
r    替换光标所在字符
R    替换光标及之后的字符
o    在光标下一行插入
O    在光标上一行插入
**进入编辑模式后的快捷键
<Esc>    退出到普通模式
<backspace>    删除光标前的字符
<delete>    删除光标处的字符
ctrl+w    删除光标前的单词部分
ctrl+u    删除行首至光标处(不包含)的所有字符
ctrl+<left>    左移一单词
ctrl+<right>    右移一单词
ctrl+a    复制上一次在编辑模式进行的操作
ctrl+y    复制上一行对应列字符(用于逐字符复制)
ctrl+e    复制下一行对应列字符
--------------------------------------------
**在R模式的替换模式中，backspace可将修改的前一个字符恢复

--------------------------------------------普通模式
^    移动光标到当前行第一个字符
$    移动光标到当前行末尾
0    移动光标到当前行行首
ctrl+u    窗口上拉半屏(回退)
ctrl+d    窗口下拉半屏(前进)
ctrl+y    窗口上拉一行
ctrl+e    窗口下拉一行
ctrl+b    后退一屏
ctrl+f    前进一屏
ctrl+a    数字+1
ctrl+x    数字-1
zz    将光标行置于页面中间
zt    将光标行置于页面上方
zb    将光标行置于页面下方
ctrl+g    显示光标所在行及文件信息
g<ctrl+g>    显示文件单词、字节、行、列信息
gp    调整选中行的宽度大小，适应textwidth大小
K    打开当前光标所在单词的man手册
ZZ    保存修改退出
<number>:    选中当前行开始的number行(以:.,.+4表现)
q:    打开一个命令行窗口，包含部分历史指令
G    进入文件最后一行
gg    进入文件第一行
<number>%    进入文件的百分比行
H    进入当前页面的首行
M    进入当前页面的中间行
L    进入当前页面的最后一行
>>    增加缩进(缩进空格由shiftwidth选项控制)
``|''    返回上次所在行(单层)
ctrl+o    回退到上一次所在的行(多层)
ctrl+i    前进到下一次所在的行(多层，与ctrl+o相反)
:jumps    显示多层回退/前进列表
m<mark>    标记所在行，mark为[a-z]
`<mark>    进入标记所在行，mark为[a-z]
`"    进入上次离开文件时的光标位置(`在<Esc>下方)
`.    进入最后一次修改过的光标位置
`<    视图模式选中的起始行
`>    视图模式选中的结束行
:marks    mark列表
"<a-z>yy    将当前行内容存放到寄存器<a-z>
"<a-z>p    将寄存器<a-z>的内容粘贴到当前位置
"+yy    复制当前行到剪切板寄存器(复制内容可用于其他程序，需要vim支持剪切板)
"+p    粘贴剪切板寄存器内容(需要vim支持剪切板)
"*p    粘贴当前选中寄存器内容(可使用视图模式进行内容选中)
q<a-z>    开始保存宏到寄存器(退出宏记录使用q)
@<a-z>    从寄存器中取出宏
@@    重复上一次的从寄存去取出宏操作
@<A-Z>    向对应<a-z>寄存器append操作
@<a-z>p    将寄存器的宏操作元数据粘贴到文本
--------------------------------------------
**<number>G或者<number>gg可进入指定行
**注意mark部分没有:，即不是命令模式，为普通模式
**mark文件内有效，每个文件拥有单独mark表
**mark可使用字母[A-Z]，可时间跨文件跳转，即从其他文件跳转回标记的文件
**mark可使用数字0-9，0表示上次关闭的文件及位置标记，1-9依次为更旧的记录
**寄存器内容在所有文件间共享
**@<a-z>前面可加数字，多次获取寄存器内的宏操作

--------------------------------------------命令行模式
/<STR>    向光标后续文件内容查找字符串STR
/<STR>/<OFFSET>    查找到STR后，向下移动OFFSET行(OFFSET为负，则向上移动)
/<STR>/e{+|-}<OFFSET>    查找到后，cursor移动到单词尾部字符，并向前(+)或向后(-)移动OFFSET个字符
/<STR>/b{+|-}<OFFSET>    查找到后，cursor移动到单词首部字符，并向前移动OFFSET个字符
//    向下查找上一次查找内容，并去除第二个/后的部分
?<STR>    向光标前面文件内容查找字符串STR
?<STR>?<OFFSET>    查找到STR后，向下移动OFFSET行(OFFSET为负，则向上移动)
?<STR>?e{+|-}<OFFSET>    查找到后，cursor移动到单词尾部字符，并向前(+)或向后(-)移动OFFSET个字符
?<STR>?b{+|-}<OFFSET>    查找到后，cursor移动到单词首部字符，并向前移动OFFSET个字符
**匹配正则表达式
*    前面字符匹配0或以上
\+    前面字符匹配1或多次
\{n}    前面字符精确匹配n次
\{n,}    前面字符匹配n次以上
\{,m}    前面字符匹配0~m次
\{n,m}    前面字符匹配n~m次
\{-n,m}    前面字符匹配n~m次(懒惰)
\(\)    分组
\|    多选其一(字符串)
[]    多选其一(字符)
[^]    排除内容后，多选其一
\d    数字
\_d    数字和断行符
\D    非数字
\s    空格
\_s    空格和断行符
\S    非空格
\u    大写字母
\h    [a-zA-Z_]
\w    [0-9a-zA-Z_]
\_.    所有字符(包含断行符)
--------------------------------------------
**在搜索模式中，在匹配字符前加入\_，可包含断行符
**在搜索STR中，--- .*[]^%/\?~$ ---有特殊含义，需要使用\解除。其中，.代表任意单个字符
**/与?使用同一个历史记录
**STR中，前置\c不在乎大小写，\C在乎大小写，并覆盖ignorecase和smartcase选项(需要magic选项on)

--------------------------------------------普通模式
n    继续按查找方向查找字符串
N    继续反向查找字符串
*    向下查找光标所在单词(完整单词)
#    向上查找光标所在单词(完整单词)
g*    向下查找光标所在单词(包含目标单词部分即可)
g#    向上查找光标所在单词(包含目标单词部分即可)
%    查找配对的括号[/{/(，当光标停留在非括号上时，向前查找括号，并匹配到它的配对
--------------------------------------------
**上述操作可以使用前置数字，正向/反向查找n步

--------------------------------------------命令行模式
:s/<old>/<new>    将当前行的第一个匹配项old替换为new
:s/<old>/<new>/g    将当前行的所有匹配项old替换为new
:<num1>,<num2>s/<old>/<new>/g    将num1至num2行的所有匹配项old替换为new(.代表当前行，$代表最后一行)
:<num>-1,<num>+1s/<old>/<new>/g    将num上一行至num下一行的old替换为new
:%s/<old>/<new>/g    将所有行的所有匹配项old替换为new
:%s/<old>/<new>/gc    将所有行的所有匹配项old替换为new，并在每次替换进行询问
:[range]global/<pattern>/<command>    对匹配pattern的行内容执行command操作，range默认为文件每一行
:[range]m[ove] <address>    将范围行(range)整块移动到指定行(address)之下，range默认为当前行
:[range]join    将范围行合并为一行，range默认为.,.+1，即当前行和下一行
:!<cmd>    在vim内部执行shell指令cmd
:w[rite] [file_name]    保存文件内容至指定文件，默认保存到当前文件
:.w[rite] <file_name>    保存文件当前行至指定文件    
:up[date] <file_name>    类似于write，但只有文件buffer变动时保存
:r[ead] <file_name>    将文件filename的内容合并到当前文件的光标处
:file <file_name>    将修改后的内容保存到指定文件
:q!    不保存修改退出
:e [file_name]    打开指定文件
:e!    重新加载修改之前的原始文件
:wq    保存修改退出
:w<ctrl+d>    显示以w开头的命令列表
:w<tab>    补齐/切换w开头的命令
:help [cmd]    关于cmd命令的帮助
:suspend    将vim放到后台停止状态(与ctrl+z类似)
:shell    启动一个新的shell(使用exit退出)
:oldfiles    各文件最新打开的时间
:e #<N    根据oldfiles的排序，打开排序为N的文件
:mkview [0-9]    备份选项信息
:loadview [0-9]    恢复选项信息
:mksession <file_name>.vim    保存session信息
:source <file_name>.vim    恢复session信息
:wviminfo! <file_name>.viminfo    保存更全的信息(包括mark/register)
:rviminfo! <file_name>.viminfo    使用信息文件恢复
:X    配置密码
:[range]center [width]    以width宽度的中间为轴，将range范围行进行对齐，width默认为textwidth
:[range]right [width]    以width宽度的右边为轴，将range范围行进行对齐，width默认为textwidth
:[range]left [margin]    以margin对左边对齐位置，将range范围行进行对齐，margin默认为0
:runtime <dir>/<ext_file>    读取插件(依赖于runtimepath选项，从该选项目录一次查找)
:retab NUM    将原tab分拆为NUM个空格为一个tab，不足则为空格
**以下针对命令模式字符(如：:s/old/new/g)
<left>    左移一字符
<right>    右移一字符
<ctrl+left>    左移一单词
<ctrl+right>    右移一单词
<ctrl+b>    移动到起始
<ctrl+e>    移动到末尾
<Backspace>    删除光标前字符
<ctrl+w>    删除光标前的单词
<ctrl+u>    删除光标前的所有字符
<insert>    在insert和replace之间切换
<ctrl+c>|<Esc>    退出指令模式(vi兼容模式中，<Esc>可能为执行指令)
<table>    补全文件名
<ctrl+d>    罗列可使用补全内容
<up>    根据已输入来查找相关上一条记录
<ctrl+p>    无视输入，查找上一条记录
<down>    根据已输入来查找相关下一条记录
<ctrl+n>    无视输入，查找下一条记录
--------------------------------------------
**在vim的命令行模式(即[:/]进入的模式)中，可使用<Up><Down>进行翻阅历史命令
**在:s/old/new/flags中，flags有g/c/e等，对应行所有单词/确认/无匹配不报错等
**last, first转化为first last示例，:%s/\([^,]*\), \(*\)/\2 \1/g
**逆序行序示例，:g/^/m 0
**指令模式中，|为管道命令

--------------------------------------------文件列表
:args    当前文件文件列表信息
:args <file_lists>    重新安排文件列表
:previous    文件列表中上一个文件
:next    文件列表中下一个文件
:first|rewind    文件列表中第一个文件
:last    文件列表中最后一个文件
:[range]argdo <cmd>    将cmd应用于文件列表的指定范围(默认为全部，从1起始)文件(cmd可使用|作为管道)
ctrl+^    文件列表中上一次所在的文件
--------------------------------------------
**previous/next可以添加数字，进行列表间隔跳转

--------------------------------------------分割窗口
:split    在新的横向窗口中展示当前文件
:split <file_name>    在新的横向窗口中开启指定文件
:new    在新的横向窗口中创建新文件
:vsplit    在新的竖向窗口中展示当前文件
:vsplit <file_name>    在新的竖向窗口中开启指定文件
:vnew    在新的竖向窗口中创建新文件
:[range]windo <cmd>    指令应用于指定(range)窗口，默认为全部窗口
<ctrl+w> <ctrl+w>    在窗口间切换
<ctrl+w>h    向左边窗口切换
<ctrl+w>j    向下边窗口切换
<ctrl+w>k    向上边窗口切换
<ctrl+w>l    向右边窗口切换
<ctrl+w>t    向top窗口切换
<ctrl+w>b    向bottom窗口切换
<ctrl+w>K    窗口移动到top，并在水平方向全屏
<ctrl+w>J    窗口移动到bottom，并在水平方向全屏
<ctrl+w>L    窗口移动到most right，并在竖直方向全屏
<ctrl+w>H    窗口移动到most left，并在竖直方向全屏
:close    关闭窗口(只有一个窗口时不能关闭)
:only    当前除当前窗口外的其他窗口
<ctrl+w>+    增加当前窗口所占行数
<ctrl+w>-    减少当前窗口所占行数
<number><ctrl+w>_    指定当前窗口所占行数
<ctrl+w>_    当前窗口尽可能的高
:qa    退出所有窗口
:wa    保存所有窗口
:wqa    保存退出所有窗口
:qa!    不保存退出所有窗口
:all    以水平分割窗口的模式打开文件列表中的文件
:vertical all    以竖直分割窗口的模式打开文件列表中的文件
:diffsplit <file_name>    将新文件显示在分割窗口，并与当前文件进行差异比较
:recover    从swap文件恢复
:grep    使用Uxin的grep或windows的findstr进行字符串查找
--------------------------------------------
**split前加入<number>可以指定新窗口的所占行数
**<ctrl+w> +/-前加数字可以指定增加行数

--------------------------------------------tab窗口
:tabedit <file_name>    新建一个tab标题文件
gt    切换tab标签文件
:tab split    创建当前文件的tab标题文件
--------------------------------------------

--------------------------------------------普通模式
zfap    折叠当前段落
zo    打开当前折叠
zc    再次折叠已打开的折叠
zr    关闭外层折叠(用于多层折叠)
zm    适用外层折叠(用于多层折叠)
zR    关闭所有层折叠(用于多层折叠)
zM    适用所有层折叠(用于多层折叠)
--------------------------------------------

--------------------------------------------tag
**支持的编程语言：http://ctags.sourceforge.net/languages.html
**[root@~ ]$ apt-get install exuberant-ctags
**[root@~ ]$ ctags *.py
:tag <func_name>
--------------------------------------------



