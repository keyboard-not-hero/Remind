一、组件及作用：
1.latexmk：编译latex文本生成目标pdf/dvi/ps文件。底层依赖pdflatex

2.vimtex：vim插件，在调用latexmk编译tex文件，并且结合zathura进行图形化输出

3.zathura：pdf/dvi/ps(postscript)图形化显示工具。本文主要作为pdfviewer

4.ultisnips:

二、组件安装
1.Texlive安装(包含latexmk)：
  # 下载texlive镜像
  # 下载地址：https://ctan.org/tex-archive/systems/texlive/Images  

  # 校验完整性
  steven@Downloads$ md5sum -c texlive2019-20190410.iso.md5

  # 挂载iso文件
  steven@Downloads$ mount -o loop texlive2019-20190410.iso /mnt 

  # 安装Texlive
  steven@Downloads$ cd /mnt

  steven@mnt$ ./install-tl

  # 配置PATH
  steven@~$ vi .bashrc
  export PATH=/usr/local/texlive/2019/bin/x86_64-linux:$PATH

  steven@~$ source .bashrc

  # 测试安装是否成功
  steven@~$ tex --version

2.vimtex(vim插件)
  # 安装Vundle(vim插件管理套件，如安装或使用其他管理套件，可忽略)：
  steven@~$ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
  
  # 修改目录所属
  steven@~$ sudo chown -R steven:steven ~/.vim/bundle

  # 安装vimtex
  steven@~$ vi ~/.vimrc

  set nocompatible              " be iMproved, required
  filetype off                  " required

  " set the runtime path to include Vundle and initialize
  set rtp+=~/.vim/bundle/Vundle.vim
  call vundle#begin()
  " alternatively, pass a path where Vundle should install plugins
  "call vundle#begin('~/some/path/here')

  " let Vundle manage Vundle, required
  Plugin 'VundleVim/Vundle.vim'

  " The following are examples of different formats supported.
  " Keep Plugin commands between vundle#begin/end.

  Plugin 'https://github.com/lervag/vimtex.git'
  " All of your Plugins must be added before the following line
  call vundle#end()            " required
  filetype plugin indent on    " required
  " below command let tex suffix file as latex file
  let g:tex_flavor = 'latex' 
  " if vim version less than 7.4.52
  let g:vimtex_version_check = 0

  # 保存修改
  :w
  
  # 安装~/.vimrc中注明的插件
  :PluginInstall

  # 查看vimtex帮助文档
  :h vimtex

3.zathura
  # 准备前提库:
  steven@~$ sudo apt-get install libsynctex-dev libgtk-3-dev libmagic-dev

  # girara-gtk3(libgirara-gtk3-3)：用户接口
  # 环境需要:meson (>= 0.48)、ninja、pango(libpango1.0-dev)、cmake、json-c(libjson-c-dev)、doxygen、check
  steven@~$ sudo apt-get install libpango1.0-dev cmake libjson-c-dev doxygen check

  # apt源的meson/ninja版本过低，使用pip3进行安装:
  steven@~$ pip3 install meson ninja

  steven@~$ cd /tmp && git clone https://github.com/pwmt/girara.git && cd girara

  steven@girara$ meson build

  steven@girara$ cd build

  steven@build$ ninja

  steven@build$ ninja install

  安装zathura:
  # 环境需要:synctex(libsynctex-dev >=1.19)/libseccomp(libseccomp-dev)/rsvg-convert(librsvg2-bin)/appstream-util/sphinx-build(sphinx-common)/xdotool
  steven@~$ sudo apt-get install libseccomp-dev librsvg2-bin appstream-util sphinx-common xdotool
  
  # 当前源的libsynctex-dev版本过低，需要从ubuntu 19.04以上版本源下载，并且依赖于libsynctex2
  # 下载地址：https://pkgs.org/
              https://packages.ubuntu.com/
  steven@~$ sudo dpkg -i libsynctex2-XXX libsynctex-dev-XXX

  steven@~$ cd /tmp && git clone https://github.com/pwmt/zathura.git && cd zathura

  steven@zathura$ meson build

  steven@zathura$ cd build

  steven@build$ ninja

  steven@build$ ninja install

  # zathura的插件：
  # zathura-pdf-poppler to open PDF files,
  # zathura-ps to open PostScript files,
  # zathura-djvu to open DjVu files.  
  # 安装zathura-pdf-poppler:pdf支持
  # 环境需要：glib2(libglib2.0-dev)/poppler-glib(libpoppler-glib-dev)
  steven@~$ sudo apt-get install libglib2.0-dev libpoppler-glib-dev

  steven@~$ cd /tmp && git clone https://github.com/pwmt/zathura-pdf-poppler.git && cd zathura-pdf-poppler
  
  steven@zathura-pdf-poppler$ meson build

  steven@zathura-pdf-poppler$ cd build

  steven@build$ ninja

  steven@build$ ninja install

  配置预设pdfviewer:
  steven@~$ vi ~/.vimrc
  " Keep let commands after vundle#end().
  let g:vimtex_view_method = 'zathura'

  #zathura配置文件：$HOME/.config/zathura/zathurarc

4.中文语言支持
  #CTex中文包安装(基于Texlive的pdflatex)
  steven@~$ tlmgr install ctex

  # 1.CTex的四个文档类ctexart/ctexrep/ctexbook/ctexbeamer对应于latex的四个标准文档类article/report/book/beamer,并且使用时需要使用UTF-8保存
  # 格式：\documentclass[UTF8]{ctexart}
  # 2.使用非文档类时，使用宏包
  # 格式：\usepackage[UTF8]{ctex}
  # 文档类是宏包的超集，所以指定Ctex类文档后无需使用宏
  # warning：编译需保持源文件编码、编译方式、宏包编码三者一致

  # 字体路径配置
  # 让pdflatex找到系统字体
  steven@~$ vi /usr/local/texlive/2019/texmf.cnf
  OSFONTDIR = /usr/share/fonts//;/usr/local/share/fonts//;~/.fonts//

  # 指定texlive附带文字所在路径
  steven@~$ cp /usr/local/texlive/2019/texmf-var/fonts/conf/texlive-fontconfig.conf /etc/fonts/conf.d/09-texlive.conf

  # 刷新fontconfig的字体缓存
  steven@~$ sudo fc-cache -fsv

  # tex文档示例
  steven@~$ vi test.tex
  \documentclass[UTF8, fontset=ubuntu]{ctexart}
  \begin{document}
    你好,\LaTeX{}
  \end{document}
  --------------------或者---------------------
  \documentclass[UTF8, fontset=none]{ctexart}
  \ctexset{fontset=ubuntu}
  \begin{document}
    你好,\LaTeX{}
  \end{document}  

三、启动vim
  # --servername参数用于vimtex的前向/后向搜索  
  steven@~$ vim --servername vim test.tex

  Forward search:\lv

  Backward search:<C-Enter>


  !!warning!!：~/.vimrc内容汇总

  set nocompatible              " be iMproved, required
  filetype off                  " required

  " set the runtime path to include Vundle and initialize
  set rtp+=~/.vim/bundle/Vundle.vim
  call vundle#begin()
  " alternatively, pass a path where Vundle should install plugins
  "call vundle#begin('~/some/path/here')

  " let Vundle manage Vundle, required
  Plugin 'VundleVim/Vundle.vim'

  " The following are examples of different formats supported.
  " Keep Plugin commands between vundle#begin/end.

  Plugin 'https://github.com/lervag/vimtex.git'
  " All of your Plugins must be added before the following line
  call vundle#end()            " required
  filetype plugin indent on    " required
  " below command let tex suffix file as latex file
  let g:tex_flavor = 'latex' 
  " if vim version less than 7.4.52
  let g:vimtex_version_check = 0
  " Keep let commands after vundle#end().
  let g:vimtex_view_method = 'zathura'


------------------------------------------------

1.latexmk
latexmk - 生成LaTeX文档

语法
latexmk [option] [file1 [file2 [...]]]

参数释义：
    指定文档生成pdf/ps/dvi目标文件(1.目标类型由配置文件决定；2.不指定文件时，为目录下所有文档；3.原文件名不带后缀，默认为.tex)

-bm <message>    当dvi文件转化为PostScriot文件时，在每一页的对角线上打印banner文字(调用dvips)。隐含-ps参数

-bi <intensity>    banner文字的亮度，0为黑色，1为白色。intensity默认为0.95

-bs <scale>    banner文字大小，单位为1100/scale字符大小。scale默认为220

-commands    latexmk底层调用的其他指令

-c    删除所有中间文件(不包括源tex文件和目标pdf/dvi/ps文件，.aux/.fdb_latexmk/.fls/.log)

-C    删除所有中间文件和目标文件(根据log记录删除，不删除非latex生成的目标文件)

-cd    在latex生成文件之前，切换到tex文件所在目录，使目标文件在tex文件所在目录生成

-cd-    在latex生成文件之前，不切换到tex文件所在目录，使目标文件在当前目录生成(默认)

-CF    执行指令之前，移除文件的database信息。该操作可以重新生成目标文件，否则不更新

-d    类似于-bm DRAFT

-deps, -dependents    执行指令后，打印依赖文件列表

-deps-, -denpendents    执行指令后，不打印依赖文件列表(默认)

-deps-output=<file>    指定打印的依赖文件列表，所保存的文件 

-diagnostics    打印详细诊断信息

-dvi    指定生成dvi目标文件

-e <code>    在执行latexmk之前，执行的perl语法内容初始化

-f    在执行latexmk执行期间，如果检测到错误，继续强制执行

-f-    在执行latexmk执行期间，如果检测到错误，停止执行(默认)

-g    本次与上次执行latexmk期间无内容改变，用于配置改变

-h, -help    帮助文档

-jobname=<str>    指定目标文件的文件名

-M    执行指令后，打印依赖文件列表，类似于-deps

-MF <file>    指定依赖文件列表保存的文档

-new-viewer    即便在目标文件与源文件开启同步情况下，仍开启新查看器来查看当前生成目标文件

-new-viewer-    目标文件与源文件同步情况下，开启旧查看器查看当前生成目标文件(默认)

-norc    执行指令时，不读取配置文件(rc文件)

-outdir=<dir>, -output-directory=<dir>    指定目标文件生成目录

-p    打印目标文件

-pdf    指定生成pdf目标文件(使用pdflatex)

-pdfdvi    利用dvi文件生成pdf文件(使用dvipdf)

-pdfps    利用ps文件生成pdf文件(使用ps2pdf)

-print=pdf|dvi|ps|auto    指定打印目标文件的格式

-ps    生成ps目标文件

-pv    启动同步，下次打开目标文件时，自动检测源tex文件是否内容有变更

-pvc    启动实时同步，不关闭latexmk程序，实时检测tex文件磁盘内容变更

-r <rcfile>    指定配置文件，配置文件规则：1.读取全局配置文件；2.读取用户级配置文件;3.读取当前目录配置文件(latexmkrc或.latexmkrc);4.读取-r参数指定配置文件

-v, -version    指令版本

-view=<default>|<dvi>|<ps>|<pdf>    指定开启同步时，同步的目标文件类型(配合-pv或-pvc使用)

补充：
dvips dvi转化为ps

pdf2ps  pdf转化为ps

ps2pdf  ps转化为pdf

dvipdf  dvi转化为pdf


全局配置文件："/opt/local/share/latexmk/LatexMk", "/usr/local/share/latexmk/LatexMk", "/usr/local/lib/latexmk/LatexMk"
用户级配置文件：~/.latexmkrc
配置文件使用语法：perl语法

------------------------------------------------
2.vundle
# 安装~/.vimrc中注明的插件
:PluginInstall

# 更新~/.vimrc中注明的插件
:PluginUpdate

#~/.vimrc中的插件列表
:PluginList

#清除~/.vimrc已删除插件项
:PluginClean

------------------------------------------------

3.vimtex
功能支撑(vim --version查看)：
+job  提供回馈
+clientserver  提供前向/后向搜索

tex语法检查vim插件：
ale/neomake/syntastic

snippits/templates插件：
Ultisnips/neosnippet

快捷键：
\ll    编译tex文本

\lv    前向搜索，跳转到当前tex文本cursor对应的pdf文件位置

\li    vimtex元数据信息

\lt    打开toc

\lT    触发toc   

\lq    vimtex log(新页面)

\lm    公式字符映射

<c+enter>    后向搜索

vimtex指南：https://github.com/lervag/vimtex/blob/master/doc/vimtex.txt

------------------------------------------------

4.系统字体
fc-list - 可获取字体列表

语法：
fc-list [option] [pattern [element]]

参数释义：
-v    详细输出信息

-f <format>    根据指定格式<format>进行输出

-q    quiet模式，只返回status code    

-V    版本信息

-h    帮助信息

pattern：匹配pattern内容

element：将内容的element元素打印

实例：
所有字体列表
fc-list

指定语言字体
fc-list :lang=zh

所有字体指定内容
fc-list : file family style spacing

全局配置：/etc/fonts/fonts.conf
用户级配置：~/.fonts.conf
标签意义(xml格式配置文件)：
<dir>  搜索的字体目录

------------------------------------------------

引用：
[1]latexmk read.io：https://mg.readthedocs.io/latexmk.html
[2]latexmk CTAN(Comprehensive Tex Archive Network)：https://ctan.org/pkg/latexmk/
[3]official website:http：//www.personal.psu.edu/jcc8/latexmk/ 
[4]tex bbs：https://tex.stackexchange.com/
[5]CTEX CTAN：https://ctan.org/pkg/ctex
[6]fontconfig：https://www.freedesktop.org/software/fontconfig/fontconfig-user.html
[7]blog reference：https://wikimatze.de/vimtex-the-perfect-tool-for-working-with-tex-and-vim/
