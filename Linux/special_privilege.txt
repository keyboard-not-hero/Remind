SUID
要点：
1.只对二进制可执行文件有效
2.用户对程序具有可执行(x)权限
3.在执行文件的过程中，该用户暂时提升为root用户权限
实例：
thompson@~$ ll /usr/bin/passwd;ll /etc/shadow
-rwsr-xr-x 1 root root 59640 1月  25  2018 /usr/bin/passwd*
-rw-r----- 1 root shadow 1527 10月 20 21:25 /etc/shadow
如上所示，一般用户对/etc/shadow文档没有写入权限，但修改密码时，该文档需要被覆盖新用户密码
原理：一般用户对/usr/bin/passwd二进制可执行文档(1)有可执行权限(2)，当我们执行/usr/bin/passwd指令时，系统暂时将用户提升为root权限(3)，修改密码时成功覆写/etc/shadow文件

SGID
要点
文件
1.对象为二进制可执行文件
2.用户对文件具有可执行权限
3.在执行过程中，该用户暂时获得群组的支持
实例
thompson@~$ ll -L /usr/bin/locate;ll /var/lib/mlocate/mlocate.db
-rwxr-sr-x 1 root mlocate 43088 3月   2  2018 /usr/bin/locate*
-rw-r----- 1 root mlocate 13087289 11月  1 00:07 /var/lib/mlocate/mlocate.db
如上所示，others用户对/var/lib/mlocate/mlocate.db文档没有读取权限，但使用locate进行文件搜索时，需要读取该数据库记录
原理：others对/use/bin/locate二进制可执行文档(1)有可执行权限(2)，当我们执行locate指令时，系统暂时将用户获得mlocate群组支持(3)，并成功读取/var/lib/mlocate/mlocate.db内容

目录
1.用户对目录具有r/w/x权限
2.当用户进入该目录，创建新文件时，文件所属群组与目录群组一致
**当前用户不需要属于该目录群组用户

SBIT
1.用户对目录由w/x权限
2.当用户在该目录下创建文件，仅自己能删除该文件(root不在限定范围)


SUID/SGID/SBIT权限配置：
chmod 7654 /tmp
在权限位置时，7由SUID(4)+SGID(2)+SBIT(1)组成，6为owner权限配置(4+2)，5为group权限(4+1)，4为others权限(4)

SUID/SGID/SBIT表现形式：
---s--s--t
第一个s代表SUID，并且owner具有执行(x)权限；
第二个s代表SGID，并且group具有执行(x)权限；
t代表SBIT，并且others具有执行(x权限)
---S--S--T
第一个S代表SUID，并且owner不具有执行(x)权限；
第二个S代表SGID，并且group不具有执行(x)权限；
T代表SBIT，并且others不具有执行(x权限)
