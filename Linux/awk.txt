gawk - GNU版本awk，模式扫描和文本处理语言，对文件执行逐行操作

语法：
gawk [option] ['program'] [file...]

参数释义：
-F <fs>, --field-separator <fs>    field分隔符

-f <source-filr>, --file <source-file>    从文件内读取program指令

-v var=<value>, --assign var=<value>    为program变量var赋值为value

-W <gawk-opt>    使用gawk拓展option

--    代表option部分结束

gawk拓展选项：
-b, --characters-as-bytes    将所有input和output视为单字节字符

-c, --traditional    gawk兼容模式，只能使用awk基本特性

-C, --copyright    打印GPL简短内容

-d[file], --dump-variables[=file]    打印文件file可使用的全局变量有序列表。当file未提供，默认为awkvars.out

-D[file], --debug[=file]    根据file内的debug交互式指令进行调试

-e <program-text>, --source <program-text>    指定program部分，可多次重复使用该option

-E <file>, --exec <file>    类似于-f，但有两点差异：
    1.中断其他option，直接将其他option转化为program部分
    2.-v option被禁止

-g, --gen-pot    分析program内容，并且生成gettext可移植模板文件

-h, --help    帮助信息

-i <source-file>, --include <source-file>    与-f类似，但有两点差异：
    1.当-i先于program时，不再加载program；但和-f同时使用时，-f指定内容始终读取加载
    2.由于-i作为code库，所以并不能识别其中program内容，并期望获取-f相关program内容

-l <ext>, --load <ext>   　查找名称为ext的系统共享库。搜索路径参考AWKLIBPATH，extension suffix参考系统默认(不能手动指定)

-L[value], --lint[=value]    更严格的警告模式(类似于开发者模式)，并且对其他版本awk兼容性较低

-M, --bignum    对数字使用任意精度算法，依赖于GNU的MPFR和MP库

-n, --non-decimal-data    允许在input中使用八进制和十六进制

-N, --use-lc-numeric    强制携带十进制的.符号

-o[file], --pretty-print[=file]    将program以pretty方式排列(默认保存文件为awkprof.out)，隐式包含--no-optimize

-O, --optimize    对program部分的优化，默认开启

-p[file], --profile[=file]    指定program的配置文件(默认为awkprof.out)。隐式包含--no-optimize

-P, --posix    严格的posix兼容模式，禁止gawk拓展

-r, --re-interval    允许内部表达式使用regexp，默认开启
　
-s, --no-optimize    关闭program部分的优化

-S, --sandbox    沙盒模式，不允许调动system()/input重导向getline/output重导向print与printf，在gawk启动后不可以添加文件名到ARGV

-t, --lint-old    link老版本兼容，awk v7之后不再支持

-V, --version    版本信息


program格式:
pattern1 {action1}
pattern2 {action2}
...

program事项：
1.多个邻接program可以组合成一个program
2.\后紧接字符，被shell去掉\符号后，将字符交给program
3.''保护program内容，不被shell解释
4.""保护大部分program内容(variable和command除外)。特殊字符列表：$/`/\/"
5.字符串到数字/数字到字符串的转化都是根据上下文自动进行
6.'#'后的文字为注释，直到遇到'\n'

program变量汇总(#标记为gawk拓展)：
ARGC    指令行参数array的元素个数
ARGIND #    当打开每一个input file时，该值配置为对应文件在ARGV array中的索引
ARGV    指令行参数array(awk指令/文件名组成，program/option不参与组成)，数组以0为起始
AWKLIBPATH    
BINMODE #    以二进制模式代表读写模式。1(r)/2(w)/3(rw),大于3的数字视为3
CONVFMT    当数字转化为字符串时，作为sprintf函数第一个参数，默认为%.6g(即整数最大位数或浮点数小数位数)
ENVIRON    数组名称，可通过EVVIRON["NAME"]格式获取系统环境变量的值。如ENVIRON["PATH"]
    ENVIRON["AWKPATH"]    .awk后缀program文件搜寻路径(-f或-i)，默认为".:/usr/local/share/awk"
    ENVIRON["AWKLIBPATH"]    .so后缀系统分享库文件搜索路径(-l)，默认为"/usr/local/lib/gawk"
ERRNO #    
FIELDWIDTHS #    使用列宽列表来指定field(覆盖FS和FPAT变量)
    1.可在每个元素前指定<number>:来指定field前需跳过的列数
    2.最后一个field可指定为*，表示所有剩下列数都属于该列
FILENAME    当前input file名称
FNR    当前文件读取的记录数(行数)
FPAT #    符合regexp(表示为字符串)的分为field
FS    使用字符串或regexp作为field分割符，默认为空格(" "，代表[ \t\n]+，并且截取record首尾空白字符)。当FS为regexp时，才能使用IGNORECASE选项。无论FS是什么单一字符，'\n'都为分割字符
IGNORECASE #    当该值为0，代表关闭选项；当该值为正整数，代表启动选项。该选项作用于全局(声明选项之前和之后)
FUNCTAB #    所有包含built-int/user-defind/extension function数组
LINT #    当值为true时，开启lint warning
NR    所有文件读取的总记录数(行数)
NF    当前record拥有的field数量
OFMT    当数字转化为字符串时，作为sprintf函数第一个参数，默认为%.6g
OFS    output格式field分割符，默认为" "
ORS    output格式record分割符，默认为"\n"
PREC #    任意浮点数的精度，默认为53 bit
PROCINFO #    数组，该数组可通过PROCINFO["NAME"]获取变量信息。如PROCINFO["FS"]获取分割方式(FS/FIELDWIDTHS/FPAT)
RLENGTH    通过match function获取的子字符串长度
RSTART    通过match function获取的子字符串，其起始字符在字符串中的索引位置
RS    input record分割单位，可以为字符串或regexp，默认为'\n'。字符串泛指空白字符个数，并截断文件首尾空白，regexp精确匹配空白字符个数，该规则同样适用于FS变量
RT #    详细record分割单位，当RS为regexp时，RT为每次分割单位的内容(仅gawk有效)
SUBSEP    当awk使用多维数组时，将多个维度数字合并为一个字符串，该变量为字符串的拼接符号。默认为\034    
SYMTAB #    
TEXTDOMAIN #    
$0    整行内容
$N    N为正整数，代表行内的第N个field
<variable>    自定义变量名称，值自动初始值为0或""



pattern列表：
BEGIN    读取input file行之前(针对所有文件，总共只执行一次)。无默认action
END    读取input file所有行之后(针对所有文件，总共只执行一次)。无默认action
BEGINFILE    读取input file行之前(针对所有文件，但每个文件各执行一次，gawk特性)，但后于BEGIN。无默认action
ENDFILE    读取input file所有行之后(针对单一文件，但每个文件各执行一次，gawk特性)，但先于END。无默认action
/RE/    读取记录内容匹配正则表达式。等于$0~/RE/，可使用强类型@/RE/单独指定
<expression>    表达式，如果为非empty字符串或非0则匹配。如$1 == "root"
    exp ~ /RE/    指定field匹配正则表达式
    exp !~ /RE/    指定字段不匹配正则表达式
<begin_exp>,<end_exp>    匹配指定范围记录，闭区间[begin_exp,end_exp]
<empty>    无指定，匹配所有记录


action列表：
print var1,var2...    打印匹配内容(一般pattern默认为print $0，BEGIN和END除外)。使用,分割item，显示为' '；使用' '分割item，显示为没有间隔

printf format,var1,var2...    打印匹配内容，并指定格式
    输出格式：
    %c - 字符格式
    %d, %i - 十进制整数
    %e, %E - 科学计数法
    %f, %F - 浮点数，包括inf/-inf/nan
    %g, %G - 浮点数或科学计数法或十进制整数，依据情况来使用表示法
    %o - 无符号八进制整数
    %s - 字符串格式
    %u - 无符号十进制整数
    %x, %X - 无符号十六进制整数
    %% - %符号
    N$ - 代表var的排列位置，如%2$s
    - - 按指定宽度，并进行左对齐(默认右对齐)，如%-5s "love" --> "love "
    <space> - 数字按指定宽度，进行前置空格填充，如% 6d 123 -->    123
    + - 数字使用符号进行正负区分，如%+5d "100" --> "+ 100"
    # - 当使用%o时，前置0代表进度;
        当使用%x时，前置0x代表进度;
        当使用%e/%f/%g时，无论是否精确到小数点，都包含'.';
    0 - 数字按指定宽度，使用前置0填充数字，如%05d "100" --> "00100"
    ' - 将数字的整数部分使用','进行千位划分(需要locale支持)
    width - 代表整体最小宽度。当该宽度小于实际宽度时，使用实际宽度；当该宽度大于实际宽度时，补充额外字符(默认空格)以填充到指定宽度
    .prec - 当使用%d/%i/%o/%u/%x/%X时，代表整体最小宽度(width与.prec取最大者；与width不同，.prec默认前置0)
            当使用%e/%E/%f/%F时，代表小数点后的精确位数
            当使用%g/%G时，代表最大数字位数(表示法决定依据)
            当使用%s时，代表最大字符个数
    **width与.prec可在var列表中给出(第1和第2个参数)，并且使用*占位    

next    马上执行下一条record读取(忽略后续action)

nextfile    马上执行下一个文件读取

exit [return code]    退出awk程序，并返回指定code

控制语句：
if-else语句:
if (condition){
    then-statement
}
else{
    else-statement
}

while语句:
while (condition){
    body
}

do-while语句:
do{
    body
}
while (condition)

for语句:
for (initialization; condition; increment){
    body
}
或
for (i in array){
    body
}

switch语句(gawk特性):
switch (expression){
case value:
    case-body
    break
default:
    default-body
    break
}
**break - 直接退出for/while/do-while最内层循环，或者跳出switch的case匹配
**continue - 跳出for/while/do-while的当前次循环
**action内的语句之间可使用;分隔



重导向:
1.output file - print <items> > <output_file>
2.append file - print <items> >> <output_file>
3.pipe - print <items> | <command>
4.coprocess - print <items> |& <command>
**coprocess为gawk特性，该特性支持command输出被getline读取


数字算数符号：
^/** - 幂，^兼容性更强
- - 负数，减号
+ - 正数，加号
* - 乘号
/ - 除号，结果为小数
% - 求余
++ - 自加
-- - 自减
**字符串拼接不需要操作符，相邻多个字符串自动拼接

true和false：
true - 所有非0数字或非空字符串
false - 数字0或""字符串

比较运算符：
> - 大于
>= - 大于等于
< - 小于
<= - 小于等于
== - 等于
!= - 不等于
~ - 字符串匹配RE
!~ = 字符串不匹配RE

布尔运算符：
&& - 短路与
|| - 短路或
! - 非

条件运算符：
<condition> ? <true_result> : <false_result>

运算符优先级(由高到低)：
()    分组
$    字段引用
++ --    自加，自减
^ **    求幂/指数
+ - !    正，负，逻辑非
* / %    乘/除/余
+ -    加，减
    字符串叠加(无特殊符号)
< <= > >= == != | |& 比较运算符/管道重定向
~ !~    匹配/不匹配
in    数组成员
&&    短路与
||    短路或
?:    条件运算符
= += -= *= /= %= ^= **=    赋值运算符    


RE列表：
\    跳脱字符

^    字符串起始位置的空字符串(empty string)

$    字符串结尾位置的空字符串

.    匹配所有单个字符(NUL字符除外)

[]    限定范围内的任一字符
    规则列表：
    1.]位于第一个字符，代表匹配literal字符；位于其他位置，代表范围结束
    2.-位于第一个或最后一个字符，代表literal字符；位于其他位置，代表范围字符
    3.\为跳脱字符
    4.一般特殊字符不含特殊意义
    5.[::]为字符集合
    6.[..]为序列字符集合
    7.[==]为等价字符集合

[^]    限定范围外的任一字符

|    匹配两组字符串中的其中一个

()    子分组，可包含9个分组

*    前面的字符重复0或1或多次

+    前面的字符重复1或多次

?    前面的字符匹配0或1次

{n}    前面的字符精确匹配n次

{n,}    前面的字符匹配n次以上

{n,m}    前面的字符匹配n至m次

\s    匹配任何空白字符

\S    匹配任何非空白字符

\w    匹配单词字符，等同于[[:alnum:]_]

\W    匹配非单词字符

\<    匹配单词起始位置的空字符串

\>    匹配单词结束位置的空字符串

\y    匹配单词起始或结束位置的空字符串

\B    匹配非单词起始和结束位置的空字符串

\`    匹配buffer中的字符串起始位置的空字符串

\'    匹配buffer中的字符串结束位置的空字符串


array：
1.在awk中，数组定义为与位置无关，即相邻的元素的索引可以不相邻(或者一个为数字索引，邻接为字符串索引)
2.判断元素是否在数组中：if (index in array)
3.数组元素赋值：array[index] = value
4.遍历数组：for (ind in array)
                print array[ind]
5.列表排序方式(gawk拓展)：PROCINFO["sorted_in"]
    可选项：
    @unsorted - 无规则排序(默认)
    @ind_str_asc - index按字符串升序排列(按ASCII排序)
    @ind_num_asc - index按数字升序排列(字符串在数字之前排序)
    @val_type_asc - 元素按升序排列
    @val_str_asc - 元素按字符串升序排列
    @val_num_asc - 元素按数字升序排列
    @ind_str_desc - index按字符串降序排序(按ASCII排序)
    @ind_num_desc - index按数字降序排列(数字在字符串之前排序)
    @val_type_desc - 元素按降序排列
    @val_str_desc - 元素按字符串降序排列
    @val_num_desc - 元素按数字降序排列
6.数组的索引通常为字符串，如果为数字(八进制和十六进制先转化为十进制)，默认转化为字符串
7.删除数组元素：delete array[index]
8.删除数组所有元素：delete array
9.在多维数组中，维度使用','分隔，并且将自动将维度转化为字符串，该字符串使用SUBSEP分隔各维度(如："4@2@3")
10.判断元素是否在多维数组中：if ((subscript1,subscript2...) in array)

    
program function：
数字函数：
atan2(y,x)：求y/x的atan值。y代表y轴上的长度，x代表x轴上的长度

cos(x)：求弧度x的cos值

exp(x)：求e^x结果

int(x)：截取尾部小数点的整数

log(x)：求x的自然对数

rand()：返回一个[0,1)区间的均匀分布随机数

sin(x)：求弧度x的cos值

sqrt(x)：返回x的平方根

srand([x])：配置随机数seed，当未提供x参数时，根据当前日期和时间来配置seed。该函数返回上一次的seed

字符串函数(#标注gawk拓展)：
asort(source[, dest[, how]]) #：将数组source根据val排列，并将index重新编排为从1为起始的序列。当dest提供，将source内容复制给dest。函数返回数组元素个数

asorti(source[, dest[, how]]) #：将数组source根据index排列，并将index作为val，然后将index编排为从1为起始的序列。当dest提供，将source内容复制给dest。函数返回元素个数

gensub(regexp, replacement, how[, target]) #：当target字符串匹配regexp时，使用replacement替换regexp部分，how代表替换规则(g/G代表所有匹配都替换，数字代表只替换第n个匹配项)。默认target为$0。函数返回target替换后的字符串

gsub(regexp, replacement[, target])：当target字符串匹配regexp时，使用replacement进行所有匹配项。默认target为$0。函数返回替换次数

index(in, find)：在字符串in中查找子字符串find，返回find在in中第一次出现的位置(由1起始)。当find未出现在in中时，返回0

length([string])：返回字符串所包含的字符个数(数字先转化为字符串)。当string未提供时，默认为$0。当string为数组时，返回数组长度

match(string, regexp[, array])：在字符串string中匹配第一个出现的符合正则regexp的字符串，并返回在string中的起始索引位置。array为gawk拓展参数，array[0]为regexp完整匹配内容，array[n](n代表正整数)代表对regexp中使用'()'限定子字符串的引用。该函数同时配置变量RSTART为索引位置，RLENGTH为匹配子字符串实际长度

patsplit(string, array[, fieldpat[, seps]]) #：将string根据RE格式的fieldpat字段进行分割，并将分割后的内容放入array数组，seps[i]代表array[i]后的null separator(共有length(array)+1个separator)，函数返回分割后的元素个数。当fieldpat省略时，使用变量FPAT内容

split(string, array[, fieldsep[, seps]])：将string根据RE格式的fieldsep字段进行分割，并将分割后的内容放入array数组，seps[i]代表array[i]后的null separator(共有length(array)+1个separator)，并且seps为gawk拓展，函数返回分割后的元素个数。当fieldsep省略时，使用变量FS内容

sprintf(format, expression1, ...)：返回(不打印)printf(format, expression1, ...)会打印的内容

strtonum(str) #：返回字符串的数字形式

sub(regexp, replacement[, target])：将target字符串(参数默认为$0)中，第一次匹配regexp的内容，使用replacement替换，函数返回替换次数(0或1)。当replacement中包含'&'符号时，该符号表示regexp完整匹配内容引用，使用'\\&'解引用

substr(string, start[, length])：将字符串string从start位置(由1起始)，截取长度为length的子字符串，并返回该子字符串。当length未提供，截取start位置后的所有字符

tolower(str)：返回字符串的小写形式

toupper(str)：返回字符串的大写形式


getline用法：
getline - 马上读取下一行，作用到预定义变量NF/NR/FNR/RT/$0。返回1代表读取下一行成功，返回0代表读取到文件末尾，返回-1代表读取错误

getline <var> - 读取下一行，将下一行内容赋予变量var，作用到预定义变量NR/FNR/RT

getline < <file> - 从指定文件读取一行，作用到预定义变量NF/RT/$0

getline <var> < <file> -从指定文件读取一行，并将该行内容赋予变量var，作用到预定义变量RT

<command> | getline - 将command的output作为输入读取一行，作用到预定义变量NF/RT/$0

<command> | getline <var> - 将command的output作为输入读取一行，将改行内容赋予变量var，作用到预定义变量RT



范例路径：/usr/share/doc/gawk/examples/data


原理：
1.读取input file一个record(通常为行)，行再分割为field单元，对pattern进行匹配
2.匹配成功，则执行action操作
3.读取下一行，执行1/2步操作
