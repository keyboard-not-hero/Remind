错误: 指语法输入不正确导致的语法错误
异常: 可通过built-in或自定义异常类捕获(try…except语法)的错误

异常语法:
try: 
  statement1
except ErrorClass:
  statement2
else:
  statement3
finally:
  statement4
其中：
1.else为未捕获到异常时，必须执行的指令
2.finally不论是否捕获到异常，最终都会执行


raise Exception(args)：强制出现指定异常，并附带参数
raise Exception写法，自动调用Exception的无参构造器

常见异常
ZeroDivisionError - 除数为0
ValueError - 方法接收的参数为正确的类型，但是为错误的值
IndexError - sequence(列表/元组)的索引超出范围

Python的错误称为反向追踪器，最先显示外部调用错误，末尾一般为内部调用错误(一开始出错的地方)


断言
语法：
assert condition, statement


logging
loggong level:
DEBUG
INFO
WARNING(默认)
ERROR
CRITICAL

例1. 使用默认阈值
import logging

logging.info('normal info')
logging.warning('warning')

例2. 设置监管阈值
import logging
# 设置logging等级
logging.basicConfig(level=logging.DEBUG)
logging.info('normal info')
logging.warning('warning')

例3. 将输出logging保存到文件
import logging
logging.basicConfig(filename='logging.log', level=logging.INFO)
logging.warning('warning')
