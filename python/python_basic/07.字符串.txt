str - 不可变的Unicode代码序列点(可encode为bytes)，使用''或""限定

str默认在内存中以Unicode(2字节)方式存储，在文本档案中以UTF-8(1~4字节，RFC 3629)为具体实现方式

ANSI编码规则：使用本地编码规则(如：简体中文的GBK)，其中GBK的0x00~0x7f依旧使用一个字节，兼容于ASCII

UTF-8编码规则：
Unicode 7bit编码类似于ASCII。7bit以上编码时，首字节连续1的个数代表UTF字节，后续紧跟一个0分开实质编码内容，后续每字节最高bit为1，后续紧跟一个0。列表如下：
   Char. number range  |        UTF-8 octet sequence
      (hexadecimal)    |              (binary)
   --------------------+---------------------------------------------
   0000 0000-0000 007F | 0xxxxxxx
   0000 0080-0000 07FF | 110xxxxx 10xxxxxx
   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx

str限定格式：
[u]" ":限定单行字符串

[u]' ':限定单行字符串

''' ''':限定多行字符串，也可用于多行注释

""" """:限定多行字符串，也可用于多行注释

r' ':字符串按内容逐字打印

b' ':bytes类型字符串(被编码的内容)

\:转义字符


索引：通过str[i]的形式，对字符串内的字符进行读取，i正向由0起始，反向由-1起始

切片：通过str[i:j]的形式，对字符串内的多个连续字符进行读取，读取范围为左闭右开区间[i,j)

in和not in用于测试第一个字符串是否在第二个字符串中

built-in的Unicode单字符与int转换方法：
ord()：将Unicode单字符转化为int
chr()：将int转化为对应Unicode单字符内容
**字符串内容为不可更改，str[i]=”a”为错误操作，但str=”abc”可行，因为直接修改了str的内容指向


str与bytes区别：
str属于Text Sequence Type，bytes属于Binary Sequence Type(编码后)


function：
capitalize()：字符串首字母大写

casefold()：将所有字母转化为小写。相较于lower，casefold还能将其他语言的字符转化为小写英文字母

count(substr[,start[,end]])：substr在字符串中出现的次数，可指定字符串的起始和结束搜索范围

encode(encoding="utf-8", errors="strict")：将字符串编码为bytes，可指定编码和错误类型。

startswith(prefix[, start[, end]])：是否以指定字符串集prefix起始，并且可指定起始和结束位置

endswith(suffix[, start[, end]])：是否以指定字符串集suffix结尾(suffix可以为元组)，可指定匹配的起始和结束搜索范围

expandtabs(tabsize=8)：将\t替换为空格，并可指定单个\t替换为几个空格

find(sub[, start[, end]])：从字符串中查找sub子串，并返回子串出现的首字母位置(无匹配返回-1)，可指定字符串起始和结束搜寻位置

format(*args, **kwargs)：在字符串中以数字{n}标记参数(或命名{name})，使用参数替换字符串中的内容。例：”I love {me}”.format(me=”you”)

format_map(mapping)：类似于format的format(**kwargs)，但mapping为dict的子类

index(sub[, start[, end]])：类似于find，但无匹配时导致ValueError异常

isalpha()：判断是否为字母

isdecimal()：判断是否为十进制数字

isdigit()：判断是否为十进制数字或者其他特殊意义数字(如上角标数字)

isnumeric()：判断是否为数字

isalnum()：判断是否为字母或者数字

isascii()：判断是否为ascii字符，Unicode范围U+0000-U+007F

isidentifier()：判断是否为identifier。identifier内容跳转

isprintable()：是否为可打印字符

islower()：字符串至少包含一个字母，并且所有字母是否都为小写

isupper()：字符串至少包含一个字母，并且所有字母是否都为大写

isspace()：是否仅包含空格、制表符和换行

istitle()：是否每个单词为首字母大写，后续为小写字母

join(iterable)：将字符串作为iterable内容的分隔符，iterable的item为str，当item类型错误，抛出TypeError异常

ljust(width[,fillchar])：将字符串指定占位宽度(当width小于len(str)时，返回原字符串)，并左对齐。可以提供填充字符fillchar

rjust(width[,fillchar])：将字符串指定占位宽度(当width小于len(str)时，返回原字符串)，并右对齐，可以提供填充字符fillchar

center(width[,fillchar])：将字符串指定占位宽度(当width小于len(str)时，返回原字符串)，并居中对齐，可以提供填充字符fillchar

lower()：将字符串的字符全部转化为小写

upper()：将字符串的字符全部转化为大写

lstrip([chars])：删除前置的指定字符集，默认为空格

rstrip([chars])：删除后置的指定字符集，默认为空格

strip([chars])：删除前置和后置的指定字符集，默认为空格

static maketrans(x[,y[,z]])：返回一个转化table(x为转化前的字符集，y为转化前对应字符的转化后字符集，z为需要转化为None的字符集)，用于translate方法

translate(table)：实际的字符映射转化，table为maketrans返回的内容

partition(sep)：以匹配内容sep第一次出现的地方进行分割，返回三元元组，第一部分为分割符前的内容，第二部分为分割符，第三部分为分割符后的内容。若无法匹配sep，则第一部分为整体字符串，第二和第三部分为空字符串

rpartition(sep)：以匹配内容sep最后一次出现的地方进行分割，返回三元元组，第一部分为分割符前的内容，第二部分为分割符，第三部分为分割符后的内容。若无法匹配sep，则第一和第二部分为空字符串，第三部分为整体字符串

replace(old,new[,count])：将匹配的old内容替换为new，可指定替换的次数count

rfind(sub[,start[,end])：从右边开始匹配sub，并可指定起始和结束位置，匹配失败返回-1

rindex(sub[,start[,end])：类似于rfind，但是匹配失败导致ValueError异常

split(sep=None, maxsplit=-1)：将字符串以sep为分割符字符集从左边开始进行分割(默认为空白字符)，最大分割次数为maxsplit

rsplit(sep=None, maxsplit=-1)：将字符串以sep为分割符字符集从右边开始进行分割(默认为空白字符)，最大分割次数为maxsplit

swapcase()：转换字符串中的大小写

title()：将每个单词的首字母转化为大写

zfill(width)：将字符串延长为width宽度，并以前置”0”填充，当width小于len(str)时，返回原字符串


printf风格字符串格式
"str... <conv_specifier01> str... <conv_specifier01> str..." % (val1, val2...)

一、conversion specifier(*起始代表可选)位置顺序：
1.以%开始，标志占位指示开始
2.*字典的key，格式为(key)，此时tuple需要修改为dict格式
3.*转化填充类型flag，代表多余位置的填充方式
4.*最小字段宽度，当使用'*'指定时，在tuple中的余下第一个值中给出
5.*精度，以'.'符号开始，当后续使用'*'指定时，在tuple中余下的第一个值中给出
6.*长度修饰符，可选值h/l/L，当前被Python忽略
7.转化类型type
** %*.*s在tuple中的值，顺序为(min_field_width, precise, specifier)

转化flag详细内容:
'#'    内容右对齐，前置填充空格，并为十六进制和八进制自动添加前缀(0x或0o)，适用于字符串和数字
'0'    内容右对齐，前置填充0，适用于数字，字符串填充空格
'-'    内容左对齐，覆盖'0'FLAG
' '    内容右对齐，前置填充空格，适用于字符串和数字
'+'    内容右对齐，前置填充空格，并为数字添加正反数符号，适用于字符串和数字，覆盖' 'FLAG

转化类型详细内容:
'd'   符号十进制数字

'i'   符号十进制数字

'o'   符号八进制数字

'x'   符号十六进制数字(小写)

'X'   符号十六进制数字(大写)

'e'   指数形式浮点数(小写)

'E'   指数形式浮点数(大写)

'f'   十进制浮点数

'F'   十进制浮点数

'g'   十进制浮点数，当指数小于-4或大于5时，使用指数形式(小写)

'G'   十进制浮点数，当指数小于-4或大于5时，使用指数形式(大写)

'c'   单一字符

'r'   字符串(类似于repr())

's'   字符串(类似于str())

'a'   字符串(类似于ascii())

'%'   无NAME字段，只返回%
** 字符串中，可以使用'%%'代表'%'字符

二、val内容可以为字符串，或变量
