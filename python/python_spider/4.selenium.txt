selenium--动态js解析第三方库，目前支持2.7和3.5以上版本
pip安装：
pip install selenium

浏览器驱动：
google浏览器--chromedriver
下载地址：http://chromedriver.chromium.org/downloads
firefox浏览器--geckodriver
下载地址：https://github.com/mozilla/geckodriver/releases
1.Windows下载后将可执行文件拖动到/PYTHON/PATH/scripts目录下
GNU/Linux和Mac直接将可执行文件加入PATH路径
2.在command下执行驱动文件

无界面浏览器：phantomjs
1.下载后将bin目录配置到环境变量
2.在command下执行phantomjs

导入库：
from selenium import webdriver

获取WebDriver：
webdriver.Chrome()：返回selenium.webdriver.chrome.webdriver.WebDriver对象
webdriver.Firefox()：返回selenium.webdriver.firefox.webdriver.WebDriver对象
相关类：
selenium.webdriver.chrome.webdriver.WebDriver
对应属性/方法：
page_source：获取站点源码
get(url)：获取对链接站点的控制
find_element_by_tag_name(tag_name)：返回selenium.webdriver.remote.webelement.WebElement对象，根据TAG名称查找到的第一个tag(element)
find_element_by_id(id_name)：返回selenium.webdriver.remote.webelement.WebElement对象，根据ID属性查找到的第一个tag(element)
find_element_by_class_name(class_name)：返回selenium.webdriver.remote.webelement.WebElement对象，根据CLASS属性查找到的第一个tag(element)
find_element_by_name(name)：返回selenium.webdriver.remote.webelement.WebElement对象，根据NAME属性查找到的第一个tag(element)
find_element_by_xpath(xpath)：返回selenium.webdriver.remote.webelement.WebElement对象，根据XPATH查找到的第一个tag(element)
find_elements_by_tag_name(id_name)：获取对应tag名的内容，返回所有结果
get_network_conditions()：返回网络信息
forward()：前进
back()：后退
addcookie(cookie)：添加cookie
getcookies()：获取cookie
launch_app(id_name)：使用指定ID启动浏览器
implicitly_wait(time_to_wait)：隐式等待，time_to_wait为生命周期，单位为s
refresh()：刷新当前页面
maximize_window()：最大化窗口
minimize_window()：最小化窗口
close()：关闭浏览器tab
quit()：关闭整个浏览器

相关类：
selenium.webdriver.remote.webelement.WebElement
对应属性/方法：
text：文本内容
send_keys(str)：发送关键词到输入框
clear()：清除输入框内容
get_attribute(attr)：获取属性值
submit()：提交form中的数据

相关类：
selenium.webdriver.support.ui.Select
属性/方法：
all_selected_options：返回WebElement对象列表，代表所有已选中options
options：返回WebElement对象列表，代表所有options
first_selected_option：返回WebElement对象，代表第一个选中option
__init__(webelement)：使用WebElement构造一个Select对象
deselect_all()：取消所有项的选中状态，只有当select支持multiple select时可使用，否则引发NotImplementedError异常
deselect_by_index(index)：根据索引取消选中，索引起始为0。只有当select支持multiple select时可使用，否则引发NotImplementedError异常。当索引不在范围内，引发NoSuchElementException异常
select_by_index(index)：根据索引选中，索引起始为0。当索引不在范围内，引发NoSuchElementException异常
deselect_by_value(value)：匹配对应value属性值的option，取消选中状态。只有当select支持multiple select时可使用，否则引发NotImplementedError异常。无匹配项时，引发NoSuchElementException异常
select_by_value(value)：匹配对应value属性值的option，确定选中状态。无匹配项时，引发NoSuchElementException异常
deselect_by_visible_text(text)：根据匹配的元素内容来取消option选中。只有当select支持multiple select时可使用，否则引发NotImplementedError异常。无匹配项时，引发NoSuchElementException异常
select_by_visible_text(text)：根据匹配的元素内容来确定option选中。无匹配项时，引发NoSuchElementException异常

相关类：
selenium.webdriver.ActionChains
属性/方法：
__init__(webdriver)：利用WebDriver构造ActionChains对象
click(on_element=None)：对指定WebElement对象执行点击操作，如果没有指定，则点击当前鼠标定位位置
move_by_offset(xoffset, yoffset)：鼠标移动固定x轴和y轴距离
move_to_element(to_element)：将鼠标移动到元素中间位置
release(on_element=None)：在元素上释放鼠标键
drag_and_drop(source，target)：在source处点击并拖动到target处，然后释放
reset_actions()：重置action队列
perform()：执行构建的一系列操作。ActionChains的动作存储在队列中，调用perform时一并执行

相关模块：
selenium.webdriver.support.expected_conditions
类：
presence_of_element_located(locator)：是否提供定位元素，locatoe为(by, value)tuple


相关类：
selenium.webdriver.support.ui.WebDriverWait
方法：
__init__(webdriver, timeout, poll_frequency=0.5, ignored_exceptions=None)：利用webdriver等参数构造WebDriverWait对象。timeout为等待超时，单位s；poll_frequency为检查until间隔，单位为s；ignored_exceptions默认只有NoSuchElementException异常
until(method, message='')：呼叫method方法(通常为expected_conditions模块的类)，直到返回WebElement对象


selenium等待模式：
1.显式等待：最长等待n秒(WebDriverWait)，如果在n秒之内完成条件(until)，则马上执行下一步
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
driver = webdriver.Chrome()
driver.get("http://127.0.0.1/title.html")
try{
  element = WebDriverWait(driver,100).until(EC.presence_of_element_located((By.NAME, "text"))
}finally{
  driver.close()
}
2.隐式等待：代表WebDriver存活的生命周期
from selenium import webdriver
driver = webdriver.Chrome()
driver.implicitly_wait(10)
driver.get("http://127.0.0.1/title.html")
element = driver.find_element_by_id("myId")


selenium链接：https://selenium-python.readthedocs.io/
