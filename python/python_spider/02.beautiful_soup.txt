Beautiful Soup - 从HTML和XML文本中拉取数据
安装
pip3 install beautifulsoup4

模块导入 
import bs4


BeautifulSoup4对象种类归纳:
1.bs4.BeautifulSoup
2.bs4.element.Tag
3.bs4.element.NavigableString
4.bs4.element.Comment

继承关系: 
bs4.element.PageElement --> bs4.element.Tag --> bs4.BeautifulSoup
bs4.element.PageElement, str --> bs4.element.NavigableString --> bs4.element.PreformattedString --> bs4.element.Comment


bs4.BeautifulSoup类
variable:


method:
__init__(markup='', features=None, builder=None, parse_only=None, from_encoding=None, exclude_encodings=None, element_classes=None, **kwargs)
    构造BeautifulSoup对象, HTML或XML的数据结构对象. 参数列表如下:
    	markup - str格式或bytes格式或file-object, 需要转化的内容
    	features - str格式, 指定解析器类型. 列表如下: html.parser/lxml/xml/html5lib. 建议手动指定
		builder - TreeBuilder子类, 不依赖于features构建方法
    	parse_only - SoupStrainer对象, 只考虑符合SoupStrainer的文档部分
    	from_encoding - str格式, 当markup为bytes格式内容时, 指定markup的编码类型, 用于解码
    	exclude_encodings - list of str格式, 当markup为bytes格式, 排除的编码类型列表
		element_classes - dict格式, 映射元素的对象类型, 如Tag/NavigableString等
    	kwargs - 用于与Beautiful Soup 3后向兼容

decode(pretty_print=False, eventual_encoding='utf-8', formatter='minimal') -> str	
	将BeautifulSoup解码为HTML/XML格式的str. 参数列表如下:
		pretty_print - bool格式, 是否使用缩进格式
		eventual_encoding - str格式, 指定最后内容的编码格式. 指定为None时, 使用Unicode编码(即str)


bs4.element.Tag类
variable:
children
	当前Tag的所有下一层级PageElement实例. 格式为iterator

descendants
	当前Tag的所有子孙层级PageElement实例. 格式为iterator

string
	当前Tag只有一个子层级实例, 并且为NavigableString, 获取该NavigableString

method:
__init__(parser=None, builder=None, name=None, namespace=None, prefix=None, attrs=None, parent=None, previous=None, is_xml=None, sourceline=None, sourcepos=None, can_be_empty_element=None, cdata_list_attributes=None, preserve_whitespace_tags=None)
	构造Tag. 参数列表如下:
		parser - BeautifulSoup对象
		builder - TreeBuilder对象
		name - str格式, tag的名称
		namespace - str格式, 使用URI指定当前tag使用的命名空间. 如: "https://www.dataforthompson.top/comfortable"
		prefix - str格式, 用于XML的tag前缀, 避免名称冲突. 如: <h:table></h:table>中的h
		attrs - dict格式, 当前tag的属性key-value pair
		parent - PageElement对象, 当前tag的上一级PageElement
		previous - PageElement对象, 当前tag前一个PageElement
		is_xml - bool格式, 是否为XML tag, False为HTML tag
		sourceline - int格式, 文档中该tag所在行数
		sourcepos - int格式, 文档中在sourceline行的第sourcepos个字符处起始
		can_be_empty_element - bool格式, 为True时, 使用<tag/>表示; 为False时, 使用<tag></tag>表示
		cdata_list_attributes - list格式, 将tag中指定属性的值视为CDATA
		preserve_whitespace_tags - list格式, 保留指定tag中的空格

append(tag)
	添加PageElement到当前Tag内, 作为其最后一个子节点PageElement. 参数如下:
		tag - PageElement对象, 添加到当前Tag内

decode(indent_level=None, eventual_encoding='utf-8', formatter='minimal') -> str
	将当前Tag及其内部内容转化为str格式. 参数列表如下:
		indent_level - bool格式或int格式, bool是否使用tag的层级缩进; int代表在缩进的基础上, 每行额外缩进的空格数
		eventual_encoding - str格式, 指定最后内容的编码格式. 指定为None时, 使用Unicode编码(即str)
		
decompose()
	删除当前Tag及其内部内容. in-place操作

encode(encoding='utf-8', indent_level=None, formatter='minimal', errors='xmlcharrefreplace') -> bytes
	将当前Tag及其内部内容转化为bytes格式. 参数列表如下:
		encoding - str格式, 编码格式
		indent_level - bool格式或int格式, bool是否使用tag的层级缩进; int代表在缩进的基础上, 每行额外缩进的空格数

extend(tags)
	添加多个PageElement到当前Tag内, 作为其最后的下一级PageElement. 参数如下:
		tags - sequence of PageElement, append到当前Tag内的元素
	
find(name=None, attrs={}, recursive=True, text=None, **kwargs) -> PageElement
	在当前tag的下一级中查找第一个符合条件的PageElement. 参数列表如下:
		name - str格式, 指定tag名称
		attrs - dict格式, 指定属性key-value pairs
		recursive - bool格式, 是否递归到多个层级进行查找
		text - str格式, 指定NavigableString内容

find_all(name=None, attrs={}, recursive=True, text=None, limit=None, **kwargs) -> A ResultSet of PageElements
	在当前tag的下一级中查找所有符合条件的PageElement. 参数列表如下:
		name - str格式, 指定tag名称
		attrs - dict格式, 指定属性key-value pairs
		recursive - bool格式, 是否递归到多个层级进行查找
		text - str格式, 指定NavigableString内容
		limit - int格式, 查找到指定个结果时停止查找

find_all_next(name=None, attrs={}, text=None, limit=None, **kwargs)
	在当前tag之后的所有层级中查找所有符合条件的PageElement. 参数列表如下:
		name - str格式, 指定tag名称
		attrs - dict格式, 指定属性key-value pairs
		text - str格式, 指定NavigableString内容
		limit - int格式, 查找到指定个结果时停止查找
		
find_all_previous(name=None, attrs={}, text=None, limit=None, **kwargs)
	在当前tag之前的所有层级中查找所有符合条件的PageElement. 参数列表如下:
		name - str格式, 指定tag名称
		attrs - dict格式, 指定属性key-value pairs
		text - str格式, 指定NavigableString内容
		limit - int格式, 查找到指定个结果时停止查找
		
find_next(name=None, attrs={}, text=None, **kwargs)
	在当前tag之后的所有层级中查找第一个符合条件的PageElement. 参数列表如下:
		name - str格式, 指定tag名称
		attrs - dict格式, 指定属性key-value pairs
		text - str格式, 指定NavigableString内容

find_next_sibling(name=None, attrs={}, text=None, **kwargs)
	在当前tag之后的兄弟层级中查找第一个符合条件的PageElement. 参数列表如下:
		name - str格式, 指定tag名称
		attrs - dict格式, 指定属性key-value pairs
		text - str格式, 指定NavigableString内容

find_next_siblings(name=None, attrs={}, text=None, limit=None, **kwargs)
	在当前tag之后的兄弟层级中查找所有符合条件的PageElement. 参数列表如下:
		name - str格式, 指定tag名称
		attrs - dict格式, 指定属性key-value pairs
		text - str格式, 指定NavigableString内容
		limit - int格式, 查找到指定个结果时停止查找

find_parent(name=None, attrs={}, **kwargs)
	在当前tag的直系祖类中查找最近的第一个符合条件的PageElement. 参数列表如下:
		name - str格式, 指定tag名称
		attrs - dict格式, 指定属性key-value pairs
		
find_parents(name=None, attrs={}, limit=None, **kwargs)
	在当前tag的直系祖类中查找所有符合条件的PageElement. 参数列表如下:
		name - str格式, 指定tag名称
		attrs - dict格式, 指定属性key-value pairs
		limit - int格式, 查找到指定个结果时停止查找

find_previous(name=None, attrs={}, text=None, **kwargs)
	在当前tag之前的所有层级中查找第一个符合条件的PageElement. 参数列表如下:
		name - str格式, 指定tag名称
		attrs - dict格式, 指定属性key-value pairs
		text - str格式, 指定NavigableString内容
		
find_previous_sibling(name=None, attrs={}, text=None, **kwargs)
	在当前tag之前的兄弟节点中查找第一个符合条件的PageElement. 参数列表如下:
		name - str格式, 指定tag名称
		attrs - dict格式, 指定属性key-value pairs
		text - str格式, 指定NavigableString内容

find_previous_siblings(name=None, attrs={}, text=None, limit=None, **kwargs)
	在当前tag之前的兄弟节点中查找所有符合条件的PageElement. 参数列表如下:
		name - str格式, 指定tag名称
		attrs - dict格式, 指定属性key-value pairs
		text - str格式, 指定NavigableString内容
		limit - int格式, 查找到指定个结果时停止查找

get(key, default=None)
	返回当前Tag的key属性值. 参数列表如下:
		key - str格式, 属性key
		default - 任意格式, 当找不到key时返回该值

get_attribute_list(key, default=None)
	返回当前Tag的key属性值列表. 参数列表如下:
		key - str格式, 属性key

get_text(separator='', strip=False, types=(<class 'bs4.element.NavigableString'>, <class 'bs4.element.CData'>)) -> str
	获取当前Tag子孙节点中的字符串, 并将其组合为一个字符串. 参数列表如下:
		separator - str格式, 组合字符串的分隔符
		strip - bool格式, 组合前是否去掉多余空格
		types - tuple格式, 元素为NavigableString子类, 当原始类不在指定中时, 不考虑获取其内容

has_attr(key) -> bool
	是否有指定属性

index(element) -> int
	指定元素在当前Tag子类中的索引. 索引号由1起始. 参数如下:
		element - PageElement实例

insert(position, new_child)
	在当前Tag的子节点中的指定索引处插入PageElement. 参数列表如下:
		position - int格式, 插入位置的索引. 由0起始
		new_child - PageElement对象, 插入的PageElement内容

insert_after(*args)
	在当前Tag之后插入PageElement. 参数如下:
		args - PageElement对象或sequence of PageElement, 插入之后的PageElement

insert_before(*args)
	在当前Tag之前插入PageElement. 参数如下:
		args - PageElement对象或sequence of PageElement, 插入之后的PageElement

prettify(encoding=None, formatter='minimal') -> str/bytes
	以漂亮格式打印PageElement实例. 参数列表如下:
		encoding - str格式, 编码格式. 默认为Unicode



解析器优缺点
解析器           使用方法               优点                  缺点
HTML解析器       BeautifulSoup(markup,  1.Python内置标准库    Python 2.7.3或3.2.
                 "html.parser")         2.执行速度适中        2之前的版本容错能
                                        3.容错能力强          力差

lxml HTML解析器  BeautifulSoup(markup,  1.执行速度快          需要安装C语言库
                 "lxml")                2.容错能力强

lxml XML解析器   BeautifulSoup(markup,  1.执行速度快          需要安装C语言库
                 "xml")                 2.唯一支持xml的解析器

html5lib         BeautifulSoup(markup,  1.最好的容错性        执行速度慢
                 "html5lib")            2.以浏览器的方式解析
                                        3.生成HTML5格式的文档
                                        4.不依赖外部拓展

注意事项：
1.Tag查找规则 - 从当前往下查找, 第一个遇到的匹配Tag(与深度无关)
2.在所有解析器都已安装的前提, 默认解析器顺序：xml > html5lib > html.parser

引用
[1]Beautiful Soup Official：https://www.crummy.com/software/BeautifulSoup/bs4/doc/
