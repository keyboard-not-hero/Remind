1.+(正)  -(负)
+
  正数, 或将变量转化为int/float类型

-
  负数


2.+  -  *  /  %  **
+
  加法

-
  减法

*
  乘法

/
  除法
  结果为float类型, 除非除数与被除数都为int且可被整除, 结果为int类型

%
  求余
  在求余之前, 分子分母统一转化为int类型后, 再进行计算. float类型求余参考fmod()
  结果的符号与被除数一致. 即$a % $b的结果与$a符号一致

**
  求幂


3.=
=
  赋值符号, 将符号右边的值赋值给符号左边的变量


4.&  |  ^  ~  <<  >>
&
  二进制位与

|
  二进制位或

^
  二进制位异或

~
  二进制位求反

** 从二进制内容, 确定负数的值:
  1)符号位不变, 其他位求反
  2)将除符号位的内容值+1, 得到负数的绝对值
  3)最后添加符号位的符号

例(32 bit系统):
11111111111111111111111111111100

1)符号位不变, 其他位求反
10000000000000000000000000000011

2)将除符号位的内容+1, 得到负数的绝对值
10000000000000000000000000000100

3)获得最终值
-4

例:
<?php
$a = 10;
$b = ~$a;
echo $b;
?>

结果:
-11

二进制剖析:
00000000000000000000000000001010 ==> 10

11111111111111111111111111110101
10000000000000000000000000001010
10000000000000000000000000001011 ==> -11

<<
  将内容的二进制形式左移指定位数
  移动规则: 内容左移, 低位填充0

>>
  将内容的二进制形式右移指定位数
  移动规则:
  1)正数, 内容右移, 高位填充0
  2)负数, 内容右移, 高位填充1


5.==  ===  !=  <>  !==  <  >  <=  >=  <=>
==
  两个值是否相等. 不同类型的值, 转化后进行比较

===
  两个值是否相等, 并且类型一致

!=
<>
  两个值是否不相等. 不同类型的值, 转化后进行比较

!==
  两个值是否不相等, 或者类型不一致

<
  前值是否小于后续值

>
  前值是否大于后续值

<=
  前值是否小于等于后续值

>=
  前值是否大于等于后续值

<=>
  根据前值与后续值的大小关系, 分别返回1/0/-1. 关系对比如下:
      1  - $a > $b
      0  - $a = $b
      -1 - $a < $b

比较的自动转化:
operand_1        operand_2        result
null             string           string
array            array            array内逐个元素进行比较
null             anything         bool
bool             anything         bool
array            anything         array较大
int/float        string           string或int, 详情见下*

* 1)当string中只包含数字时, 转化为数字进行比较
  2)当string中包含其他字符时, 转化为字符串进行逐字符比较


6.``
``
  将内容传递给shell执行

例:
<?php
$output = `ls -l`;
echo "<pre>$output</pre>";
?>


7.++ --
++$a
  将$a的值+1, 然后返回结果

$a++
  返回$a的值, 然后将$a的值+1

--$a
  将$a的值-1, 然后返回结果

$a--
  返回$a的值, 然后将$a的值-1


8.!  &&  ||
!
  逻辑非

&&
  逻辑与

||
  逻辑或


9.字符串拼接符
.
  字符串拼接符

例:
<?php
$a = "love";
$b = "you";
$c = $a." ".$b;
echo $c;
?>

结果:
love you


10.+
+
  array联合符号
  当右侧array的key不在左侧array中时, append到左侧array

例:
<?php
$a = [1,3,5,7];
$b = [2,4,5,7,8];
$c = $a + $b;
print_r($c);
?>

结果:
Array ( [0] => 1 [1] => 3 [2] => 5 [3] => 7 [4] => 8 )


