1.+(正)  -(负)
+
  正数, 或将变量转化为int/float类型

-
  负数


2.+  -  *  /  %  **
+
  加法

-
  减法

*
  乘法

/
  除法
  结果为float类型, 除非除数与被除数都为int且可被整除, 结果为int类型

%
  求余
  在求余之前, 分子分母统一转化为int类型后, 再进行计算. float类型求余参考fmod()
  结果的符号与被除数一致. 即$a % $b的结果与$a符号一致

**
  求幂


3.=
=
  赋值符号, 将符号右边的值赋值给符号左边的变量


4.&  |  ^  ~  <<  >>
&
  二进制位与

|
  二进制位或

^
  二进制位异或

~
  二进制位求反

** 从二进制内容, 确定负数的值:
  1)符号位不变, 其他位求反
  2)将除符号位的内容值+1, 得到负数的绝对值
  3)最后添加符号位的符号

例(32 bit系统):
11111111111111111111111111111100

1)符号位不变, 其他位求反
10000000000000000000000000000011

2)将除符号位的内容+1, 得到负数的绝对值
10000000000000000000000000000100

3)获得最终值
-4

例:
<?php
$a = 10;
$b = ~$a;
echo $b;
?>

结果:
-11

二进制剖析:
00000000000000000000000000001010 ==> 10

11111111111111111111111111110101
10000000000000000000000000001010
10000000000000000000000000001011 ==> -11

<<
  将内容的二进制形式左移指定位数
  移动规则: 内容左移, 低位填充0

>>
  将内容的二进制形式右移指定位数
  移动规则:
  1)正数, 内容右移, 高位填充0
  2)负数, 内容右移, 高位填充1
