command执行进程
1.built-in command运行于当前bash进程下
2.非built-in指令(包括bash script)运行于子进程下



. filename
source filename - 在当前bash中读取和执行filename文件中的指令
注意事项：
1.filename不需要executable权限
2.sourcepath选项开启时(shopt指令), 才从PATH路径查找
3.文件查找顺序：PATH路径；当前路径



alias - 指令别称 

语法
alias [option] [name[=value]]

参数释义

	打印已指定别称列表

-p
	打印已指定别称列表

键值对
name
	打印该别称对应的指令

name=value
	给别称配置对应指令



bg - 将background suspend工作开始执行

语法
bg [jobspec]

参数释义
jobspec
	以%开头, 后面跟随整数, 用以指代job号码. 默认为当前工作(jobs序号中附带'+'标记)



break - 从循环(for/while/until/select)中彻底退出

语法
break [n]

参数释义
n
	代表从内而外的n层循环中退出. n>=1



continue - 从循环(for/while/until/select)中退出当前循环, 继续下一次循环

语法
break [n]

参数释义
n
	代表从内而外的n层循环中退出当前循环, 继续下一次循环. n>=1



declare - 对变量赋予类型
typeset - 同declare

语法
declare [option] [name[=value]]

参数释义
定义参数
-A
	指定为关联式数组(数组/字符串为索引, 类似于dict)

-a
	指定为索引式数组(数字为索引)

-F
	指定为函数名称

-f
	指定为函数

-g
	作用与函数中时, 创建全局变量

-i
	指定为整数类型

-l
	定义为小写字符, 赋予的所有大写字母自动转化为小写

-n
	变量作为其他变量的引用

-p
	显示变量的值
	当提供name时, 除了-f与-F, 其他参数被忽略
	不提供name时, 显示对应类型所有变量的值

-r
	定义为只读模式

-t
	定义name为trace属性, 适用于function继承DEBUG和RETURN traps

-u
	定义为大写字符, 赋予的所有小写字母自动转化为大写

-x
	将name设置为环境变量

**使用'+'代替'-'可关闭特性, 不适用于a/A/r
**当未提供name部分时, 为查看该类型变量列表



echo - 显示指定字符串, word之间使用' '分割, 尾部添加<newline>

语法
echo [option] [word1 word2 ...]

参数释义
-e
	解释带'\'的特殊字符含义(需支持shopt的xpg_echo option)

-E
	不解释带'\'的特殊字符含义, 直接去掉'\'字符

-n
	去除尾部<newline>

echo特殊字符列表：
\a
	警告声

\b
	回格键

\c
	后续字符不输出

\e
	

\E
	

\f
	下一行的当前列

\n
	换行符

\r
	回车(当前行行首, 并覆盖原字符)

\t
	水平制表符

\v
	下一行的当前列

\\
	反斜线

\0nnn
	8bit的八进制数

\xHH
	8bit的16进制数

\uHHHH
	2byte的unicode编码(ISO/IEC 10646)16进制数

\UHHHHHH
	4byte的unicode编码(ISO/IEC 10646)16进制数

**在实际测试中, 将word限定在""中即可实现特殊字符解释, 与-e参数与shopt的xpg_echo参数都无关



enable - 控制built-in指令开关

语法：
enable [option] [built-in]

参数释义

	使built-in可用

-a
	打印所有built-in列表(enable/disable)

-d
	删除built-in的上一个-f配置

-f filename
	指定built-in从filename路径读取

-n
	使built-in不可用

-p
	打印built-in enable列表, 配合-n打印disable列表

-s
	限制使用POISX built-in



eval - 将多个参数组合成一条command内容

语法
eval [arg1 ...]



exec - 使用子进程替换父进程(父进程销毁, 子进程拥有父进程PID), 并在执行指令后退出新进程

语法
exec [option] [command [argument]]

参数释义

**当command未提供时, exec用于重导向, 并且不创建子进程, 以后该bash所有指令结果皆使用该重导向, 所有指令结果视为一个stream(即>file操作不会被当前bash后续指令结果覆盖)
例1：
steven@www:~/demo$ bash
steven@www:~/demo$ exec > exec.file
steven@www:~/demo$ date
steven@www:~/demo$ echo this is second line
steven@www:~/demo$ exit
steven@www:~/demo$ cat exec.file
Thu Dec 19 18:24:00 CST  2019
this is second line

例2:
steven@www:~/demo$ exec 4< in_rederc.txt
steven@www:~/demo$ cat <&4
**文件每次打开都是重新读取, 但是fd号码作为一个流, 每次读取都会产生损耗



exit - 退出当前进程

语法
exit [n]

参数释义
n
	代表退出的status code, 未指定则为上一次执行command结果status code, 可通过$?查看



export - 配置/取消变量为全局变量

语法
export [option] [name[=value]]

参数释义

	配置变量为全局变量

-f
	用于指代function

-p
	打印所有全局变量

-n
	取消变量的全局性, 使其只在当前bash有效



fg - 将job在foreground恢复运行

语法
fg [jobspec]

参数释义
jobspec
	以%开头, 后面跟随整数, 用以指代job号码. 默认为当前工作(jobs序号中附带'+'标记)



hash - 控制指令路径缓存信息表

语法
hash [option] [name]

参数释义

	显示所有已缓存信息

-d
	删除指定name的缓存

-l
	以可重用格式打印所有缓存信息, 即与-p配置格式一致

-p filename
	配置指令查找位置

-r
	清空所有指令路径缓存

-t
	显示指定name的缓存



history - 历史命令

语法：
history [option] [filename]

参数释义：

	罗列已记录的历史命令, 使用号码进行标记. 当HISTTIMEFORMAT变量存在, 则历史命令保存时间予以记录. 条数限制于HISTSIZE

n
	罗列最后n条历史命令

-a
	将当前历史命令列表append到历史命令文件中. 默认为退出bash时保存

-c
	清除历史命令记录

-d <offset>
	删除具体号码对应的历史命令记录

-r
	读取历史命令文件内容, 将其写入到当前历史命令列表

-w
	将当前历史命令列表覆盖写入到历史命令文件中

-s arg...
	将arg作为保存到历史命令列表    

**filename为历史命令文件名, 默认为~/.bash_history

history-快捷键
ctrl+p
	上一条history指令
ctrl+n
	下一条history指令
esc+<
	第一条history指令(已保存最旧)
esc+>
	最新history指令. 通常为最新输入未记录指令
ctrl+r
	进入指令提示, 输入指令, 从新到旧匹配与输入相关指令. 下一次补全指令必定旧于上一次补全(number更小), 使用history指令可重置
ctrl+s
	进入指令提示, 输入指令, 从旧到新匹配与输入指令相关(需要使用trap关闭ctrl+s的锁定bash功能)

history-相关事件
!<number>
	利用历史命令对应number来执行指令 
!-<number>
	当前指令(未保存)-number, 引用该结果号码对应的历史指令
!!
	执行上一个历史指令, 类似于'!-1'
!<str>
	最新以str开头的历史指令并引用
!?<str>[?]
	最新含str的历史指令并引用
^str1^str2^
	取出上一条历史指令, 并将该指令str1内容替换成str2内容, 然后执行替换后指令内容. 类似于'!!:s/str1/str2/'

history-事件_单词指示
:0
	第0个单词, 即shell上的command
:<n>
	第n个单词, 为非0时即command的参数
:^
	第2个单词, 即第一个参数
:$
	最后一个单词, 也是最后一个参数. 当shell只有一个单词时, 即command
:%
	最近使用!<str>匹配到的str部分, 并将其作为command. 该操作忽略事件
:x-y
	单词范围. -y为0-y的缩略
:*
	类似于1-$. 当指令不含参数时, 返回""
:x*
	类似于x-$
:x-
	类似于x-$, 但忽略最后一个单词, 即x-($-1). 

history-事件_调节器
:h
	删除最后一个/及后面的内容, 保留目录路径(类似于dirname结果)
:t
	删除最后一个/及前面的内容, 保留文件名称(类似于basename结果)
:r
	删除行内后缀(.及其后内容)
:e
	删除指令内容, 除行内后缀(.及其后内容)
:p
	只打印指令, 不执行该指令
:q
	将结果限定在''中
:x
	将结果使用blank进行单词分割, 然后将单词使用''限定
:s/old/new/
	匹配第一个old字符串, 并使用new字符串替换. 当new中包含'&'字符时, 指代old字符串内容
:&
	重复上一个s/old/new/操作, 当上一个s操作与g/G搭配使用时, 只提取s操作
:g
	配合s/old/new/(gs/old/new)使用, 将替换作用于所有匹配old字符串
:G
	配合s/old/new/(Gs/old/new)使用, 将替换作用于事件中的每一个单词, 一个单词最多替换一次. 并且, old不能位于单词开头
**可叠加使用, 每个叠加需前置:符号



jobs - 对bg/fg的程序进行查看

语法
jobs [option] [jobspec]

参数释义
-l
	罗列job信息, 其中包括PID

-n
	在上次查看后, 经过状态变化的job

-p
	只罗列job的PID

-r
	只罗列running状态的job

-s
	只罗列stopped状态的job

-x command [arg...]   将command或arg中的jobspec替换成PID, 并执行command



let - 数学运算指令

语法
let arg [arg...]

参数释义
arg
	数学运算表达式. 当最后一个运算为0时, 返回1；否则返回0



printf - 指定格式打印内容

语法
printf [-v var] format [arg...]

参数释义

	将格式化字符串打印到stdout

-v
	将格式化字符串赋予变量var, 替代打印到stdout



pwd - 打印当前工作目录的绝对路径

语法
pwd [option]

参数释义
-L
	打印当前工作目录, 可包含symbolic link(默认)

-P
	打印当前工作目录, 不包含symbolic link



read - 从输入行读取内容, 并将内容分割赋予多个变量

语法：
read [OPTION] [VAR...]

参数释义：
-a <arr_name>
	以单词分隔符(空格)分割单词, 并将每个单词赋予指定数组
	数组索引由0起始

-d <delim>
	使用delim的第一个字符中断输入行
	默认为换行符

-n <n_chars>
	指定读取多少个字符后停止
	当-d指定截止字符时, 截取的字符数量小于该值, 则遵守-d规则

-N <n_chars>
	指定读取多少个字符后停止
	-d选项的字符不视为特殊符号

-p <prompt>
	显示提示字符串prompt, 并且尾部不含换行符

-r
	将'\'视为普通打印字符, 而不是跳脱字符

-s
	silent模式, 输入内容不显示

-t <timeout>
	等待输入超时时间

-u <fd>
	使用fd文件描述符来注明输入方式. 如: 0对应stdin, 也可使用exec 3< <file>来重定向

** 当未特殊说明, 输入被IFS变量内容分割为单词
** 当单词少于变量, 多余变量赋值""; 当单词多余变量, 剩余单词全部赋予最后一个变量
** 当未提供VAR时, 将值赋予变量REPLY



readonly - 修改变量权限为只读

语法
readonly [option] [name[=value]...]

参数释义
-a
	作用于索引数组

-A
	作用于关联数组. 类似于python的dict

-f
	作用于function

-p
	打印只读变量列表



return - function返回给调用者的status code

语法
return [n]

参数释义
n
	指定function返回给调用者的stat code. 默认为$?, 即方法内最后执行的结果stat code



set - 配置bash各选项

语法
set [option] [arg...]

参数释义
-a
	当前的所有变量和方法修改为全局变量

-b
	background job被结束后马上打印状态

-e
	当返回status code不为0时, 退出当前bash

-f
	关闭pathname expansion(文件名无法使用通配符进行匹配)

-h
	使用hash表进行指令路径缓存

-k
	所有出现在参数位置的赋值语句都作用于bash环境, 而不只是默认的command前赋值语句

-m
	监视模式. 当后台running job完成, 立即打印该job信息

-n
	读取command但不执行. 用于script语法检查, 在交互式shell中无效

-o [opt_name]
	指定详细的名称来指定option. 当没有指定opt_name时, 打印opt_name列表和相应启动状态
  opt_name列表：
  allexport - 同-a
  
  braceexpand - 同-B

  emacs - emacs风格的指令接口, 为交互式shell默认选项. bash --noediting可解除该默认选项

  errexit - 同-e

  errtrace - 同-E

  functrace - 同-T
 
  hashall - 同-h

  histexpand - 同-H

  history - 启动history记录. 交互式shell默认选项

  ignoreeof - 类似于IGNOREEOF=10, 参考变量IGNOREEOF

  keyword - 同-k

  monitor - 同-m

  noclobber - 同-C

  nonexec - 同-n

  noglob - 同-f

  notify - 同-b

  nounset - 同-u

  onecmd - 同-t

  physical - 同-P

  pipefail - 在所有pipeline指令中, 当所有指令成功时, 则返回0；否则返回最后一个指令的非0状态码

  posix - posix兼容模式

  privileged - 同-p

  verbose - 同-v

  vi - 使用vi风格指令接口

  xtrace - 同-x

-p
	打开privileged模式. 不读取$ENV和$BASH_ENV内容, 不从环境读取function；当启动bash的有效user(group)与真实user(group)不相同时, 不作处理

-t
	执行command后退出bash

-u
	当使用$N引用指令行参数时, 如果该参数未指定, 则打印错误信息

-v
	打印bash读取的内容

-x
	打印出每一条指令的完整展开内容, 格式为$PS4 <expand_exp>. 用于for/case/$(())等内容展开详情；适用于调试脚本

-B
	bash执行{}拓展. 如:{alice,peter,david}包含三个名称

-C
	不允许文件内容被覆盖

-H
	打开历史命令的!格式替换

-P
	当cd切换到symbolic link目录时, 使用physical目录

--
	代表option字段的结束, 开始position parameter字段(使用$N引用)

-
	代表option字段的结束, 开始position parameter

** 使用'+'代替'-'可关闭set各选项



shift - 平行移动命令行参数内容

语法
shift [n]

参数释义
n
	将$1 $2 ...向做平移n位, 最左边n位被移除, 剩余后续$#-n位. 当n<0或n>$#时, shift操作无效



shopt - 修改bash选项

语法
shopt [option] [optname...]

参数释义(option)
-o
	限制optname为可通过set -o获取的值

-p
	打印bash选项已配置列表

-q
	quiet模式, 不打印一般信息

-s
	enable(set)相关选项

-u
	disable(unset)相关选项

** 当提供多个optname时, 所有操作生效才返回status code=0

选项名称列表(optname)
autocd - 当command为一个目录时, 自动将其作为cd指令的参数目录

cdable_vars - 当cd指令的参数不是一个目录时, 将其视为包含目录值的变量

cdspell - 针对cd指令的参数修正, 当与匹配目录含一个字符差异时, 显示正确目录并切换

checkhash - 在执行path搜寻前, 先匹配hash表内容

checkwinsize - 在执行command后, 检查窗口大小, 并调节LINES和COLUMNS值

cmdhist - 将占有多行的同一个指令保存为一条历史记录

compat31 - bash 3.1兼容版本

compat32 - 类似于compat31

compat40 - 类似于compat31

compat41 - 类似于compat31

compat42 - 类似于compat31

compat43 - 类似于compat31

dotglob - 在文件名pathname expansion(通配符)匹配中, 包含以'.'开头的文件

expand_aliases - 开启alias展开功能

extglob - 启动拓展pathname expansion功能

extquote - $'string'和$"string"视为${string}

failglob - 当pathname expansion失败时, 返回expansion err错误

globstar - 在pathname expansion中, '**'匹配所有文件、目录、递归子目录

gnu_errfmt - err信息全部为GNU标准err信息格式

histappend - 当退出bash时, 将history列表的内容append到HISTFILE定义的文件, 而非覆盖

histreedit - 当使用readline时, 可获得机会重写失败的hitory替换

hostcomplete - 当使用readline时, 在@后面可自动补足主机名

huponexit - 当login bash退出时, 向所有job发送SIGHUP信号

interactive_comments - 在bash中, #后续的字符视为注释

lithist - 当cmdhist开启, 在history记录中, 使用内嵌<newline>代替';'

login_shell - 当shell为login shell时, 该选项自动配置. 不可手动修改

mailwarn - 当bash检查的mail文件已经被访问过, 出现提示

no_empty_cmd_completion - 当使用readline时, 如果bash试图在空指令行上补全指令, 不会搜索PATH

nocaseglob - 使用pathname expansion时, 不在乎大小写

nullglob - 当pathname expansion匹配不到任何文件时, 将内容置换为空字符串进行匹配

progcomp - 开启programmable completion

promptvars - prompt可经过parameter expansion/command substitution/arithmetic expansion

shift_verbose - 使用shift时, 当n>$#, 显示警告信息

sourpath - 使用source(.)时, 使用PATH变量内容查找文件所在

** glob代表使用通配符进行匹配



trap - 配置signal及对应指令操作

语法
trap [option] [[arg] sigspec...]

参数释义
-p
	打印sigspec及对应的command列表

-l
	打印signum和对应sigspec列表

** arg代表对应sigspec的comand执行操作
** 当arg未提供或者为'-', 则恢复该sigspec默认操作
** 当arg为"", 则忽略sigspec对应的操作



type - 判断文件类型

语法
type [option] <name>...

参数释义
-a
	
	打印所有包含可执行的name位置

-f
	打印name可执行位置, 并且不查询function类型. 只显示第一个匹配项

-p
	只有当-t为file时, 返回文件

-P
	类似于-p, 但不论类型强制搜索PATH路径

-t	
	打印name的类型, 只显示第一个匹配项. 类型列表如下:

		alias - alias简称

		keyword - shell保留字

		function - 方法function

		builtin - built-in指令

		file - 普通文件(根据PATH搜索指令)



ulimit - 限制文件系统可获得文件大小

语法
ulimit [option] [limit]

参数释义
-H
	对文件进行硬性大小限制, 不可超过

-S
	对文件进行软性大小限制, 可超过, 超过后提示

-a
	显示当前空间限制详情

-b
	socket buffer容量大小

-c
	限制核心文件大小

-d
	限制数据帧大小

-e
	限制调度优先级(nice)

-f
	限制当前shell和子shell创建的文件大小

-l
	限制可锁定的内存容量

-n
	限制可同时开启的文件数量

-t
	限制CPU使用时间

-u
	限制单个用户可创建的进程数

-T
	限制创建的thread数量

**当limit未提供时, 打印对应类型的限制容量



umask - 文件创建的初始mask

语法
umask [option] [mode]

参数释义
-p
	显示mask, 可重用的数字格式mask

-S
	显示初始权限, u/g/o结合权限位rwx标注的mask

**mode可使用数字mask格式和字母初始权限格式



unalias - 移除alias配置

语法
unalias [-a] [name...]

参数释义
-a
	移除所有alias设定



unset - 在当前环境中移除变量/方法

语法
unset [option] [name...]

参数释义

	移除变量或function

-f
	移除function

-n
	移除nameref变量, 被引用的变量无变化

-v
	移除变量. 用于nameref时, 当前变量和被引用的变量同时被移除

**readonly类型变量无法移除



wait - 等待其他进程执行

语法
wait [-n] [PID|jobspec]

参数释义
-n
	等待所有正在执行的进程完毕
