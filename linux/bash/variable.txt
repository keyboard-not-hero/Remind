bash设定档:
全局配置: /etc/bashrc
用户级配置: $HOME/.bashrc



在bash script中, #之后的内容为注释内容



示例 - 确认bash script是否在子bash中执行
[steven@localhost bash]$ cat demo_01.sh
#!/bin/bash

echo "The subshell PID: $$"
[steven@localhost bash]$ echo $$
2695
[steven@localhost bash]$ ./demo_01.sh
The subshell PID: 4581



重定向符号：
[n]< file
    从指定文件读取内容, 建立为/dev/fd/<n>为描述符
    默认描述符为0, 即stdin

[n]> file
    将结果内容输出到指定文件
    文件不存在时, 进行创建; 文件存在时, 将结果overwrite到文件
    默认描述符为1, 即stdout

[n]>> file
    将结果内容输出到指定文件
    文件不存在时, 进行创建; 文件存在时, 将结果append到文件
    默认描述符为1, 即stdout

&> file
>& file
>file 2>&1
    将stdout和stderr内容输出到指定文件
    文件不存在时, 进行创建; 文件存在时, 将结果overwrite到文件

&>> file
>> file 2>&1
    将stdout和stderr内容输出到指定文件
    文件不存在时, 进行创建; 文件存在时, 将结果append到文件




<< delimiter
    从shell读取键盘输入, 作为指令input内容, 并在末行单独使用delimiter标记结束输入

<<< string
    将string字符串作为stdin读入

<&N
    将文件fd(N)的内容重导向到stdin. 可结合exec builtin指令使用

>&N
    将stdout的内容重导向文件fd(N)

<&N-
    将文件fd(N)的内容移动到stdin


文件描述符列表：
/dev/fd/<file_description>    
    文件描述符

/dev/stdin
    标准输入
    对应/dev/fd/0

/dev/stdout
    标准输出
    对应/dev/fd/1

/dev/stderr
    错误输出
    对应/dev/fd/2

/dev/udp/<host>/<port>
    host为主机名或IP, port为端口号或service名称, 合并称为udp socket

/dev/tcp/<host>/<port>
    host为主机名或IP, port为端口号或service名称, 合并为称为tcp socket



管道(pipeline):
<command1> | <command2>    
	将command1的stdout作为command2的stdin, command1的stderr不改变

<command1> |& <command2>    
	将command1的stderr输出到stdout, command1的stdout作为command2的stdin. 等价于<command1> 2>&1 | <command2>
	类似于<command1> 2>&1 | <command2>

示例1 - 验证|&与2>&1 |的等同关系
[steven@localhost bash]$ sudo find / -name nginx.conf | awk 'BEGIN{FS=":"};{print $2}'
find: ‘/run/user/1000/gvfs’: Permission denied

[steven@localhost bash]$ sudo find / -name nginx.conf 2>&1 | awk 'BEGIN{FS=":"};{print $2}'
 ‘/run/user/1000/gvfs’

[steven@localhost bash]$ sudo find / -name nginx.conf |& awk 'BEGIN{FS=":"};{print $2}'
 ‘/run/user/1000/gvfs’



指令列表：
<command1> ; <command2>    
	执行command1完毕后, 再执行command2. 最终status code为最后一个command返回结果

<command> &    
	将command放到background执行, 并且所处shell为当前bash子进程

<command1> && <command2>    
	短路与, 只有当command1返回status code为0时, 执行command2. 最后返回status code为最后一个执行的command结果

<command1> || <command2>    
	短路或, 只有当command1返回status code为非0时, 执行command2. 最后返回status code为最后一个执行command结果

示例1 - 按顺序指令命令
[steven@localhost bash]$ echo $?;echo $$
0
2695

示例2 - 验证background执行是否开启subshell
[steven@localhost bash]$ echo $$ &
[1] 4824
2695



限定符号：
\
    跳脱字符, 使后续单个字符在特殊字符和普通字符之间转换 

''
    保护所有字符, 使之为普通打印字符
    内部不可包含', 即使被前置\限定也不可以

""
    保护大部分字符. 不保护字符列表:
        $ - 变量引用
	` - 命令执行组合符号, `<cmd>`
	\ - 跳脱符号, 只跳脱以下符号: $ ` " \ <newline>
	! - 只有history expansion开启时, 后续命令结果传递给bash



配置变量(未配置变量, 初始使用默认为"")
<var_name>=<var_value>
read VAR
VAR=`<command>`
VAR=$(<command>)

引用变量值
echo $<var_name>
echo ${<var_name>}

引用数组变量(索引由0起始)
echo ${arr[index]}

变量值拓展
<var_name>=${<var_name>}:/usr/local/bin

转化为全局变量(可用于子bash)
export <var_name>

转化为只读变量
readonly <var_name>

取消变量
unset <var_name>

查看只读变量
readonly

查看全局变量
export

查看环境变量
env

查看变量
set

** 变量名称有空格时, 可使用""或''来限定, 但""保留特殊字符含义, ''内一切皆普通字符



常用内置变量:
#    
    参数个数

0
    bash或bash script名称

<N>
    对应的参数. 参数以IFS变量(默认为<space>)作为分隔符
    shift [number] - 将参数引用向右偏移number位. number参数省略时, 默认为1. 多次shift操作会进行叠加

@    
    所有参数的字符串序列"$1" "$2" "$3" ...

*    
    所有参数组合的字符串"$1 $2 $3 ..."; 默认以空白键分隔参数

?
    最近一次指令返回status code

-
    set启用的参数

$
    当前bash shell的PID

!   
    当前bash最近启动的background process的PID

BASH    
    bash二进制程序的完整路径

BASHOPTS
    启动的BASH特性列表, 使用':'作为分隔符

IFS
    将其内容中的每一个字符视为field分隔符. 默认为[ \t\n]






HISTFILE    历史指令保存位置. 默认为~/.bash_history

HISTFILESIZE    历史指令保存文件容纳指令条数. 当指令超出时, 按队列形式进行先入先出. 该选项为0时, 不保存历史指令. 默认值参考HISTSIZE

HISTSIZE    历史指令保存条数. 为0时不保存；小于0时保存所有指令. 默认为500

HISTTIMEFORMAT    历史命令保存时间戳. 如:"%T %F "；详细格式参考strftime(3)

HOME    用户的家目录, ~就是参考该变量

HOSTFILE    类似于/etc/hosts内容格式, 读取主机名和IP映射. 当HOSTFILE为""或者指定文件不可读时, 使用/etc/hosts


LANG    语言编码

LC_ALL    配置bash所有相关语言(参考locale指令)

LINENO    当前行号

MAIL    用户邮件存放位置(/var/spool/mail/<user>)

OLDPWD    上一个工作目录, -参考该变量值

PATH    指令查找路径(使用':'分隔路径, '.'或者''都代表当前目录)
** sudo的PATH由/etc/sudoers的secure_path确定, 修改方法:
**     sudo EDITOR=vim visudo

POSIXLY_CORRECT    shell是否处于posix兼容模式. 当该值为'y'时, 代表处于posix模式(set -o posix)

PPID    当前进程的父进程ID

PROMPT_COMMAND    在PS提示前执行的指令. 如：PROMPT_COMMAND="ls", 每次PS1提示前, 显示ls指令结果

PS1    指令行首行提示

PS2    指令行次要行提示

PS3    作为select选单提示

PS4    用于set -x的展开调试

PWD    当前工作目录

RANDOM    产生0~32767之间的随机数

REPLY    当指令read没有指定变量时, 默认赋值给该变量

SECONDS    bash启动后经历的时间(command line)或脚本运行时间(.sh). 赋值为0后, 从0开始从新计时

SHELL    用户使用的shell

UID    当前登录用户ID


PS1:主要指令行提示
语法：
\a    
	ASCII 007, 响铃

\d    
	日期, 格式"weekday month day"

\D{format}    
	日期, 将format传给strftime(3)进行转化. 当format未指定时, 打印'\D'
    format格式：
    %a    weekday缩写
    %A    weekday全称
    %b    month缩写
    %B    month全称
    %c    默认日期和时间格式
    %C    世纪格式(year/100)
    %d    day of month
    %D    日期, %m/%d/%y格式
    %e    day of month, 前置0替换为空格
    %F    日期, %Y-%m-%d格式
    %g    年, 除去世纪部分(2019的19)
    %G    年
    %h    month缩写
    %H    24小时制的hour
    %I    12小时制的hour
    %j    day of year
    %k    24小时制的hour, 单字符前置一个空格
    %l    12小时制的hour, 单字符前置一个空格
    %m    月份数
    %M    分钟数
    %n    换行符
    %p    AM/PM
    %P    am/pm
    %r    12小时制时间, %I:%M:%S %p
    %R    24小时制时间, %H:%M
    %s    Unix时间戳秒数
    %S    秒数
    %t    制表符
    %T    24小时制时间, %H:%M:%S
    %u    day of week, 范围1~7, 周一为1
    %U    week of year, 以周日为周起始
    %V    week of year, 至少当周有四天的为第一周
    %w    day of week, 范围0~6, 周日为0
    %W    week of year, 以周一为周起始
    %x    日期, 格式%m/%d/%Y
    %X    时间, 格式%H:%M:%S %p
    %y    年, 除去世纪部分(2019的19)
    %Y    年
    %z    +hhmm或-hhmm时区
    %Z    时区名称缩写
    %+    date格式日期和时间(glic2不支持)
    %%    %字符

\e    
	ASCII 033, 跳脱字符

\h    
	主机名, 遇到.截止

\H    
	主机名

\j    
	当前shell管理的jobs数量

\l    
	终端号码(由0起始)

\n    
	换行

\r    
	回车

\s    
	shell名称

\t    
	当前时间, 24小时时间制, HH:MM:SS格式

\T    
	当前时间, 12小时时间制, HH:MM:SS格式

\@    
	当前时间, 12小时时间制, HH:MM am/pm格式

\A    
	当前时间, 24小时时间制, HH:MM格式

\u    
	用户名

\v    
	bash版本

\V   
	bash详细版本(version+release)

\w    
	当前工作目录

\W    
	当前工作目录的basename

\!    
	历史记录保存数量

\#    
	下一条指令为当前终端的第N条指令

\$    
	当UID为0时, 提示符为"#"；其他UID为"$"

\nnn    
	对应的ASCII字符(八进制)

\\    
	反斜杠(\)

\[    
	开始非打印字符序列

\]    
	结束非打印字符序列

\e
\033
    设置终端字体属性. 格式: \033[<num>m或\e[<num>m
    可同时指定多个num, 多个num使用';'分隔. 如: num1;num2;num3...
    num列表如下[1]:
        0 - 普通模式
        1 - 加粗
        2 - 字体颜色变淡
        3 - 斜体
        4 - 下划线
        5 - 慢闪烁
        6 - 快闪烁, 少有支持
        7 - 交换字体和背景颜色
        8 - 隐藏字体
        9 - 删除线
        10 - 默认字体
        20 - 花体字(罕见支持)
        21 - 双下划线
        30~37 - 依次为black/red/green/yellow/blue/magenta/cyan/white颜色字体
        40~47 - 依次为black/red/green/yellow/blue/magenta/cyan/white颜色背景
        53 - 上划线
        90~97 -
依次为更明亮的black/red/green/yellow/blue/magenta/cyan/white颜色字体
        100~107 -
依次为更明亮的black/red/green/yellow/blue/magenta/cyan/white颜色背景

例：\[\033[01;34m\]代表后续字符为亮蓝色
例：
export PS1='\[\033[01;32m\]\u@\h:\[\033[01;34m\]\W\[\033[00m\]\$ '

参考:bash(1)手册PROMPTING部分



运算符(优先级降序)：
1.++,--    自增, 自减

2.-,+    一元正负号

3.!,~    逻辑或位求反

4.**    求幂

5.*,/,%    乘, 除, 求余

6.+.-    二元加减

7.<<,>>    向左位移, 向右位移

8.<=,>=,<,>    比较运算符

9.==,!=    相等, 不等

10.&    位与

11.^    位异或

12.|    位或

13.&&    逻辑与(短路与)

14.||    逻辑或(短路或)

15.condition?true_exp:false_exp    条件操作符

16.=    赋值运算符

17.exp1,exp2    逗号运算符



数组
数组类型:
1.索引数组
1)使用数字进行引用
2)引用数字不必连续
3)索引数字为非负, 由0开始

2.关联数组
1)使用任意字符串进行引用


创建方法:
1.declare声明
1)索引数组
declare -a <arr_name>
2)关联数组
declare -A <arr_name>

2.元素赋值(可不声明直接赋值):
1)索引数组
1]指定索引赋值
arr[num]=value
2]多个索引赋值
arr=(val1 val2 ...)

2)关联数组
1]指定键值赋值
arr[key]=value

3.元素引用格式：
${name[index]}
    返回引用元素的值. 特殊情况如下:
        1.当index为'*'时, 代表一个由全部元素组成的字符串. 如: "val1 val2 ..."
	2.当index为'@'时, 代表每个元素字符串的拼接. 如: "val1" "val2" ...
	3.${#name[index]}代表元素值的length; 当index为'*'或'@'时, 为数组length
	4.索引为非负数, 代表从索引0计数; 索引为负数, 代表从最后一个索引反向计数. 如: arr[-1]代表最后一个元素
	5.当不指定index时, 默认index为0
	6.${!name[*]}或${!name[@]}为获取索引列表
        7.删除数组元素 - unset name[index]
	8.删除整个数组 - unset name



展开式类型
1.brace expansion
依次使用括号内的内容, 每次取用括号内的内容时, 将括号之前的内容prepend, 括号之后的内容append, 组成一个完整字符串
括号内的内容格式:
1){<val_1>,<val_2>,...}
    依次指定各项取用值
2){<start>..<end>[..<step>]}
    指定取用值的范围[start,end], step默认为1或-1

示例 - brace expansion的应用
[steven@localhost ~]$ echo a{b,c,d}e
abe ace ade


2.tidle expansion
~[<username>]
    指定用户的家目录
    默认为当前用户家目录, 即变量HOME的值

~+
    当前所在目录, 即变量PWD的值

~-
    当前目录的上一个所在目录, 即变量OLDPWD的值


3.parameter expansion
$<variable>
${<variable>}
    将变量名展开为该变量对应的值
    当变量中包含位置参数或非单词字符时, 必须使用'{}'限定

${<variable>:-<content>}
    如果variable已经被赋值为非null, 则展开variable的值; 如果variable没有被定义(或赋值为null), 则返回content

${<variable>:=<content>}
    如果variable已经被赋值为非null, 则展开variable的值; 如果variable没有被定义(或赋值为null), 则将content赋值给variable, 再展开variable的值

${<variable>:?<content>}
    如果variable已经被赋值为非null, 则展开variable的值; 如果variable没有被定义(或赋值为null), 则将content输出到stderr

${<variable>:+<content>}
    如果variable已经被赋值为非null, 则展开为content; 如果variable没有被定义(或赋值为null), 无操作

${<variable>:<offset>}
${<variable>:<offset>:<length>}
    从variable的偏移量开始, 截取指定长度length的字符串
    如果offset为正数, 代表从variable的头部开始偏移; offset为负数(负号前面留一个空格, 避免与:-混淆), 代表从variable的尾部开始偏移
    如果length为正数, 代表截取的长度; 如果length为负数, 代表从variable尾部开始计算, 向前偏移指定个字符处截止
    如果length没有指定时，截取到variable尾部

${!<prefix>*}
${!<prefix>@}
    显示所有以prefix开头的变量名

${!name[@]}
${!name[*]}
    显示数组的索引列表

${#variable}
    显示内容的长度

${variable#wildcard}
${variable##wildcard}
    将variable的值, 根据wildcard进行通配符匹配, 必须从variable的起始字符匹配. 将variable截取匹配字符串后, 得到结果
    #为最短匹配
    ##为最长匹配

${variable%wildcard}
${variable%%wildcard}
    将variable的值, 根据wildcard进行通配符匹配, 必须从variable的结束字符匹配. 将variable截取匹配字符串后, 得到结果
    %为最短匹配
    %%为最长匹配

${variable/wildcard/string}
${variable//wildcard/string}
${variable/#wildcard/string}
${variable/%wildcard/string}
    将variable中匹配wildcard的部分替换为string
    /替换第一个匹配项
    //替换所有匹配项
    /#只替换与variable头部完全匹配
    /%只替换与variable尾部完全匹配

${variable^wildcard}
${variable^^wildcard}
${variable,wildcard}
${variable,,wildcard}
    如果variable中的字符与wildcard中的字符匹配, 则进行大小写转换. wildcard使用[]匹配多个字符
    ^代表如果首字符与wildcard中的字符匹配, 则转化为大写
    ^^代表如果所有字符与wildcard中的字符匹配, 则转化为大写
    ,代表如果首字符与wildcard中的字符匹配, 则转化为小写
    ,,代表如果所有字符与wildcard中的字符匹配, 则转化为小写

${parameter@operator}


3.command substitution
`command` 
$(command)
    在命令中, 首先将该部分替换为执行该命令后的结果
    在``中, 将$ ' \视为特殊符号
    在$()中, 所有字符都为literal


4.arithmetic expansion
$((<expression>))
    将expression作为逻辑运算, 返回运算结果


5.word splitting
使用IFS中的任意一个字符作为分隔符


6.filename expansion
使用通配符匹配文件名
*
    任意0到多个字符

?
    任意1个字符

[]
    多个字符集合中, 匹配任意一个字符
