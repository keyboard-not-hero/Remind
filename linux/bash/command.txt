command执行进程
1.built-in command运行于当前bash进程下
2.非built-in指令(包括bash script)运行于子进程下



. filename
    在当前bash中读取和执行filename文件中的指令
    注意事项:
	1.filename不需要executable权限
	2.文件查找顺序: 1)PATH路径; 2)当前路径



alias - 指令别称 

语法
alias [option] [name[=value]]

参数释义
-p
    打印已指定别称列表

键值对
name
    打印该别称对应的指令

value
    给别称配置对应指令



cd - 改变shell工作目录

语法
cd [option] [dir]

option参数
-L
    使用符号链接
    默认选项

-P
    使用符号链接指向的真实目录

-e
    跟随-P之后使用, 如果无法确定当前工作目录, 返回非零返回值

-@
    在支持拓展属性的系统上, 将一个有这些属性的文件当作有文件属性的目录

dir参数
    指定切换的目录. 类型如下:
	.     当前目录
	..    当前目录的父目录
	~     用户的家目录. 默认值
	-     跳转到当前目录，之前的目录



declare - 定义变量, 并且赋值

语法
declare [-aAfFgiIlnrtux] [-p] [name[=value] ...]

参数列表
-a
    定义索引数组

-A
    定义联结数组

-f
    定义function
    配合-p使用时, 只显示function列表

-F
    只显示function列表, 并且显示function名称, 但不显示定义
    配合-p使用

-g
    变量定义为全局变量

-i
    定义数字变量

-I
    局部变量继承同名变量的属性和值

-l
    当给变量赋值时, 所有大写字符转化为小写

-n
    配置引用, 引用指定变量名

-p
    以定义的形式显示变量列表

-r
    变量为只读

-u
    当给变量赋值时, 所有小写字符转化为大写

-x
    将变量导出, 可在子进程使用



echo - 显示指定字符串, word之间使用' '分割, 尾部添加<newline>

语法
echo [option] [word1 word2 ...]

参数列表
-e
    \视为特殊含义字符(需支持shopt的xpg_echo option)

-E
    \不视为特殊含义字符

-n
    去除尾部<newline>

echo特殊字符列表：
\a
    警示声

\b
    回格键

\c
    后续字符不输出

\e
\E
    跳脱字符

\f
    下一行的当前列

\n
    换行符

\r
    回车(当前行行首, 并覆盖原字符)

\t
    水平制表符

\v
    下一行的当前列

\\
    反斜线

\0nnn
    8bit ASCII编码的8进制数

\xHH
    8bit ASCII编码的16进制数

\uHHHH
    2byte unicode编码的16进制数

\UHHHHHH
    4byte unicode编码16进制数



exec - 新指令进程替换当前bash进程, 从而不产生新进程

语法
exec [-cl] [-a name] [command [arguments]]

参数列表
-c
    在empty environment执行命令



exit [n]
    退出当前shell, 并且返回exit status code为20



export - 将变量配置为全局, 可以在子进程中使用

语法
export [-fn] [-p] [name[=value]]

参数列表
-f
    导出函数

-n
    将变量从全局变为局部, 只能在当前进程使用

-p
    以特殊格式显示结果



hash - 控制指令路径缓存信息表

语法
hash [option] [name]

参数释义
-d
    删除指定name的缓存

-l
    以可重用格式打印所有缓存信息, 即与-p配置格式一致

-p filename
    配置指令查找位置

-r
    清空所有指令路径缓存

-t
    显示指定name的缓存



let - 对表达式进行算数计算

语法
let <expression>



printf - 格式化输出

语法
printf [-v <var>] <format> [<arguments>]

参数
-v <var>
    将格式化内容赋值给变量var, 而非打印

format
%c - 字符串的第一个字符或数字对应编码的字符
%d, %i - 十进制数字
%e, %E - 科学计数法
%f, %F - 浮点数. 如: %4.3f
%g, %G - 科学计数法或浮点数, 选择使用字符较少的方式
%o - 无符号八进制数字
%s - 字符串
%u - 无符号十进制数字
%x, %X - 无符号十六进制数字
%% - 打印字符'%', 不消耗后续str占位
    格式更细节的格式控制符号(添加在%与字符之间):
	N$ - 代表指定引用<strN>的值. 如: %2$s代表引用str2的值, 作为字符串输出
	- - 左对齐内容
	" " - 在正数前面添加空格, 在负数前面添加'-'
	+ - 给数字添加正负符号. 如: %+4d在正数前添加'+', 负数前添加'-'
	# - 给不同格式内容添加指定标记. 详细如下:
	    1) %e - 无论如何, 都会包含小数点
	    2) %f - 无论如何, 都会包含小数点
	    3) %g - 保留小数点后的0
	    4) %o - 添加0前缀
	    5) %x - 添加0x前缀
	0 - 用于数字格式, 右对齐, 空白部分填充'0'
	' - 使用千分位符号进行每三位使用','分隔数字(只适用于指定locale)
	<width> - 最小字符宽度. 如: %4d
	.<prec> - 对于不同类型数据, 表示不同意义. 如下:
	    1)用于%d,%i,%o,%u,%x,%X时, 表示输出的最小数字数量
	    2)用于%e,%E,%f,%F时, 表示小数位数
	    3)用于%g,%G时, 表示最长的有效位数
	    4)用于%s时, 表示最大字符数量



pwd - 打印当前工作目录(Print current Working Directory)

语法
pwd [-LP]

参数列表
-L
    显示symbolic link目录

-P
    显示symbolic link实际指向的目录



read - 从shell读取单行内容, 并将内容分割赋予多个变量

语法
read [option] [<var>...]

参数列表
-a <arr_name>
    将每个单词赋予给数组元素, 使用IFS变量的值作为单词分隔符
    数组索引由0起始

-d <delim>
    使用delim的第一个字符中断输入行, 并且将整行赋值给一个变量
    默认为换行符

-e
    使用Readline获取输入行

-i <text>
    如果已使用Readline获取输入行, 在输入前, 放入字符串text
    必须配合-e使用

-n <n_chars>
    读取指定字符后, 停止输入
    默认行中断依然生效, 如换行符

-N <n_chars>
    读取指定字符后, 停止输入
    默认行中断不生效

-p <prompt>
    显示提示字符串prompt, 并且尾部不含换行符

-r
    将'\'视为普通打印字符, 而不是跳脱字符

-s
    silent模式, 输入内容不显示

-t <timeout>
    等待输入超时时间

-u <fd>
    使用指定file description读取输入

** 当单词少于变量, 多余变量赋值""; 当单词多于变量, 剩余单词全部赋予最后一个变量



set - 配置bash各选项, 或打印当前环境下的变量

语法
set [-abefhkmnptuvxBCEHPT] [-o option-name] [--] [-] [argument ...]
set [+abefhkmnptuvxBCEHPT] [+o option-name] [--] [-] [argument ...]

参数列表
-a
    后续创建的variable或function, 直接被export  

-b
    background job被结束后马上打印状态
    默认为在下一个primary prompt之前打印状态

-e
    当返回status code不为0时, 退出当前bash

-f
    关闭filename expansion(文件名无法使用通配符进行匹配)

-h
    使用hash表进行指令路径缓存

-k
    所有出现在参数位置的赋值语句都作用于bash环境, 而不只是作用于当前command

-m
    启用job control

-n
    读取command但不执行
    用于script语法检查, 在交互式shell中无效

-o [opt_name]
    指定详细的名称来指定option. 当没有指定opt_name时, 打印opt_name列表和相应启动状态
    opt_name列表：
        allexport
	    后续创建的变量和函数, 直接被export
	    与-a类似

        braceexpand
	    启用brace expansion
	    与-B类似

        emacs
	    emacs风格的指令接口, 为交互式shell默认选项
	    bash --noediting可解除该默认选项

        errexit
	    返回非0状态码, 退出当前bash
	    与-e类似

        functrace
	    与-T类似
 
        hashall
            使用hash表进行指令路径缓存
	    与-h类似

        histexpand
            启用! style的history替换
            默认在interactive shell中启用
	    与-H类似

        history
	    启动history记录
	    interactive shell默认选项

        ignoreeof
	    interactive shell遇到EOF时, 不退出

        keyword
            所有出现在参数位置的赋值语句都作用于bash环境, 而不只是作用于当前command
	    与-k类似

        monitor
            启用job control
	    与-m类似

        noclobber
            不允许输出重定向使用>/>&/<>符号, 覆盖已存在文件内容
	    与-C类似

        nonexec
            读取command但不执行
            用于script语法检查, 在交互式shell中无效
	    与-n类似

        noglob
	    与-f类似

        notify
	    与-b类似

        nounset
	    与-u类似

        onecmd
	    与-t类似

        physical
	    与-P类似

        pipefail
	    在所有pipeline指令中, 当所有指令成功时, 则返回0; 否则返回最后一个指令的非0状态码

        posix
	    posix兼容模式

        privileged
	    与-p类似

        verbose
	    与-v类似

        vi
	    使用vi风格指令接口

        xtrace
	    与-x类似

-p
    打开privileged模式
    当该模式关闭时, 将有效user ID和group ID直接设置为当前user ID和group ID

-r
    开启restricted shell mode

-t
    执行command后退出当前bash

-u
    在non-interactive中, 如果使用的变量未定义, 则输出错误信息, 并退出

-v
    打印bash读取的内容

-x
    打印出每一条指令的完整展开内容, 格式为$PS4 <expand_exp>
    用于for/case等内容展开详情

-B
    bash启用brace expansion
    默认启用

-C
    不允许输出重定向使用>/>&/<>符号, 覆盖已存在文件内容

-H
    启用! style的history替换
    默认在interactive shell中启用

-P
    当cd切换到symbolic link目录时, 对symbolic link解引用

--
    position parameter被取消

-
    代表option字段的结束, 开始position parameter

** 使用'+'代替'-'可关闭set各选项



shopt - 修改bash相关选项

语法
shopt [-pqsu] [-o] [optname ...]

参数列表
-o
    限制optname为可通过set -o获取的值

-p
    打印bash选项已配置列表

-q
    quiet模式, 不打印一般信息

-s
    enable相关选项

-u
    disable相关选项

** 当提供多个optname时, 所有操作生效才返回status code=0


optname列表:
autocd
    当command为一个目录时, 自动将其作为cd指令的参数目录
    只作用于interactive shell

cdable_vars
    当cd指令的参数不是一个目录时, 将其视为包含目录值的变量

cdspell
    针对cd指令的参数修正, 当与匹配目录含一个字符差异(或两个字符错位)时, 修正为正确目录

checkhash
    在执行path搜寻前, 先匹配hash表内容

checkwinsize
    在执行command后, 检查窗口大小, 必要时调节LINES和COLUMNS值
    默认启用

cmdhist
    将多行指令保存为一条历史记录

compat31
compat32
compat40
compat41
compat42
compat43
compat44
    shell的兼容模式

direxpand
    将目录内容进行展开

dirspell
    当目录内容有一个字符差异时, 修正为正确目录

dotglob
    在文件名filename expansion(通配符)匹配中, 包含以'.'开头的文件
    必须显示指定.或..字符

execfail
    在non-interactive中, 如果exec指令的参数无法执行, 不退出当前环境

expand_aliases
    开启alias展开功能

extglob
    启动filename expansion功能

extquote
    $'string'和$"string"视为${string}
    默认启用

failglob
    当filename expansion失败时, 返回expansion err错误

globstar
    在filename expansion中, '**'匹配所有文件、目录、递归子目录

gnu_errfmt
    err信息全部为GNU标准err信息格式

histappend
    当退出bash时, 将history列表的内容append到HISTFILE定义的文件, 而非覆盖

histreedit
    当使用readline时, 可获得机会重写失败的hitory替换

hostcomplete
    当使用readline时, 在@后面可自动补足主机名
    默认开启

huponexit
    当login bash退出时, 向所有job发送SIGHUP信号

interactive_comments
    在bash中, #后续的字符视为注释
    默认开启

lithist
    当cmdhist开启, 在history记录中, 使用内嵌<newline>代替';'

login_shell
    当shell为login shell时, 该选项自动配置. 不可手动修改

mailwarn
    当bash检查的mail文件已经被访问过, 出现提示

no_empty_cmd_completion
    当使用readline时, 如果bash试图在空指令行上补全指令, 不会搜索PATH

nocaseglob
    使用filename expansion时, 不在乎大小写

nullglob
    当filename expansion匹配不到任何文件时, 将内容置换为空字符串进行匹配

progcomp
    开启programmable completion
    默认开启

promptvars
    prompt可经过parameter expansion/command substitution/arithmetic expansion
    默认开启

shift_verbose
    使用shift时, 当超过位置参数时, 显示警告信息

sourpath
    使用source(.)时, 参考PATH变量内容查找文件所在

syslog_history
    命令历史记录到syslog

xpg_echo
    echo命令默认展开'\'

** glob代表使用通配符进行匹配



umask - 新建文件/目录时，在默认权限上减掉的权限

格式
umask [option] [<mode>]


option参数
-S
    以符号格式显示新建文件(目录)的权限
    默认为数字格式显示

-p
    以umask <digital>格式显示新建文件(目录的权限)



unalias - 取消别名

语法
unalias [-a] [<name>...]

参数
-a
    取消所有的别名



unset - 在当前环境中移除变量/方法

语法
unset [option] [name...]

参数释义
-f
    移除function

-n
    移除nameref引用, 实际指向的变量无变化

-v
    移除变量. 用于nameref时, 当前变量和被引用的变量同时被移除

**readonly类型变量无法移除



最后编辑于: 2025-01-17
