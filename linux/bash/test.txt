test - 评估条件表达式, 返回0(true)或1(false)
** 每一个operator和operand之间, 都必须使用分隔符


语法
test <expression>
[ <expression> ]


expression语法：
文件类型
-a <file>
-e <file>
    文件存在

-b <file>
    文件存在并且为块设备. 如: 硬盘

-c <file>
    文件存在并且为字符设备. 如: 键盘

-d <file>
    文件存在并且为目录

-f <file>
    文件存在并且为regular文件

-g <file>
    文件存在, 并且为SGID文件

-h <file>	
-L <file>
    文件存在, 并且为symbolic link

-k <file>
    文件存在, 并且为SBIT文件

-p <file>
    文件存在, 并且为pipe(FIFO)文件

-r <file>
    文件是否存在并且为可读

-s <file>
    文件存在, 并且文件大小大于0 byte

-t fd
    文件描述符fd打开, 并且指向终端

-u <file>
    文件存在, 并且为SUID文件

-w <file>
    文件存在, 并且为可写

-x <file>
    文件存在, 并且为可执行(目录为可进入)

-G <file>
    文件存在, 并且所属组为当前登录用户有效组

-N <file>
    文件存在, 并且自上一次访问(access time)之后文件有变动(status time)

-O <file>
    文件存在, 并且所属用户为当前登录用户

-S <file>
    文件存在, 并且为socket文件

<file1> -ef <file2>
    file1和file2位于相同device, 并最终指向同一个inode number
    symbolic link和hard link都符合

<file1> -nt <file2>
    file1新于file2(根据modify time)
    file1存在而file2不存在

<file1> -ot <file2>
    file1旧于file2(根据modify time) 
    file2存在而file1不存在



变量与参数
-o <opt_name>
    shell option开启
    可通过set -o查看option列表

-v <var_name>
    变量已配置

-R <var_name>
    变量已配置, 并且为name reference



字符串
-z <str>
    str的长度为0

-n <str>
<str>
    str的长度不为0

<str1> == <str2>
<str1> = <str2>
    str1与str2相等

<str1> != <str2>
    str1与str2不相等

<str1> < <str2>
    str1在str2之前, 按字符逐个比较(根据ASCII顺序)

<str1> > <str2>
    str1在str2之后, 按字符逐个比较(根据ASCII顺序)



数字
<int1> -eq <int2>
    int1与int2相等

int1 -ne int2
    int1与int2不相等

int1 -lt int2
    int1小于int2

int1 -le int2
    int1小于或等于int2

int1 -gt int2
    int1大于int2

int1 -ge int2
    int1大于或等于int2



连接符
!exp
    对exp取反

exp1 && exp2
    exp1和exp2的逻辑与操作

exp1 || exp2
	exp1和exp2的逻辑或操作



status code:
0 - expression为true

1 - expression为false

2 - error



补充：
1.使用[ expression ]时, 方括号与内容必须保留空格
[-e demo.txt]      x
[ -e demo.txt ]    √

2.字符串参数尽量使用""来限定

3.数字测试仅用于整数, 不支持浮点数比较



最后编辑于: 2025-01-16
