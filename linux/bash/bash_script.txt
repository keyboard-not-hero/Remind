script通则: 
1.指令从上而下执行

2.遇到Line Feed则执行指令

3.可使用\<Enter>将内容延伸至下一行

4.#为单行注释限定

5.<<COMMENT ... COMMENT为多行注释限定

6.#!/bin/bash为bash script声明



算数运算:
1.整数运算
1) $((statement))
	echo $((2+3))

2) $[statement]
	echo $[2*3]

3)let statement
	let x=20/2

2.小数运算
bc的非交互模式. 例:
	echo 'scale=2;1/2' | bc



script执行方式:
1.直接执行带x权限的script

2.使用bash执行脚本

3.使用source执行脚本

** 1/2在子bash中执行指令, 3在当前bash中执行指令



参数变量引用: 
示例
steven@www ~$ ./demo.sh arg1 arg2 arg3
变量释义
$#    脚本名称后的参数个数(3个)

$0    脚本名称(demo.sh)

$<number>    对应的参数($1为arg1...$3为arg3, 当数字为两位或以上时, 使用{}限定)。参数以IFS变量(默认为space)作为分割符

"$@"    所有参数的字符串序列"$1" "$2" "$3" ...

"$*"    所有参数组合的字符串"$1 $2 $3 ..."; 默认以空白键分隔参数

参数引用偏移: 
shift [number]    将参数引用向右偏移number位(如: 使用shift后, $1为arg2, $2为arg3), 左边的参数省略, number默认为1



方法/函数定义: 
function FUN_NAME(){
    STATEMENT
    return STATUS_CODE
}
方法/函数调用: 
FUN_NAME arg1 arg2...

**方法/函数补充: 
1.方法内部有自己的变量体系, 如下: 
	$0    脚本名称
	$<number>    调用函数时, 函数的实参(arg1, arg2 ...)
	$#    方法参数个数
	$FUNCNAME    方法名称
	$FUNCNEST    方法嵌套层级
2.函数return的为状态码, 返回的值并不能用于赋值给变量

示例1 - 不带参数的函数
#定义函数
function printit(){
	echo "Hello World"
}

#调用函数
printit

示例2 - 带参数的函数
max_diy(){
    if [ $1 -gt $2 ]; then
        s=$1
    else
        s=$2
    fi
    echo $s
}

max_diy 5 4

