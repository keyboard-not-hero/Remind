script通则: 
1.指令从上而下执行

2.遇到Line Feed则执行指令

3.可使用\<Enter>将内容延伸至下一行

4.#为单行注释限定

5.<<COMMENT ... COMMENT为多行注释限定

6.#!/bin/bash为bash script声明



$((statement)): 表示得出算术运算结果



script执行方式:
1.直接执行带x权限的script

2.使用bash执行脚本

3.使用source执行脚本

** 1/2在子bash中执行指令, 3在当前bash中执行指令



参数变量引用: 
示例
steven@www ~$ ./demo.sh arg1 arg2 arg3
变量释义
$#    脚本名称后的参数个数(3个)

$0    脚本名称(demo.sh)

$<number>    对应的参数($1为arg1...$3为arg3, 当数字为两位或以上时, 使用{}限定)。参数以IFS变量(默认为space)作为分割符

"$@"    所有参数的字符串序列"$1" "$2" "$3" ...

"$*"    所有参数组合的字符串"$1 $2 $3 ..."; 默认以空白键分隔参数

参数引用偏移: 
shift [number]    将参数引用向右偏移number位(如: 使用shift后, $1为arg2, $2为arg3), 左边的参数省略, number默认为1



条件判断: 
if [ CONDITION1 ]; then
    STATEMENT1
elif [ CONDITION2 ]; then
    STATEMENT2
else
    STATEMENT3
fi


取值案例: 
case $VAR_NAME in
	VALUE1)
		STATEMENT1
		;;
	VALUE2)
		STATEMENT2
		;;
	*)
  		STATEMENT3
		;;
esac
** 1.';;'相当于C语言switch中的break, 代表当前匹配成功前提下, 不继续向下匹配

** 2.使用';&'代替';;', 在当前匹配成功前提下, 不执行下一个匹配, 而直接执行下一个STATEMENT

** 3.使用';;&'代替';;', 在当前匹配成功前提下, 继续执行下一个匹配

** 4.如果没有case成功匹配, status code为0；否则为最后一个STATEMENT返回status code


while循环: 
while [ CONDITION ]
do
    STATEMENT
done
** 当condition满足时, 执行循环


util循环: 
util [CONDITION]
do
    STATEMENT
done
** 当condition不满足时, 执行循环


for循环: 
for VAR [in VALUE_LIST]
do
    STATEMENT
done
**如果in VALUE_LIST被省略, 则默认为$1 $2 ...

for((INIT_VAL;CONDITION;STEP))
do
    STATEMENT
done

示例1 - 集合格式(使用空格分隔)
for i in "dog" "cat" "pig"
do
    echo "this is my pet $i"
done

示例2 - 计算1-10的总和
sum=0
for((i=1;i<=10;i++))
do
    sum=$(($sum+$i))
done
echo "the sum of 1-10: $sum"


方法/函数定义: 
function FUN_NAME(){
    STATEMENT
    return STATUS_CODE
}
方法/函数调用: 
FUN_NAME arg1 arg2...

**方法/函数补充: 
1.方法内部有自己的变量体系, 如下: 
	$0    脚本名称
	$<number>    调用函数时, 函数的实参(arg1, arg2 ...)
	$#    方法参数个数
	$FUNCNAME    方法名称
	$FUNCNEST    方法嵌套层级
2.函数return的为状态码, 返回的值并不能用于赋值给变量

示例1 - 不带参数的函数
#定义函数
function printit(){
	echo "Hello World"
}

#调用函数
printit

示例2 - 带参数的函数
max_diy(){
    if [ $1 -gt $2 ]; then
        s=$1
    else
        s=$2
    fi
    echo $s
}

max_diy 5 4

