1.if条件判断
1)单语句
if CONDITION
then
	STATEMENT
fi

cmd模式:
if CONDITION; then STATEMENT; fi

2)双语句
if CONDITION
then
	STATEMENT1
else
	STATEMENT2
fi

cmd模式:
if CONDITION; then STATEMENT1; else STATEMENT2; fi

3)多语句
if CONDITION1
then
    STATEMENT1
elif CONDITION2
then
    STATEMENT2
else
    STATEMENT3
fi

cmd模式:
if CONDITION1; then STATEMENT1; elif CONDITION2; then STATEMENT2; else
STATEMENT3; fi


示例
#!/bin/bash
x=1
if [ $x -eq 0 ]
then
    echo "x is number zero"
elif [ $x -eq 1 ]
then
    echo "x is number one"
else
    echo "x is other number"
fi



2)case分支 
case $VAR_NAME in
	VALUE1)
		STATEMENT1
		;;
	VALUE2)
		STATEMENT2
		;;
	*)
  		STATEMENT3
		;;
esac

** 1.';;'相当于C语言switch中的break, 代表当前匹配成功前提下, 不继续向下匹配

** 2.使用';&'代替';;', 在当前匹配成功前提下, 不执行下一个匹配, 而直接执行下一个STATEMENT

** 3.使用';;&'代替';;', 在当前匹配成功前提下, 继续执行下一个匹配

** 4.如果没有case成功匹配, status code为0；否则为最后一个STATEMENT返回status code



while循环: 
while CONDITION
do
    STATEMENT
done

** 当condition满足时, 执行循环



util循环: 
util CONDITION
do
    STATEMENT
done

** 当condition不满足时, 执行循环



for循环: 
for VAR [in VALUE_LIST]
do
    STATEMENT
done

**如果in VALUE_LIST被省略, 则默认为$1 $2 ...


for((INIT_VAL;CONDITION;STEP))
do
    STATEMENT
done

示例1 - 集合格式(使用空格分隔)
for i in "dog" "cat" "pig"
do
    echo "this is my pet $i"
done

示例2 - 计算1-10的总和
sum=0
for((i=1;i<=10;i++))
do
    sum=$(($sum+$i))
done
echo "the sum of 1-10: $sum"
