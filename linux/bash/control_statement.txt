1.if条件判断
1)单语句
if <condition>
then
    <statement>
fi

cmd模式:
if <condition>; then <statement>; fi


2)双语句
if <condition>
then
    <statement_1>
else
    <statement_2>
fi

cmd模式:
if <condition>; then <statement_1>; else <statement_2>; fi


3)多语句
if <condition_1>
then
    <statement_1>
elif <condition_2>
then
    <statement_2>
else
    <statement_3>
fi

cmd模式:
if <condition_1>; then <statament_1>; elif <condition_2>; then <statement_2>; else <statement_3>; fi


示例 - if测试
[steven@localhost bash]$ vi demo_01.sh
#!/bin/bash

x=2
y=3
z=4

if [ $x -eq 2 ]
then
    echo "I'm variable x, equal two"
fi

if [ $y -eq 2 ]
then
    echo "I'm variable y, equal two"
else
    echo "I'm variable y, not equal two"
fi

if [ $z -eq 2 ]
then
    echo "I'm variable z, equal two"
elif [ $z -eq 3 ]
then
    echo "I'm variable z, equal three"
elif [ $z -eq 4 ]
then
    echo "I'm variable z, equal four"
else
    echo "I'm variable z, random number"
fi

[steven@localhost bash]$ bash demo_01.sh
I'm variable x, equal two
I'm variable y, not equal two
I'm variable z, equal four



2.case分支 
case $<var_name> in
    <value_1>)
	<statement_1>
	;;
    <value_2>)
	<statement_2>
	;;
    *)
  	<statement_3>
	;;
esac

** 1)';;'相当于C语言switch中的break, 当前匹配成功前提下, 不继续向下匹配; 当前匹配不成功，继续向下匹配

** 2)使用';&'代替';;', 如果当前匹配成功, 不执行下一个匹配, 而直接执行下一个statement; 如果当前匹配不成功, 视为';;', 继续执行下一个匹配

** 3)使用';;&'代替';;', 无论当前匹配成功与否, 继续执行下一个匹配


示例 - case测试
[steven@localhost bash]$ vi demo_01.sh
#!/bin/bash

x=2
y=3
z=4

case $x in
    2)
        echo "This is statement one for x";;
    3)
        echo "This is statement two for x";;
    *)
        echo "This is statement last for x";;
esac

case $y in
    2)
        echo "This is statement one for y";&
    4)
        echo "This is statement two for y";&
    *)
        echo "This is statement last for y";;
esac

case $z in
    3)
        echo "This is statement one for z";;&
    4)
        echo "This is statement two for z";;&
    4)
        echo "This is statement three for z";;&
    5)
        echo "This is statement four for z";;&
    *)
        echo "This is statement last for z";;
esac


[steven@localhost bash]$ bash demo_01.sh
This is statement one for x
This is statement last for y
This is statement two for z
This is statement three for z
This is statement last for z



3.while循环: 
while <condition>
do
    <statement>
done

** 当condition满足时, 执行循环

示例 - while测试
[steven@localhost bash]$ cat demo_03.sh
#!/bin/bash

n=2
while [ $n -le 8 ]
do
    echo "Value of n is: $n";
    n=$((n+1))
done

[steven@localhost bash]$ ./demo_03.sh
Value of n is: 2
Value of n is: 3
Value of n is: 4
Value of n is: 5
Value of n is: 6
Value of n is: 7
Value of n is: 8



4.util循环: 
util <condition>
do
    <statement>
done

** 当condition不满足时, 执行循环

示例 - until测试
[steven@localhost bash]$ cat demo_02.sh
#!/bin/bash

n=2
until [ $n -ge 8 ]
do
    echo "Value of n is: $n";
    n=$((n+1))
done

[steven@localhost bash]$ ./demo_02.sh
Value of n is: 2
Value of n is: 3
Value of n is: 4
Value of n is: 5
Value of n is: 6
Value of n is: 7



5.for循环: 
for <name> [in <value_list>]
do
    <statement>
done

**如果in VALUE_LIST被省略, 则默认为bash script从命令的$1 $2 ...读取


for((<init>;<condition>;<step>))
do
    <statement>
done

示例1 - 使用for <var> in <list>展示数组内容
[steven@localhost bash]$ cat demo_04.sh
#!/bin/bash

arr=(1 2 3 4 5)
for i in ${!arr[@]}
do
    echo "arr[$i] is: ${arr[$i]}"
done

[steven@localhost bash]$ ./demo_04.sh
arr[0] is: 1
arr[1] is: 2
arr[2] is: 3
arr[3] is: 4
arr[4] is: 5

示例2 - 使用for((init;condition;step))展示数组内容
[steven@localhost bash]$ cat demo_05.sh
#!/bin/bash

arr=(1 2 3 4 5)
for((i=0;i<${#arr[@]};i++))
do
    echo "arr[$i] is: ${arr[$i]}"
done
[steven@localhost bash]$ ./demo_05.sh
arr[0] is: 1
arr[1] is: 2
arr[2] is: 3
arr[3] is: 4
arr[4] is: 5



最后编辑于: 2025-01-14
