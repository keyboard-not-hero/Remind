h			向左移动一列
j			向下移动一行(逻辑行)
k			向上移动一行(逻辑行)
l			向右移动一列
gj			向下移动一行(物理行)
gk			向上移动一行(物理行)
w			移动到下一个单词起始处
b			移动到当前单词起始处
e			移动到当前单词末尾处
ge			移动到上一个单词末尾处
W			移动到下一个字串起始处
B			移动到当前字串起始处
E			移动到当前字串末尾处
gE			移动到上一个字串末尾处
^			移动到行首
0			移动到该行的第一个字符位置
$			移动到行尾
%			移动到匹配的另一半括号. 默认适用于(), [], {}, 可通过matchpair选项设定
H			移动到当前页的顶部行
M			移动到当前页的中间行
L			移动到当前页的底部行
ctrl+y			内容向下滚动一行
ctrl+e			内容向上滚动一行
ctrl+u			内容向下滚动半页
ctrl+d			内容向上滚动半页
ctrl+B			内容向下滚动一页
ctrl+F			内容向上滚动一页
zt			将当前光标所在行, 移动到屏幕顶部
zz			将当前光标所在行, 移动到屏幕中间
zb			将当前光标所在行, 移动到屏幕底部
gg			移动到第一行
G			移动到最后一行
''			跳转到上次所在的行
ctrl+o			跳转到一个更早所在的行
ctrl+i			跳转到一个更新所在的行(tab也可以达到该效果)
:jumps			显示历史所在行的列表
m<mark>			使用mark标记一个行(mark为小写字母)
'<mark>			跳转到mark标记的行(mark为小写字母)
:marks			查看历史mark列表
--------------------------------------------
** 普通模式
** 字串 - 使用空格分隔的字符串
** 上述操作前加上数字, 可以重复操作多次(^/0/%/gg/G除外)
** %之前加上数字, 可以移动到内容的n%位置行
** gg与G之前加上数字, 可以移动到指定行



x			删除光标所在字符
X			删除光标左侧字符
J			删除换行符
u			撤销上一个编辑操作
U			撤销对一个行的所有编辑操作
ctrl-R			撤销一个撤销操作(重做)
.			重复上一个编辑操作
dd			删除一行内容
dw			删除到下一个单词起始处
dW			删除到下一个空格(包含空格)
db			删除到当前单词起始处
de			删除到当前单词结尾处
dge			删除到上一个单词结尾处
d^			删除到行起始
d$			删除到行末尾
cc			删除一行内容, 并且换到插入模式
cw			删除到下一个单词起始处, 并切换到插入模式
cb			删除到当前单词起始处, 并切换到插入模式
ce			删除到当前单词结尾处, 并切换到插入模式
cge			删除到上一个单词结尾处, 并切换到插入模式
c^			删除到行起始, 并切换到插入模式
c$			删除到行末尾, 并切换到插入模式
yy			复制一行内容
yw			复制到下一个单词起始处
yb			复制到当前单词起始处 
ye			复制到当前单词结尾处 
yge			复制到上一个单词结尾处 
y^			复制到行起始 
y$			复制到行末尾 
p			粘贴内容到光标之后
P			粘贴内容到光标之前
~			修改当前所在字符的大小写
gqap			gq表示按行宽(textwidth)进行整齐排列, ap代表段落(a paragraph)	
guap			gu表示字母转化为小写
gUap			gU表示字母转化为大写
g~ap			g~表示切换大小写
gf			下载当前链接内容(vim判断使用何种下载工具)
--------------------------------------------
** 普通模式
** 上述操作前加上数字, 可以重复操作多次



daw			删除当前所在的单词
das			删除当前句子(句子之间使用.分隔)
dap			删除当前段落(段落之间使用空行分隔)
yaw			复制当前所在的单词
yas			复制当前句子
yap			复制当前段落
--------------------------------------------
** 普通模式



"<lower_case>y				复制内容到指定的小写字母寄存器
"<upper_case>y				往小写字母寄存器内追加内容
"<low_case>p				从指定小写字母寄存器粘贴内容
q<lower_case><action_list>p		记录一系列操作到小写字母寄存器
q<upper_case><append_act_list>p 	追加到指定小写字母寄存器的操作
@<lower_case>				从小写字母寄存器回放操作
@@					执行最近的回放操作
"*y					复制内容到当前选择区寄存器
"*p					从当前选择区寄存器粘贴内容
"+y					复制内容到剪切板寄存器
"+p					从剪切板寄存器粘贴内容
--------------------------------------------
** 普通模式 - vim寄存器
** 寄存器需要vim的clipboard模块支持
** 小写字母寄存器在tab页/分割空间/多文件间共享
** 当前选择区寄存器内容适用于所有vim文本间共享
** 剪切板寄存器内容适在系统内共享



f<char>			在当前行, 向前(右)查找字符char
F<char>			在当前行, 向后(左)查找字符char
t<char> 		在当前行, 向前(右)查找字符char, 并停留在目标字符的左边
T<char>			在当前行, 向后(左)查找字符char, 并停留在目标字符的右边
;			对f/F/t/T<char>进行正向重复查找
,			对f/F/t/T<char>进行反向重复查找
*			查找下一个, 当前光标所在单词
#			查找上一个, 当前光标所在单词
/<str>			正向查找指定字符串, . 以下内容为特殊字符: .*[]^$/\~ 为特殊符号
			需要使用\进行跳脱
/<str>/b		/b代表光标停留在匹配字符串的第一个字符上. 默认
/<str>/e		/e代表光标停留在匹配字符串的最后一个字符上
?<str>			反向查找指定字符串
?<str>?b		/b代表光标停留在匹配字符串的第一个字符上
?<str>?e		/e代表光标停留在匹配字符串的最后一个字符上
n			对/与?查找的同方向重复查找
N			对/与?查找的反方向重复查找
ctrl-A			对/与?查找匹配到的某个数字内容值+1
ctrl-X			对/与?查找匹配到的某个数字内容值-1
--------------------------------------------
** 普通模式
** 上述操作前加上数字, 可以重复操作多次
** /<str>和?<str>使用正则表达式来查找内容



v		启动可视模式, 移动光标以选中字符
V		启动可视模式, 移动光标以选中行
ctrl-v		启动可视模式, 移动光标以选中块
o		移动到选中范围的另一端, 块范围移动到对角线
O		移动到选中范围的另一端, 块范围移动到同一行的另一端
aw		选中当前所在的单词
as		选中当前所在的句子
>		将选中的行向右平移, 平移的距离由shiftwidth决定
<		将选中的行向左平移, 平移的距离由shiftwidth决定. 遇到阻碍停止平移
gv		选中上次选择的文本
--------------------------------------------
** 可视模式



i    			从当前字符之前插入
I    			从当前行第一个字符之前插入
a    			从光标之后插入
A    			从当前行最后插入
r    			替换光标所在字符
R    			替换光标及之后的字符
o    			在光标下一行插入
O    			在光标上一行插入
<Esc>    		退出到普通模式
<backspace>		删除光标前的字符
<delete>    		删除光标处的字符
ctrl+W			删除光标前的单词部分
ctrl+U			删除行首至光标处(不包含)的所有字符
ctrl-<Left>		左移一单词
ctrl-<Right>		右移一单词
ctrl-A			复制上一次在编辑模式进行的操作
ctrl-Y			复制上一行对应列字符(用于逐字符复制)
ctrl-E			复制下一行对应列字符
ctrl-K			用于将后续两个字符组合为一个字符(二合字母). 如:ctrl-K Co为版权符号.
可用的组合序列:digraphs
--------------------------------------------
** 编辑模式
** 在R进入的编辑模式中, backspace可将修改的前一个字符恢复



:[range]s[ubstitute]/pattern/string/[flags]
	将指定行(range)的内容由pattern替换(substitute)为string

range选项:
	. - 指定当前所在行
	$ - 指定最后一行
	number - 指定某一行
	?pattern? - 从上一行反向查找匹配pattern的行. 当后续pattern没有内容时,
精确匹配内容, 而非匹配行
	/pattern/ - 从下一行正向查找匹配pattern的行. 当后续pattern没有内容时,
精确匹配内容, 而非匹配行
	number,number - 指定起始行到结束行
	'<mark>,'<mark> - 使用mark定位行
	'<,'> - 在可视模式下选中的行范围
	% - 所有行. 类似于1,$
	----------------
	<offset> - 作用于以上匹配结果的偏移. 列表如下:
		+<num> - 匹配行下方的第num行
		-<num> - 匹配行上方的第num行

substitute - 代表对内容进行替换

/ - 可使用其他符号同时替换三个'/'符号

pattern - 使用正则匹配内容

string - 替换内容. 特殊字符如下:
    & - 匹配的pattern内容
    \0 - 匹配的pattern内容
    \1 - 匹配的第一个分组
    \2 - 匹配的第二个分组
    ...
    \9 - 匹配的第九个分组
    \r - 换行符
    \n - null符号
    当该字符以'\='开头时, 内容解释为表示式. 特殊函数如下:
	float2nr - 将浮点数转化为整数
	printf - 格式化字符串(具体格式类似C语言)
	str2float - 将字符串转化为浮点数
	str2nr - 将字符串转化为整数
	submatch(num)用于匹配pattern的内容. num列表:
	    0 - 匹配的完整pattern内容
	    1 - 匹配的第一个分组
	    ...
	    n - 匹配的第n个分组
		
flags选项:
    & - 使用上次:substitute的flag列表
    c - 在每次替换时进行提示
	y - 替换当前匹配
	n - 不替换当前匹配
	a - 替换所有匹配
	q - 退出替换
	l - 替换当前匹配后退出
	^E - 向上滚动一行
	^Y - 向下滚动一行
    e - 抑制部分error信息, 并继续执行匹配
    g - 替换指定行的所有匹配内容. 默认只替换指定行的第一个匹配内容
    I - pattern部分不忽略大小写
    i - pattern部分忽略大小写
    l - 类似于p, 但显示$符号
    n - 报告匹配次数, 而不执行替换操作. 忽略c flag
    p - 打印最后一次匹配, 替换后的行内容
    r - 当pattern为empty, 使用上次:substitute或:global的pattern
    # - 类似于p, 但打印行号
    ** 参考s_flags
--------------------------------------------
** 指令模式 - substitute



:[range]d[elete]
        将指定行进行删除

range - 参考:substitute的range. 默认当前所在行
--------------------------------------------
** 指令模式 - delete



:[range]g[lobal]/pattern/command
	将指定行(range)匹配的内容pattern执行指令操作

range选项 - 参考:substitute的range. 与:substitute不同的是, range默认为%

global - 查找匹配

/ - 可使用其他操作符替换

pattern - 使用正则表达式匹配

command - 对匹配内容的操作. 只适用于指令模式的指令(即:cmd格式), 不适用于普通模式的指令
--------------------------------------------
** 指令模式 - global



:[range]m[ove] <address>
	将指定范围行(range)移动到指定行(address)之下

range选项 - 参考:substitute的rage

move - 移动指定行

address - 移动的锚
--------------------------------------------
** 指令模式 - move



:gr[ep] <pattern> <file>
	从文件中查找匹配pattern的项

pattern - 正则匹配. 但一般的\{}, 需要使用\{\}

file - 从指定的文件中寻找. 默认从当前所在目录查找

:cnext
	跳转到下一个匹配行

:cprev
	跳转到上一个匹配行

:clist
	罗列所有匹配行
--------------------------------------------
** 指令模式 - grep



:[range]center [width]
	将指定范围行(range)在指定列(width)内居中(center)

:[range]right [width]
	将指定范围行(range)在指定列(width)内右对齐(right)

:[range]left [width]
	将指定范围行(range)在指定列(width)内左对齐(left)

range选项 - 参考:substituterange. 默认为.

center/right/left - 居中/右对齐/左对齐

width - 在指定宽度列居中. 默认使用textwidth值
--------------------------------------------
** 指令模式 - center/right/left



:[range]j[oin] [flags]
	将指定范围行(range)合并为一行

range选项 - 指定合并的行. 默认为当前行与当前行的下一行

join - 合并操作

flags选项:
	l - 输出格式类似于:list
	# - 添加合并后的行号
	p - 输出格式类似于:print
--------------------------------------------
** 指令模式 - center/right/left



:q[uit]				直接退出
:q[uit]!			放弃修改并退出
:w[rite] [file]			保存文件内容
:up[date] [file]		保存文件内容, 但只有文件内容有变动时才执行操作
:wq				保存文件并退出(ZZ也可保存退出)
:e[dit] <file>			退出当前文件, 进入其他文件
:f[ile] <new_file>		编辑当前文件的副本
:read <file>			读取文件内容到当前行之下
:!<shell_cmd>			执行shell指令, 并显示结果到小窗口中
:range!<shell_cmd>		将范围行的内容, 替换为, 对该范围行使用shell指令操作的结果
:iab[brev] <abbr> <word>	设置缩写 
:noreabbrev <abbr> <word>	设置缩写, 但word的组成部分后续不用于宏映射
:unabbreviate <abbr>		删除缩写
:abb[reviate]			罗列所有缩写
:abclear			清除所有缩写
shift-<Left>			左移一个单词
shift-<Right>			右移一个单词
ctrl-B | <Home>			移动到命令行行首
ctrl-E | <End>			移动到命令行行尾
ctrl-W				删除光标前的整个单词
ctrl-U				删除光标前的所有字符, 至行首
--------------------------------------------
** 指令模式



:tabedit <file>		在新tab页打开其他文件
:tab split		在新tab页打开当前tab页内容
gT			跳转到上一个tab页
gt			跳转到下一个tab页
:tabfir[st]		跳转到第一个tab页
:tabl[ast]		跳转到最后一个tab页
:tabonly		关闭除当前窗口外的其他窗口
--------------------------------------------
** 普通/指令模式 - tab页



:new				水平分割窗口, 新窗口(上方)为新建文件		
:sp[lit] [<file>]		水平分割窗口, 新窗口(上方)为指定文件(默认为当前文件)
ctrl-w +			增加当前窗口行数
ctrl-w -			减少当前窗口行数
ctrl-w _			设置当前窗口高度(默认为极限高度)
ctrl-w <up>|k			移动到上一个窗口
ctrl-w <down>|j			移动到下一个窗口
ctrl-w t			移动到最顶部窗口
ctrl-w b			移动到最底部窗口
ctrl-w r			所有窗口下降(最底部窗口移到最顶部)
ctrl-w R			所有窗口上升(最顶部窗口移到最底部)
ctrl-w x			当前活跃窗口与下方窗口互换
:vnew				垂直分割窗口, 新窗口(左方)为新建文件
:vs[plit] [<file>]		垂直分割窗口, 新窗口(左方)为指定文件(默认为当前文件)
ctrl-w <			减少当前窗口宽度
ctrl-w >			增加当前窗口宽度
ctrl-w |			设置当前窗口宽度(默认为极限宽度)
ctrl-w <left>|h			移动到左边窗口
ctrl-w <right>|l		移动到右边窗口
:only				关闭除当前窗口外的其他窗口
ctrl-w =			所有窗口等高且等宽
:qa				退出所有窗口
:wa				保存所有窗口
:wqa				保存并退出所有窗口
:[range]windo <cmd>		对指定范围窗口(range)执行指令, cmd可使用|连接多个指令
--------------------------------------------
** 普通/指令模式 - 多窗口



:previous			进入文件列表的上一个文件
:next				进入文件列表的下一个文件
:wprevious			保存当前文件修改, 并进入文件列表的上一个文件
:wnext				保存当前文件修改, 并进入文件列表的下一个文件
:first				进入文件列表中的第一个文件
:last				进入文件列表中的最后一个文件
:args				查看文件列表
:[range]argdo <cmd>		对文件列表的指定范围文件(range)执行指令, cmd可使用|连接多个指令
'"				返回到上次离开该文件时的位置
'.				返回到最后一次修改该文件的位置
m<mark>				作用于多文件的标记(mark为大写字母)
'<mark>				跳转到文件列表中的任意其他文件的标记位置(mark为大小字母)
:all				为文件列表的所有文件打开一个水平分割窗口
:vertical all			为文件列表的所有文件打开一个垂直分割窗口
:qa				退出文件列表的所有文件
:wa				保存文件列表的所有文件
:wqa				保存并退出文件列表的所有文件
--------------------------------------------
** 普通/指令模式 - 多文件



zf{motion}		    创造一个折叠. 如: zfap代表折叠当前段落
:{range}fo[ld]		    创建指定范围行的折叠
:set foldmethod=indent	    指定根据缩进创建折叠层级
:set foldnestmax=<num>	    指定内嵌折叠层级上限
:set foldlevel=<num>	    设置折叠层级数
zd			    清除当前折叠
zD			    清除当前及内嵌折叠
zE			    清除所有折叠
zo			    打开当前折叠
zO			    打开当前及内嵌折叠
zR			    打开所有折叠
:{range}foldo[pen]	    打开指定范围行的折叠
zc			    闭合当前折叠
zC			    闭合当前折叠及嵌套折叠
zM			    闭合所有折叠
:{range}foldc[lose]	    闭合指定范围行的折叠
za			    打开/闭合当前折叠
zA			    打开/闭合当前及嵌套折叠
zv			    打开折叠, 以能看到未折叠前, 该行内容为准
zm			    按折叠层级闭合一层折叠
zr			    按折叠层级打开一层折叠
:mkview	[<n>]		    储存折叠, n代表储存的视图号码, 总共可以储存十个视图
:loadview [<n>]		    加载折叠
--------------------------------------------
** 普通/指令模式 - 折叠内容
** 参考:help fold-manual
** 参考:help fold-indent



:tag <func_name>				跳转到定义函数的标签位置(可以在同目录的文件间跳转)
ctrl-]						跳转到当前光标所在函数的定义标签位置
ctrl-T						往回反向标签跳转
:tags						经过的跳转标签列表
:tag						跳转到标签列表栈顶
:set tags=./tags,./../tags,./*/tags		可以在当前目录/父目录/所有子目录的文件间跳转
:tfirst						跳转到相同定义函数的第一个标签
:tprevious					跳转到相同定义函数的上一个标签
:tnext						跳转到相同定义函数的下一个标签
:tlast						跳转到相同定义函数的最后一个标签
:tselect <tag_name>				相同定义函数的标签列表
--------------------------------------------
** 普通/指令模式 - 标签堆栈
** 准备工作: 
** 1.安装ctags
**     sudo apt-get install exuberant-ctags
** 2.生成tag文件
**     ctags *.py



ctrl-g		查看文件信息
g ctrl-g	统计信息(当前所在行/列/单词/字节)
K		查看当前单词的man文档
:set number	显示行号
:set ruler	显示光标位置
--------------------------------------------
** 文件信息相关



示例1 - 将所有行反转次序(依次将所有行移动到第0行)
:g/^/m 0


示例2 - 从当前目录.bak后缀文件中查找g.*gle模式
---------------------------
cat demo01.txt
google is a big company
---------------------------
cat demo02.txt
google have a funny spelling
it is gooooooogle
---------------------------
vi catch.bak
:grep g.*gle *.txt
demo01.txt:1:google is a big company
demo02.txt:1:google have a funny spelling
demo02.txt:2:it is gooooooogle


示例3 - 将当前段落合并为一行
g/./,/^$/join
分段解析:
g/./ - 非空白行
/^$/ - 向下查找到第一个空白行
join - 合并


示例4 - 将匹配到的指定数字值+1
/20[0-9][0-9]<Enter>
ctrl-A
n
ctrl-A
n
...


示例5 - 删除文件中的空白行
g/^$/d


示例6 - 修改文件列表中所有文件的内容
:argdo %s/man/woman/ge | update


示例7 - 将后续为空格的单词(三个连续数字)添加指定文字环绕
:100s/\([0-9]\{3}\) /\\textbackslash ding\\{\1\\} /g

解析:
\(exp\) - 代表group, \1代表引用该值
\{3} - 代表匹配前面的字符3次
\\ - 代表"\"字符串


示例8 - 替换多个特殊模式行之后一行的内容
g/例/+1s/^/\t/

解析:
g/例/ - 匹配所有包含'例'字的行
+1 - 指定行的下一行


示例9 - 将指定的的所有数字加上指定值, 并输出为整数
100,200s/\d\{2,3}/\=printf('%.0f', str2float(submatch(0))+10)/g
或
100,200s/\d\{2,3}/\=str2nr(submatch(0))+10/g
或
100,200s/\d\{2,3}/\=float2nr(submatch(0)+10)/g

解析:
\=
  将之后的内容解释为特殊表达式, 可使用内建函数

str2nr
  将字符串转化为整数

submatch(0)
  匹配pattern完整内容. 类似于一般指令模式下的\0或&


示例10 - 将指定字符插入(之后、之间与之后)添加内容
:13,17s/\(\\includegraphics\)\({.\{-}}\)/\\raisebox{0pt}[4.2cm][0.2cm]{\1[totalh
eight=4cm]\2}

替换前的内容:
\includegraphics{rotate}

替换后的内容
\raisebox{0pt}[4.2cm][0.2cm]{\includegraphics[totalheight=4cm]{rotate}}

解析:
\(\\includegraphics\)
第一个group内容, 内容为\includegraphics

\({.\{-}}\)
第二个group内容
.匹配任何字符
\{-}匹配之前的字符任意次(尽可能少的匹配)

\1
引用第一个group内容

\2
引用第二个group内容
