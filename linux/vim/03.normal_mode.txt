位置跳转
gj
    向下移动一行
    在超长行中, 在一个逻辑行中, 进行物理窗口显示上的行移动

gk
    向上移动一行
    在超长行中, 在一个逻辑行中, 进行物理窗口显示上的行移动

[n]h
    向左移动一个字符. n可指定移动多个字符

[n]j
    向下移动一行. n可指定移动多个字符
    
[n]k
    向上移动一行. n可指定移动多个字符

[n]l
    向右移动一个字符. n可指定移动多个字符

[n]b
    移动到上一个'单词的首字符'. n可指定移动到之前的第n个'单词首字符'
    字符/数字作为单词内容, 标点符号另外组合成单词内容, 空格作为单词分隔符, 字符/数字与标点符号的边界作为分隔符
    
[n]w
    移动到下一个'单词的首字符'. n可指定移动到之后的第n个'单词首字符'
    字符/数字作为单词内容, 标点符号另外组合成单词内容, 空格作为单词分隔符, 字符/数字与标点符号的边界作为分隔符

[n]ge
    移动到上一个'单词的末尾字符'. n可指定移动到之前的第n个'单词末尾字符'
    字符/数字作为单词内容, 标点符号另外组合成单词内容, 空格作为单词分隔符, 字符/数字与标点符号的边界作为分隔符

[n]e
    移动到下一个'单词的末尾字符'. n可指定移动到之后的第n个'单词末尾字符'
    字符/数字作为单词内容, 标点符号另外组合成单词内容, 空格作为单词分隔符, 字符/数字与标点符号的边界作为分隔符

[n]B
    移动到上一个'单词的首字符'. n可指定移动到之前的第n个'单词首字符'
    字符/数字和标点符号作为单词内容, 空格作为单词分隔符

[n]W
    移动到下一个'单词的首字符'. n可指定移动到之后的第n个'单词首字符'
    字符/数字和标点符号作为单词内容, 空格作为单词分隔符

[n]gE
    移动到上一个'单词的末尾字符'. n可指定移动到之前的第n个'单词末尾字符'
    字符/数字和标点符号作为单词内容, 空格作为单词分隔符
    
[n]E
    移动到下一个'单词的末尾字符'. n可指定移动到之后的第n个'单词末尾字符'
    字符/数字和标点符号作为单词内容, 空格作为单词分隔符

[n]F<char>
    移动到当前行的上一个指定字符处. n可指定为之前的第n个指定字符
    ';'用于重复同向查找
    '.'用于重复逆向查找

[n]f<char>
    移动到当前行的下一个指定字符处. n可指定为之后的第n个指定字符
    ';'用于重复同向查找
    '.'用于重复逆向查找

^
    移动到当前行的第一个字符(不包括空格)处

0(数字zero)
    移动到当前行的第一个字符(包括空格)处

[n]$
    移动到当前行的最后一个字符处. n可指定跳转到之后的第n-1行, 并移动的最后一个字符处

%
    当cursor处于'('/'['/'{'括号位置时, 直接跳转到与之匹配的')'/']'/'}'位置. 反之亦可
    可使用:set mps+=<:>增加'<'/'>'匹配对, 中间使用':'分隔

H
    跳转到当前显示页的第一行

M
    跳转到当前显示页的中间行

L
    跳转到当前显示页的最后一行

ctrl-Y
    向上翻动一行

ctrl-E
    向下翻动一行

ctrl-U
    向上翻动半页

ctrl-D
    向下翻动半页
    
ctrl-B
    向上翻动一页

ctrl-F
    向下翻动一页

<n>G
    跳转到第n行

{
    跳转到当前段落起始位置

}
    跳转到当前段落结束位置

gd
    如果当前cursor所在单词为变量名称, 跳转到定义local变量的位置

gD
    如果当前cursor所在单词为变量名称, 跳转到定义global变量的位置

G
    跳转到文件的最后一行

gg
    跳转到文件的第一行

<n>%
    跳转到文件的n%部分

gf
    跳转到当前cursor所在字符构成文件名称的文件
    默认从当前文件的目录搜寻, 可通过:set path指定搜寻路径
    认定为文件名称组成的符号, 可通过:set isfname指定

ctrl-W F
    在新的split窗口中开启cursor所在字符构成文件名称的文件

ctrl-O
    返回到上一次jump操作之前所在位置
    可溯源多次返回

ctrl-I
<tab>
    跳转到下一次jump操作之后所在位置
    ctrl-O的逆向操作
    可寻迹多次跳转

:jumps
    查看jump列表

** jump操作: 查找操作/?和重复查找n与N等属于jump, j与k的行之间跳转不属于jump




Visual(可视化)模式
v
    按字符选中
    该模式下可使用normal模式下的指令

V
    按行选中
    该模式下可使用normal模式下的指令. 通常使用j/k进行行选择


ctrl-V
    按块选中
    该模式下可使用normal模式下的指令. 通常使用j/k/hl进行块的范围选择, 适用于表格内容

w
    在visual模式下, 移动到单词结尾处

as
    在visual模式下, 移动到句子结尾处

^
    在visual模式下, 移动到当前行起始

$
    在visual模式下, 移动到当前行尾部

gg
    在visual模式下, 移动到文件第一行

G
    在visual模式下, 移动到文件最后一行

o
    在visual模式下, 移动到范围的另一侧
    v模式, 移动到选中开始/结束侧; V模式, 移动到上/下侧; ctrl-V模式, 移动到对顶角侧

O
    在visual模式下, 移动到范围的另一侧
    v/V模式, 效果与o相同; ctrl-V模式, 移动到当前行的另一侧

gv
    重新选中上次visual模式选中的内容




内容修改
[n]x
    删除cursor所在字符. n可指定删除多个字符

d[n]b
    删除从当前单词起始, 到cursor所在字符的上一个字符
    标点符号另外组成一个单词, 字母/数字与标点符号的分界点作为分隔符
    n可指定删除多个单词

d[n]w
    删除cursor所在字符, 直到单词结尾(包含后续空格)
    标点符号另外组成一个单词, 字母/数字与标点符号的分界点作为分隔符
    n可指定删除多个单词

d[n]e
    删除当前单词(从cursor所在字符到单词结尾[不包含结尾的空格])
    标点符号另外组成
    一个单词, 字母/数字与标点符号的分界点作为分隔符
    n可指定删除多个单词

diw
    删除当前cursor所在位置的完整单词(不包括后续空格)

daw
    删除当前cursor所在位置的完整单词(包括后续空格)

dis
    删除当前cursor所在完整句子(不包括后续空格)

das
    删除当前cursor所在完整句子(包括后续空格)

df<char>
    删除当前行从当前cursor所在位置, 直到指定字符char(包含)处

d^
    删除从行起始, 直到cursor所在字符的上一个字符

d$
    删除从cursor所在字符, 直到行尾

[n]dd
    删除cursor所在行. n可指定删除多行(所在行起始, 以及所在行之下的行)

dap
    删除当前所在段落

dgg
    删除从当前行尾部, 直到文件开头

dG
    删除从当前行起始, 直到文件末尾

cw<string>
    删除当前单词(从cursor所在位置到单词结尾, 不包含后续空格), 并进入insert模式
    与de --> i效果一致

c$
    删除当前cursor所在字符, 直到行尾, 并且进入insert模式
    与d$ --> a效果一致

cc
    删除当前行的内容, 并在行首进入insert模式
    与dd --> O操作效果一致

yy
    复制当前行内容, 并保存

P
    将保存的内容粘贴到前面的位置
    如果保存区的内容为字符, 则粘贴到cursor所在位置前后; 如果保存区的内容为整行内容, 则粘贴到cursor所在行的上一行
    删除/复制的内容都会在保存区

p
    将保存的内容粘贴到后面的位置
    如果保存区的内容为字符, 则粘贴到cursor所在位置之后; 如果保存区的内容为整行内容, 则粘贴到cursor所在行的下一行
    删除/复制的内容都会在保存区

guw
    将当前cursor所在字符, 到单词尾部, 所有字符修改为小写

gUw
    将当前cursor所在字符, 到单词尾部, 所有字符修改为大写

g~w
    将当前cursor所在字符, 到单词尾部, 所有字符大小写进行切换

guu
    将cursor所在行的所有字符修改为小写

gUU
    将cursor所在行的所有字符修改为大写

g~~
    将cursor所在行的所有字符进行大小写切换

gqap
    将当前段落, 根据textwidth配置调整排列

gggqG
    将整个文件, 根据textwidth配置调整排列

J
    当前cursor所在行的换行符, 使两行合并为一行

u
    撤销上一次操作. 可溯源多次撤销

ctrl-R
    撤销之前的撤销操作. 可溯源多次撤销

.
    重复上一次的修改内容操作(不包含undo/redo和:command造成的内容修改)

ctrl-A
    当前cursor所在的数字+1

ctrl-X
    当前cursor所在的数字-1




mark(标记)
m<letter>
    为当前cursor所在位置作标记
    可使用26个字母(大小写一共52个)作为标记

`<letter>
    跳转到标记位置

'<letter>
    跳转到标记所在行的第一个字符
    两个预定义mark:
    . - 最后一次修改内容的位置
    " - 最后一次离开当前文件, 所处内容的位置

``
    返回到上一次jump操作之前所在位置
    只能在两个位置来回跳转

''(两个单引号)
    返回到上一次jump操作之前所在行的第一个字符处
    只能在两个位置来回跳转

:marks
    查看mark列表


显示当前所在位置:
ctrl-G
    显示文件名、文件总行数、当前所在文件百分比位置、当前所在行、当前所在列




寄存器
"<lower_case_letter><action>
    对寄存器进行操作

"<upper_case_letter><action>
    对寄存器(对应小写字母)进行追加内容操作
    action通常为y相关指令

例: 将demo_01.txt的一个句子和一个单词分别复制进入寄存器a/b, 并从寄存器取出, 粘贴到demo_02.txt
vi demo_01.txt
"ayas
"byaw

vi demo_02.txt
"ap
"bp




寄存器与宏
q<lower_case_letter><macro>...q
    将宏保存到寄存器

q<upper_case_letter><macro>...q
    对寄存器(对应小写字母)内的宏执行追加操作

[n]@<lower_case_letter>
    使用寄存器内的宏
    n指定将宏应用多次

@@
    再次使用上一次从寄存器取出的宏

Go<Esc>
"<lower_case_letter>p
<change_action>
"<lower_case_letter>yy
    跳转到最后一行, 新增一行
    将寄存器内的宏, 涉及的字符进行显示
    对宏的字符进行修改
    将修改后的宏重新保存到寄存器

** 宏内的特殊字符:
** ^M - <Enter>
** ^[<80><fd>a - <Esc>


示例1 - 将所有in单词前后添加#
qa
/\<in\><Enter>i#<Esc>ea#<Esc>
q


示例2 - 将例1的寄存器a内的内容做修改, 将单词前后添加#修改为添加$
Go<Esc>
"ap
/\<in\>^Mi$^[<80><fd>aea$^[<80><fd>a
"ayy




剪切板(需要vim支持clipboard特性, 通过vim --version查看)
"*yy
    复制当前行内容到剪切板

"*p
    将剪切板的内容进行粘贴


   
    
Tag
ctrl-]
    跳转到tag(即hyperlink, 待确认)

ctrl-T
    沿tag树, 从叶部返回到枝干部(ctrl-]的逆向)


编程语言文件构建tag file
sudo apt-get install universal-ctags
ctags *.c
在对应调用函数的位置, ctrl-]可跳转到函数定义位置




折叠(需要vim的folding特性支持)
zF
    折叠当前行

zfap
    折叠当前段落

:<line_range>fo[ld]
    折叠指定范围行

zd
    删除cursor所在折叠
    如果为多层折叠, 删除最外层折叠

zD
    删除cursor所在折叠
    如果为多层折叠, 递归删除所有层的折叠

zE
    删除文件内所有折叠

zo
    打开cursor所在折叠
    如果为多层折叠, 只打开最外层折叠

zO
    打开cursor所在折叠
    如果为多层折叠, 递归打开所有层的折叠

zc
    关闭cursor所在折叠
    如果为多层折叠, 只关闭最内层折叠

zC
    关闭cursor所在折叠
    如果为多层折叠, 递归关闭所有层的折叠

za
    如果cursor所在位置已折叠, 则打开折叠; 如果cursor所在位置已打开折叠, 则关闭折叠
    如果为多层折叠, 只打开/关闭最内层折叠

zA
    如果cursor所在位置已折叠, 则打开折叠; 如果cursor所在位置已打开折叠, 则关闭折叠
    如果为多层折叠, 递归打开/关闭所有层的折叠

zv
    打开足够层的折叠, 以查看折叠前cursor定位的行内容

zM
    关闭所有折叠

zR
    打开所有折叠
    
zj
    跳转到下一个折叠

zk
    跳转到上一个折叠





同屏多文件编辑
vi -o <file_01> <file_02> ...
    同时打开多个文件, 并以从上到下的方式, 展示在当前terminal的多个窗口上

vi -O <file_01> <file_02> ...
    同时打开多个文件, 并以从左到右的方式, 展示在当前terminal的多个窗口上

:[n]split [<file_name>]
    在当前窗口的上方开启新窗口, 并且按垂直方向窗口总数(新开启窗口计入总数), 将窗口高度进行等分
    cursor置于新开启窗口内
    当file_name未指定, 默认为当前开启文件, 在两个窗口同步
    n可指定初始高度

:[n]new
    在当前窗口的上方开启新窗口, 并且按垂直方向窗口总数(新开启窗口计入总数), 将窗口高度进行等分
    cursor置于新开启窗口内
    新窗口文件名未定义
    n可指定初始高度

:[n]vsplit [<file_name>]
    在当前窗口的左侧开启新窗口, 并且按水平方向窗口总数(新开启窗口计入总数), 将窗口宽度进行等分
    cursor置于新开启窗口内
    当file_name未指定, 默认为当前开启文件, 在两个窗口同步
    n可指定初始宽度
    v代表分割线的方向

:[n]vnew
    在当前窗口的左侧开启新窗口, 并且按水平方向窗口总数(新开启窗口计入总数), 将窗口宽度进行等分
    cursor置于新开启窗口内
    新窗口文件名未定义
    n可指定初始宽度

:close
    关闭当前窗口
    当关闭的窗口为最后一个窗口时, 进行提示并关闭失败

:only
    关闭除当前窗口外的其他所有窗口

ctrl-W w
    在多个窗口间进行切换

ctrl-W h
    切换到左侧窗口

ctrl-W j
    切换到下方窗口

ctrl-W k
    切换到上方窗口

ctrl-W l
    切换到右侧窗口

ctrl-W t
    切换到顶部窗口

ctrl-W b
    切换到底部窗口

ctrl-W K
    将当前窗口移动到垂直位置顶部

ctrl-W J
    将当前窗口移动到垂直位置底部

ctrl-W H
    将当前窗口移动到水平位置最左侧

ctrl-W L
    将当前窗口移动到水平位置最右侧

ctrl-W +
    增加窗口高度

ctrl-W -
    减少窗口高度

[<height>] ctrl-W _
    指定当前窗口高度
    省略height高度参数时, 设置高度为尽可能大

:qa
    从所有窗口中退出

:wa
    保存所有窗口内容的改动

:wqa
    保存所有窗口内容的改动, 并退出

:qa!
    不保存所有窗口的改动, 强制退出




多文件编辑
vi <file_01> <file_02> ...
    开启多个文件, 并显示第一个文件

:previous
    跳转到上一个文件

:wprevious
    保存, 并跳转到上一个文件

:next
    跳转到下一个文件

:wnext
    保存, 并跳转到下一个文件

:first
    跳转到第一个文件

:last
    跳转到最后一个文件

:args
    显示文件列表. 位于[]内的代表当前编辑的文件




