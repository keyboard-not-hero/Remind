grep -- 显示匹配模式的内容


语法:
grep [options] <pattern> [files]


参数释义:
-A <num>, --after-context=<num>
	显示匹配行后num行非匹配上下文

-a, --text
	将匹配的binary文件作为ASCII文件处理

-B <num>, --before-context=<num>
	显示匹配行前的num行非匹配上下文

-b, --byte-offset
	匹配行起始位置相对于文件起始的字节偏移, 该偏移基于0
	配合-o使用时, 匹配部分起始位置相对于文件起始的字节偏移

--binary-files=<type>
	将二进制文件视为指定格式文件进行匹配

-C <num>, --context=<num>
	显示匹配行前后的num行非匹配上下文

-c, --count
	只打印匹配的累计行数, 不打印匹配内容

--color[=<when>], --colour[=<when>]
	是否突出显示匹配字元, when可选列表: never/always/auto

-D <action>, --devices=<action>
	将device/FIFO/socket文件进行action操作. action可选列表:
		read - 将文件视为普通文件进行读取. 默认选项
		skip - 跳过该文件

-d <action>, --directories=<action>
	将目录进行action操作. action可选列表:
		read - 将目录视为普通文件进行读取. 默认选项
		skip - 跳过目录
		recurse - 递归读取目录下的文件(只有symbolic link出现在cmd上才读取其指向的文件)

-E, --extended-regexp
	将pattern解释为extended regular expression(ERE)

-e <pattern>, --regexp=<pattern>
	匹配的pattern
	可同时指定多次

--exclude=<glob>
	跳过匹配glob的文件
	glob为wildward match

--exclude-dir=<dir>
	跳过从指定目录下的文件递归匹配

--exclude-from=<file>
	跳过从指定文件中读取, 匹配glob的文件名称

-F, --fixed-strings
	将pattern解释为固定长度字符串

-f <file>, --file=<file>
	从文件中读取pattern, 每行为一个pattern

-G, --basic-regexp
	将pattern解释为basic regular expression(BRE)
	默认选项

--group-separator=<sep>
	使用指定分隔符作为组分隔
	配合-A/-B/-C使用

-H, --with-filename
	打印匹配行对应的文件名
	多文件匹配时, 默认选项

-h, --no-filename
	不打印匹配行对应的文件名
	单文件匹配时, 默认选项

--help
	帮助信息

-I
	将二进制文件视为没有匹配内容
	类似于--binary-files=without-match

-i, --ignore-case
	忽略大小写匹配

--include=<glob>
	只查找匹配glob模式的文件
	glob为wildcard match

-L, --files-without-match
	只打印未出现pattern内容的文件名(用于多文件)

-l, --files-with-matches
	只打印出现pattern内容的文件名(用于多文件)

--label=<label>
	配合-H使用, 当grep从stdin中读取数据时, 使用label作为文件名

-m <num>, --max-count=<num>
	匹配pattern内容num次后, 停止查找

-n, --line-number
	输出匹配行在文件中的行号, 基于1起始

--no-group-separator
	使用空字符串作为组分隔
	配合-A/-B/-C使用

-o, --only-matching
	只显示行内匹配部分内容

-P, --perl-regexp
	将pattern解释为perl兼容模式regular expression

-q, --quiet, --silent
	quiet模式

-R, --dereference-recursive
	递归读取目录下的文件
	读取所有symbolic link指向的实际文件

-r, --recursive
	递归读取目录下的文件
	只有当symbolic link在command line中, 才读取其指向的文件
	类似于-d recurse

-s, --no-messages
	不输出任何错误信息

-T, --initial-tab
	输出字段在tab对齐位置
	适用于配合-H/-n/-b选项使用

-U, --binary
	将文件视为二进制文件, 内容进行逐字符解读
	只在DOS/Windows下有效果

-u, --unix-byte-offsets
	将文件视为Unix文件格式
	该选项只作用于Windows下, 删除CR符号

-V, --version
	版本信息

-v, --invert-match
	反向匹配, 匹配pattern不包括的行

-w, --word-regexp
	完整单词匹配

-x, --line-regexp
	完整行匹配

-Z, --null
	使用NUL替代文件名后的分隔符



正则表达式
BRE
.	
	匹配任意单个字符(NUL除外)

*	
	匹配前面字符0至多次

\?	
	匹配前面字符0或1次

\+	
	匹配前面字符1至多次

\{n\}
	匹配前面的字符n次

\{n,\}
	匹配前面的字符n至多次

\{,m\}
	匹配前面的字符最多m次

\{n,m\}
	匹配前面的字符n~m次

^    
	代表行起始

$    
	代表行结束

[...]    
	匹配[]内的任一字符. 特殊字符如下:
		1.-置于首位/末位时, 代表普通字符; 置于非首/末位时, 代表区间符号 
		2.^置于第一个位置有取反作用; 置于非第一个位置时, 代表普通字符
		3.]置于第一个位置时, 代表普通字符; 
		4.字符集 - 系列字符集合名称. 格式[:alpha:]; 
		5.排序字符集 - 将多个字符序列视为一个字符. 格式[.ch.]; 
		6.等价字符集 - 应视为等值的一系列字符. 格式[=e=]

\|
	从两个字符串中任选一个

\(\)
	分组

\n
	分组引用. 范围[0,9]

\<    
	单词起始位置

\>    
	单词结束位置

\b    
	单词开始或结束位置

\B    
	非单词开始或结束位置的空字符串

\w    
	单词字符([a-zA-Z0-9_])

\W    
	非单词字符



ERE
.	
	匹配任意单个字符(NUL除外)

*	
	匹配前面字符0至多次

?	
	匹配前面字符0或1次

+	
	匹配前面字符1至多次

{n}
	匹配前面的字符n次

{n,}
	匹配前面的字符n至多次

{,m}
	匹配前面的字符最多m次

{n,m}
	匹配前面的字符n~m次

^    
	代表行起始

$    
	代表行结束

[...]    
	匹配[]内的任一字符. 特殊字符如下:
		1.-置于首位/末位时, 代表普通字符; 置于非首/末位时, 代表区间符号 
		2.^置于第一个位置有取反作用; 置于非第一个位置时, 代表普通字符
		3.]置于第一个位置时, 代表普通字符; 
		4.字符集 - 系列字符集合名称. 格式[:alpha:]; 
		5.排序字符集 - 将多个字符序列视为一个字符. 格式[.ch.]; 
		6.等价字符集 - 应视为等值的一系列字符. 格式[=e=]

|
	从两个字符串中任选一个

()
	分组

\n
	分组引用. 范围[0,9]

\<    
	单词起始位置

\>    
	单词结束位置

\b    
	单词开始或结束位置

\B    
	非单词开始或结束位置的空字符串

\w    
	单词字符([a-zA-Z0-9_])

\W    
	非单词字符



示例1 - 使用BRE查找内容
grep -G 'g.\{2\}gle' demo01.txt
或
grep 'g.\{2\}gle' demo01.txt

示例2 - 使用ERE查找内容
grep -E 'g.{2}gle' demo01.txt

示例3 - 不包含注解行(以#开头)和空行的内容
grep -v '^$' demo01.txt | grep -v '^#'
