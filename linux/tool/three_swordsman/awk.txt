awk - 根据模式扫描和执行文本的语言


语法
awk [option] [--] [<script>] [<file>]
awk [option] -f [<script_file>] [<file>]


描述
逐行读取内容, 对当前行执行每个操作指令, 再切换到下一行


运行流程:
1.读入文件内容
2.利用行分隔符(RS), 将内容分解为record
3.利用字段分隔符(FS), 将record分解为field. 其中$0代表整行, $1/$2...代表第1/2...个field
** 当前行字段数量为NF, 所以最后一个字段使用$NF引用


注意事项:
1.#之后的内容为注释内容
2.AWKPATH变量, 用于-f和-i参数查找文件路径, 默认为".:/usr/local/share/awk"
3.AWKLIBPATH变量, 用于-l参数查找文件路径, 默认为"/usr/local/lib/gawk"


option参数
-b, --characters-as-bytes
    将输入视为单字节字符
    将print/printf等命令输出的内容也作为单字节字符输出

-c, --traditional
    使用POSIX版本特性, 关闭GNU awk拓展特性
	
-C, --copyright
    显示copyright信息
	
-d[<file>], --dump-variables[=<file>]
    保存当前使用变量值到指定文件(已排序)
    文件默认名称为awkvars.out
	
-e <program_text>, --source <program_text>
    操作指令
    可同时指定多个指令
	
-E <script>, --exec file
    类似于-f, 但有以下两点不同:
	1.停止读取后续option
	2.-v option失效
    常用于可执行脚本(#!指定)
	
-f <script>, --file <script>
    使用文件中的操作指令

-F <field_separator>, --field-separator <field_separator>
    指定字段分隔符
    默认为空格/<tab>

-i <source_file>, --include <source_file>
    导入库文件
    与-f的差异:
	1.-f为program, 可以不需要额外指定-e; -i为导入库, 需要额外指定-f或-e
	2.-f可重复多次指定某文件; -i重复指定文件时, 自动取消重复内容

-l <name>, --load <name>
    加载动态库

-P, --posix
    使用POSIX模式, disable GNU awk拓展特征

-v <variable>=<value>, --assign <variable>=<value>
    设置变量variable的值为value
    该参数只能设置一个变量, 但可多次指定该参数以设置多个变量
    该赋值操作类似于在BEGIN中的操作

--
    参数选项结束符号, 代表后续内容为非参数(即使以-开头)

-h, --help
    帮助信息
	
-V, --version
    版本信息



script
script包含格式如下:
<pattern>{<action>}


pattern - 匹配符合要求的行. 默认为所有行. 格式类型如下:
    /<re>/ - 对record($0)内容使用正则表达式进行匹配. 默认使用Extend Regular Expression(ERE)
    /<re1>/,/<re2>/ - 使用正则表达式匹配起始行和结束行(包含)
    <expression> - expression结果为true(非0数字或非空字符串), 则执行后续action. 如: $1 ~ /re/
    <exp1>,<exp2> - 使用exp匹配起始行和结束行
    BEGINFILE - 读取当前文件内容之前执行的操作
    ENDFILE - 读取当前文件所有内容之后执行的操作
    BEGIN - 读取内容之前执行的操作. 必须配置action
    END - 读取所有内容之后执行的操作. 必须配置action
    <null> - 匹配所有record
    ** !表示对以上内容取反
    ** 执行顺序: BEGIN --> BEGINFILE --> <normal_action> --> ENDFILE --> BEGINFILE --> <normal_action> --> ENDFILE --> END


action - 对匹配行的操作. 默认为print $0. 语句包含内容类型如下:
    1.控制语句
        类似于C语言的控制语句, 如if/for/while等. 具体如下:
	1)if语句
	    if(<condition>)
	        <statement1>
	    else
		<statement2>
	    或
	    if(<condition>) <statement1>; else <statement2>
			
	2)while语句
	    while(<condition>)
		<statement>
	    或
	    while(<condition>) <statement>
			
	3)do语句
	    do
	        <statement>
	    while(<condition>)
	    或
	    do <statement>; while(<condition>)
			
	4)for语句
	    for(<init>; <condition>; <increment>)
	        <statement>
	    ** 不支持多变量
				
	    for(i in <array>)
		<statement>
			
	5)switch语句
	    switch(<exp>){
	    case <val1_or_re1>:
	        <statement1>
	        break
	    case <val2_or_re2>:
	        <statement2>
	        break
	    default:
	        <statement3>
	        break
	    }
	    或
	    switch(<exp>){case <val1>: {<statement1>; break};case <val2>: {<statement2>; break};default: {<statement3>; break}}
			
	    6)break语句
		退出for/while/do while循环, 或switch
			
	    7)continue语句
		跳过剩下语句, 直接进入下一次循环
			
	    8)exit语句
		exit <exit_code>
		    直接执行END, 退出awk

            

    2.输入语句
	1)getline语句
	    马上读取下一条record
	    与其他命令执行的逻辑:
	    <other_cmd> get_next_line
	    <getline> get_next_line
	    <other_cmd> get_next_line
	    <getline> get_next_line

	2)next语句
	    马上进入下一条record, 不执行后续指令
		
	3)nextfile语句
	    马上读取下一个文件, 不执行后续指令


    3.输出指令
	print语句
	    1)print <str>或print(<str>)格式
	        将内容转化为字符串, 再进行打印输出
	        将数字转化为字符串指定, 可以使用OFMT指定数字格式. 默认为%.6g
	    2)print <str> > <file>格式
	        将输出重定向到文件
		文件不存在进行创建; 文件已存时, 在第一次使用print/printf打开时进行覆盖, 后续打开时进行append
	    3)print <str> >> <file>格式
	        将输出重定向到文件
		文件不存在进行创建; 文件已存在则进行append
	    4)print <str> | <shell_cmd>
	        将结果传递给shell cmd
	    ** <file>和<shell_cmd>指针会一直打开, 直到awk退出, 建议使用close(<file>|<shell_cmd>)手动退出
	    str格式如下:
	        print <str1><str2>
	            多个字符串紧邻
	        print <str1>,<str2>
	            多个字符串使用OFS作为分隔符
	        print <str1>\n<str2>
	            多个字符串使用换行符作为分隔符
	        ** 多个print之间使用ORS作为分隔符
	
	printf语句
	    1)printf <format>,<str>或printf(<format>,<str>)格式
	    2)printf(<format>,<str>) > <file>
	        将输出重定向到文件
		文件不存在进行创建; 文件已存时, 在第一次使用print/printf打开时进行覆盖, 后续打开时进行append
	    3)printf(<format>,<str>) >> <file>
	        将输出重定向到文件
		文件不存在进行创建; 文件已存在则进行append
	    4)printf <format>,<str> | <shell_cmd>
	        将结果传递给shell cmd
	    ** <file>和<shell_cmd>指针会一直打开, 直到awk退出, 建议使用close(<file>|<shell_cmd>)手动退出
	    格式指定标识符如下:
		%c - 字符串的第一个字符或数字对应编码的字符
		%d, %i - 十进制数字
		%e, %E - 科学计数法
		%f, %F - 浮点数. 如: %4.3f
		%g, %G - 科学计数法或浮点数, 选择使用字符较少的方式
		%o - 无符号八进制数字
		%s - 字符串
		%u - 无符号十进制数字
		%x, %X - 无符号十六进制数字
		%% - 打印字符'%', 不消耗后续str占位
		    格式更细节的格式控制符号(添加在%与字符之间):
			N$ - 代表指定引用<strN>的值. 如: %2$s代表引用str2的值, 作为字符串输出
			- - 左对齐内容
			" " - 在正数前面添加空格, 在负数前面添加'-'
			+ - 给数字添加正负符号. 如: %+4d在正数前添加'+', 负数前添加'-'
			# - 给不同格式内容添加指定标记. 详细如下:
			    1) %e - 无论如何, 都会包含小数点
			    2) %f - 无论如何, 都会包含小数点
			    3) %g - 保留小数点后的0
			    4) %o - 添加0前缀
			    5) %x - 添加0x前缀
			0 - 用于数字格式, 右对齐, 空白部分填充'0'
			' - 使用千分位符号进行每三位使用','分隔数字(只适用于指定locale)
			<width> - 最小字符宽度. 如: %4d
			.<prec> - 对于不同类型数据, 表示不同意义. 如下:
			    1)用于%d,%i,%o,%u,%x,%X时, 表示输出的最小数字数量
			    2)用于%e,%E,%f,%F时, 表示小数位数
			    3)用于%g,%G时, 表示最长的有效位数
			    4)用于%s时, 表示最大字符数量
			    ** 可使用printf(%*.*s, width, prec, str1)格式读取width和precise


    4.特殊字符:
        \47 - '符号
	\42 - "符号


    5.算术运算符:
        x^y
	x**y
	    求幂运算符
	
	-x
	    对数取反

        x*y
	    乘法

	x/y
	    除法. 结果为浮点数

	x%y
	    求余数

	x+y
	    加法
	
	x-y
	    减法
	
	++i
	    将变量值+1, 然后将结果运用于表达式

        i++
	    将i原来的值运用于表达式, 然后将变量值+1

	--i
	    将变量值-1, 然后将结果运用于表达式

        i--
	    将i原来的值运用于表达式, 然后将变量值-1


    6.逻辑运算符
        x < y
	    小于符号
	
	x <= y
	    小于等于符号
	
	x > y
	    大于符号
	
	x >= y
	    大于等于符号

	x == y
	    等于

	x != y
	    不等于
	
	x ~ y
	    字符串x匹配正则表达式y
	
	x !~ y
	    字符串x不匹配正则表达式y
	
	<subscript> in <array>
	    数组array中是否有索引为subscript的元素

	||
	    短路或
		
	&&
	    短路与
	
	!
	    非
	
	<condition>?<true_exp>:<false_exp>
	    条件表达式. 当condition为真时, 取结果true_exp; 当condition为假时, 取结果false_exp
   
   
    7.built-in函数
	sub(regexp, replacement[, target])
	    使用字符串replacement替换record中regexp第一个匹配到的内容
	    gensub(regexp, replacement, 1[, target])版本

	tolower(str)
	    将内容转化为小写

	toupper(str)
	    将内容转化为大写

		gensub(regexp, replacement, how[, target])
			从target中查找匹配regexp正则模式的内容, 并使用replacement替换
			target默认为$0
			how代表替换方式. 列表如下:
				g/G - global, 替换所有匹配的项
				<number> - 替换指定的第n个匹配项
		gsub(regexp, replacement[, target])
			gensub(regexp, replacement, "g"[, target])版本
		index(str, sub)
			子字符串sub在字符串str中出现的起始位置
		length([string])
			字符串的长度. string默认为$0
		match(string, regexp[, array])
			搜查到的regexp模式子字符串在string中的起始位置
			RSTART与返回内容一致
			RLENGTH为子字符串长度
		split(string, array[, fieldsep[, seps]])
			将字符串string使用field分隔符fieldsep进行分割, 分割后的item放入array, 分隔符放入seps
			array与seps索引起始为1
			fieldsep为regexp正则模式. 默认为FS的值
		sprintf(format, exp1, exp2, ...)
			类似于printf, 但不打印结果, 返回结果
		sqrt(number)
			求number的平方根
		substr(string, start[, length])
			从字符串string中截取长度为length的子字符串, 该字符串由start位置开始截取
		typeof(variable)
			变量类型
			awk拥有动态变量类型, 即变量类型不固定. 类别如下:
				array
					数组
				regexp
					正则常量
				number
					数字
				string
					字符串
				strnum
					纯数字字符串


    8.运算符优先级(由高到低)
	()
	    分组
	
	$
	    field引用
	
	++ --
	    自增/自减
	
	^ **
	    求幂
	
	+ - !
	    正/负/逻辑非
	
	* / %
	    乘法/除法/求余
	
	+ -
	    加法/减法
	
	<null>
	    字符串连接符号, 无具体符号, 字符串紧密相连
	
	< <= == != > >= >> | |&
	    比较符号和重定向符号
	
	~ !~
	    匹配/不匹配
	
	in
	    数组成员
	
	&&
	    逻辑与
	
	||
	    逻辑或
	
	?:
	    条件表达式

        = += -= *= /= %= ^= **=
	    赋值运算符

** pattern和action可省略其一, 但不可同时省略


pattern/action可用变量列表:
    $0 - 代表当前record内容
    $1/$2... - 代表第N个字段内容, N不局限于1位数
    ARGC - 指令行的参数个数
    ARGIND - 当前文件所在的ARGV索引号. 即FILENAME=ARGV[ARGIND]
    ARGV - 指令行的参数, 使用数组保存, 数组索引由0起始
    CONVFMT - 指定数字转化为字符串的格式. 默认为%.6g
    ENVIRON - 环境变量的联结数组. 如: ENVIRON["HOME"]为HOME变量值
    FIELDWIDTHS - 指定各个列的固定宽度. 格式: FIELDWIDTHS="<col1_wid> <col2_wid> ...". 
	自version 4.2起, 新增以下两个特性:
	    1)格式: FIELDWIDTHS= "<col1_wid> [<skip_col>:]<col2_wid> ...", skip_col代表跳过指定列数后, 再开始指定下一个field长度
	    2)最后一个列宽可指定为'*', 代表不固定长度
    FILENAME - 当前record所在文件名称
    FNR - 当前所在record编号, 多文件之间重置
    FPAT(Field Pattern) - 使用regular expression模式指定field
    FS - 字段分隔符(field separator). 值包含一个字符时, 进行字符串精确匹配; 当值包含多余一个字符时, 视为regular expression. 常用类别:
	" " - 单个或多个spaces/tables/newlines(移除record首尾空格), 默认选项
	"[ ]" - 使用单个空格符作为字段分隔符
	"[ \t\n]+" - 单个或多个spaces/tables/newlines(不移除record首尾空格)
	"" - 将record的每一个字符都划分为一个field
    IGNORECASE - 当赋值为数字0或空字符串时, 匹配在乎大小写; 当赋值为非0数字或非空字符串时, 匹配忽略大小写 
    NF - 当前record的field数量
    NR - 当前所在record编号, 多文件之间共享
        "\n" - 换行符, 默认值
        "" - 一个或多个空行(即段落, 移除段落前和段落后的空行)
        "\n\n+" - 一个或多个空行(即段落, 不移除段落前和段落后的空行)
    OFMT - CONVFMT的旧版本兼容变量
    OFS - 输出的字段分隔符. 默认为" "
    ORS - 输出显示的record分隔符. 默认为"\n"
    RLENGTH - match()返回的匹配子字符串长度, 无匹配时返回-1
    RSTART - math()返回的子字符串在字符串中的起始定位, 无匹配时返回0
    RS - 记录分隔符(record separator). 值包含一个字符时, 进行字符串精确匹配; 当值包含多余一个字符时, 视为regular expression. 常用类别:
    RT - 当RS包含一个字符时, 该值与RS一致; 当RS多于一个字符时(即RE), 该值为与RE匹配的字符串内容
    SUBSEP - 角标分隔符, 用于分隔多维数组的不同维度subscript. 默认为'\034'
    ** 可引用shell变量	



将record分割为field的方式:
1)使用FPAT指定field区域

2)使用FIELDWIDTHS指定每个field的长度

3)使用FS指定分割field的符号



awk数组:
1)不用指定数组长度
2)数组为dict映射, 索引可以为不连续数字
3)数组的索引始终为字符串(如果为数字, 自动转化为字符串)
4)元素赋值: arr[index]=value
5)引用数组元素: arr[index]
6)检测索引是否存在: if(index in arr)
7)遍历数组元素: for(var in arr)
8)删除数组元素: delete arr[index]
9)删除整个数组: delete arr


伪多维数组
1)伪多维数组: arr[in1,in2], 底层转化为arr["in1\034in2"], \034为SUBSEP默认值
2)检测索引是否存在: if((in1,in2) in arr)


多维数组
1)多维数组: arr[in1][in2]



当没有提供输入文件时, 从stdandard input读取输入
** 可在指定文件之前对变量临时进行赋值, 该赋值只影响赋值操作之后指定的文件



mail-list与inventory-shipped文件目录:
/usr/share/doc/gawk/examples/data



示例1 - 以','作为字段分隔符，打印匹配行的第一个字段
[steven@localhost demo]$ cat list
John Daggett, 341 King Road, Plymouth MA
Alice Ford, 22 East Broadway, Richmond VA
Orville Thomas, 11345 Oak Bridge Road, Tulsa OK
Terry Kalkas, 402 Lans Road, Beaver Falls PA
Eric Adams, 20 Post Road, Sudbury MA
Hubert Sims, 328A Brook Road, Roanoke VA
Amy Wilde, 334 Bayshore Pkwy, Mountain View CA
Sal Carpenter, 73 6th Street, Boston MA

[steven@localhost demo]$ awk -F, '/MA/{print $1}' list
John Daggett
Eric Adams
Sal Carpenter


示例2 - 将字段分隔符设置为newline
[steven@localhost ~]$ seq 6|awk 'BEGIN{RS="";FS="\n"};{print $2,$3,$4}'
2 3 4


示例3 - 指定分隔符
[steven@localhost bash]$ cat score-table
name,math,english,chinese
david,96,60,80
lily,79,89,92
peter,86,79,90

[steven@localhost bash]$ awk -F , '{print $2}' score-table
math
96
79
86

[steven@localhost bash]$ awk -v FS=, '{print $2}' score-table
math
96
79
86


示例4 - 使用指定字符串替换匹配内容
[steven@localhost bash]$ cat mail-list
Amelia       555-5553     amelia.zodiacusque@gmail.com    F
Anthony      555-3412     anthony.asserturo@hotmail.com   A
Becky        555-7685     becky.algebrarum@gmail.com      A
Bill         555-1675     bill.drowning@hotmail.com       A
Broderick    555-0542     broderick.aliquotiens@yahoo.com R
Camilla      555-2912     camilla.infusarum@skynet.be     R
Fabius       555-1234     fabius.undevicesimus@ucb.edu    F
Julie        555-6699     julie.perscrutabor@skeeve.com   F
Martin       555-6480     martin.codicibus@hotmail.com    A
Samuel       555-3430     samuel.lanceolis@shu.edu        A
Jean-Paul    555-2127     jeanpaul.campanorum@nyu.edu     R

[steven@localhost bash]$ awk '{sub(/gmail/, "qq") ; print}' mail-list
Amelia       555-5553     amelia.zodiacusque@qq.com    F
Anthony      555-3412     anthony.asserturo@hotmail.com   A
Becky        555-7685     becky.algebrarum@qq.com      A
Bill         555-1675     bill.drowning@hotmail.com       A
Broderick    555-0542     broderick.aliquotiens@yahoo.com R
Camilla      555-2912     camilla.infusarum@skynet.be     R
Fabius       555-1234     fabius.undevicesimus@ucb.edu    F
Julie        555-6699     julie.perscrutabor@skeeve.com   F
Martin       555-6480     martin.codicibus@hotmail.com    A
Samuel       555-3430     samuel.lanceolis@shu.edu        A
Jean-Paul    555-2127     jeanpaul.campanorum@nyu.edu     R


示例5 - 大小写不敏感匹配
1)使用toupper或tolower函数
[steven@localhost bash]$ cat inventory-shipped
Jan  13  25  15 115
Feb  15  32  24 226
Mar  15  24  34 228
Apr  31  52  63 420
May  16  34  29 208
Jun  31  42  75 492
Jul  24  34  67 436
Aug  15  34  47 316
Sep  13  55  37 277
Oct  29  54  68 525
Nov  20  87  82 577
Dec  17  35  61 401

Jan  21  36  64 620
Feb  26  58  80 652
Mar  24  75  70 495
Apr  21  70  74 514

[steven@localhost bash]$ awk '$1~/jan/' inventory-shipped

[steven@localhost bash]$ awk 'tolower($1)~/jan/' inventory-shipped
Jan  13  25  15 115
Jan  21  36  64 620

2)配置IGNORECASE变量为非0值
[steven@localhost bash]$ cat inventory-shipped
Jan  13  25  15 115
Feb  15  32  24 226
Mar  15  24  34 228
Apr  31  52  63 420
May  16  34  29 208
Jun  31  42  75 492
Jul  24  34  67 436
Aug  15  34  47 316
Sep  13  55  37 277
Oct  29  54  68 525
Nov  20  87  82 577
Dec  17  35  61 401

Jan  21  36  64 620
Feb  26  58  80 652
Mar  24  75  70 495
Apr  21  70  74 514

[steven@localhost bash]$ awk '$1~/jan/' inventory-shipped

[steven@localhost bash]$ awk 'BEGIN{IGNORECASE=1};$1~/jan/' inventory-shipped 
Jan  13  25  15 115
Jan  21  36  64 620


示例6 - 指定字段为固定长度
[steven@localhost bash]$ cat demo_01.txt
 10:06pm  up 21 days, 14:04,  23 users
User     tty       login  idle   JCPU   PCPU  what
hzuo     ttyV0     8:58pm            9      5  vi p24.tex
hzang    ttyV3     6:37pm    50                -csh
eklye    ttyV5     9:53pm            7      1  em thes.tex
dportein ttyV6     8:17pm  1:47                -csh
gierd    ttyD3    10:00pm     1                elm
dave     ttyD4     9:47pm            4      4  w
brent    ttyp0    26Jun91  4:46  26:46   4:41  bash
dave     ttyq4    26Jun9115days     46     46  wnewmail

[steven@localhost bash]$ cat example_01.txt
BEGIN{FIELDWIDTHS="9 6 10 6 7 7 35"}
NR>2{
    idle=$4
    sub(/^ +/,"",idle)
    if(idle=="")
        idle=0
    if(idle~/:/){
        split(idle,t,":")
        idle=t[1]*60+t[2]
    }
    if(idle~/days/)
        idle=idle*24*3600

    print $1,$2,idle
}

[steven@localhost bash]$ awk -f example_01.txt demo_01.txt
hzuo      ttyV0  0
hzang     ttyV3  50
eklye     ttyV5  0
dportein  ttyV6  107
gierd     ttyD3  1
dave      ttyD4  0
brent     ttyp0  286
dave      ttyq4  1296000


示例7 - 提取IP地址
[steven@192 ~]$ ip add | awk 'NR==9{split($2,f,"/");printf("ip address: %s\n",f[1])}'
ip address: 192.168.0.103


示例8 - 对列进行正则匹配
[steven@192 bash]$ cat demo_02.txt
Robbins Arnold "1234 A Pretty Street  NE" MyTown MyState 12345-6789 USA

[steven@192 bash]$ awk 'BEGIN{FPAT="([^ \t\n]+)|(\"[^\"]+\")"};{printf("NF= ",NF);for(i=1;i<=NF;i++){printf("$%d=<%s>\n",i,$i)}}' demo_02.txt
NF= $1=<Robbins>
$2=<Arnold>
$3=<"1234 A Pretty Street  NE">
$4=<MyTown>
$5=<MyState>
$6=<12345-6789>
$7=<USA>


示例9 - printf的使用
[steven@localhost bash]$ awk 'BEGIN{printf "%2$s %1$s\n", "panic", "don\47t"}'
don't panic

[steven@localhost bash]$ seq 0 10|awk '{printf("%-4d\n",$0)}'|cat -A
0   $
1   $
2   $
3   $
4   $
5   $
6   $
7   $
8   $
9   $
10  $

[steven@localhost bash]$ seq -2 10|awk '{printf("% d\n",$0)}'
-2
-1
 0
 1
 2
 3
 4
 5
 6
 7
 8
 9
 10

[steven@localhost bash]$ seq -2 10|awk '{printf("%+d\n",$0)}'
-2
-1
+0
+1
+2
+3
+4
+5
+6
+7
+8
+9
+10

[steven@localhost bash]$ seq 1000 1010|awk '{printf("%.0e\n",$0)}'
1e+03
1e+03
1e+03
1e+03
1e+03
1e+03
1e+03
1e+03
1e+03
1e+03
1e+03
[steven@localhost bash]$ seq 1000 1010|awk '{printf("%#.0e\n",$0)}'
1.e+03
1.e+03
1.e+03
1.e+03
1.e+03
1.e+03
1.e+03
1.e+03
1.e+03
1.e+03
1.e+03

[steven@localhost bash]$ seq 1000 1010|awk '{printf("%.0f\n",$0)}'
1000
1001
1002
1003
1004
1005
1006
1007
1008
1009
1010
[steven@localhost bash]$ seq 1000 1010|awk '{printf("%#.0f\n",$0)}'
1000.
1001.
1002.
1003.
1004.
1005.
1006.
1007.
1008.
1009.
1010.

[steven@localhost bash]$ seq 1000 1010|awk '{printf("%g\n",$0)}'
1000
1001
1002
1003
1004
1005
1006
1007
1008
1009
1010
[steven@localhost bash]$ seq 1000 1010|awk '{printf("%#g\n",$0)}'
1000.00
1001.00
1002.00
1003.00
1004.00
1005.00
1006.00
1007.00
1008.00
1009.00
1010.00

[steven@localhost bash]$ seq 1 10|awk '{printf("%o\n",$0)}'
1
2
3
4
5
6
7
10
11
12
[steven@localhost bash]$ seq 1 10|awk '{printf("%#o\n",$0)}'
01
02
03
04
05
06
07
010
011
012

[steven@localhost bash]$ seq 1 10|awk '{printf("%x\n",$0)}'
1
2
3
4
5
6
7
8
9
a
[steven@localhost bash]$ seq 1 10|awk '{printf("%#x\n",$0)}'
0x1
0x2
0x3
0x4
0x5
0x6
0x7
0x8
0x9
0xa

[steven@localhost bash]$ LC_ALL=C awk 'BEGIN { printf "%\47d\n", 1234567 }'
1234567
[steven@localhost bash]$ LC_ALL=en_US.UTF-8 awk 'BEGIN { printf "%\47d\n", 1234567 }'
1,234,567
[steven@localhost bash]$ LC_ALL=zh_CN.UTF-8 awk 'BEGIN { printf "%\47d\n", 1234567 }'
1,234,567


示例10 - 将print结果传递给shell命令
[steven@localhost bash]$ cat mail-list
Amelia       555-5553     amelia.zodiacusque@gmail.com    F
Anthony      555-3412     anthony.asserturo@hotmail.com   A
Becky        555-7685     becky.algebrarum@gmail.com      A
Bill         555-1675     bill.drowning@hotmail.com       A
Broderick    555-0542     broderick.aliquotiens@yahoo.com R
Camilla      555-2912     camilla.infusarum@skynet.be     R
Fabius       555-1234     fabius.undevicesimus@ucb.edu    F
Julie        555-6699     julie.perscrutabor@skeeve.com   F
Martin       555-6480     martin.codicibus@hotmail.com    A
Samuel       555-3430     samuel.lanceolis@shu.edu        A
Jean-Paul    555-2127     jeanpaul.campanorum@nyu.edu     R

[steven@localhost bash]$ awk 'BEGIN{sort="sort -r"};{print $1 | "sort -r"};END{close(sort)}' mail-list
Samuel
Martin
Julie
Jean-Paul
Fabius
Camilla
Broderick
Bill
Becky
Anthony
Amelia


示例11 - 将文件名修改为小写
[steven@localhost bash]$ ls
AWKVARS.OUT  DEMO_01.SH  DEMO_01.TXT  DEMO_02.TXT  DEMO_03.TXT  EXAMPLE_01.TXT  INVENTORY-SHIPPED  MAIL-LIST  SCORE-TABLE

[steven@localhost bash]$ ls -1|awk 'BEGIN{bash="bash"};{printf("mv %s %s\n",$0,tolower($0)) | bash};END{close(bash)}'

[steven@localhost bash]$ ls
awkvars.out  demo_01.sh  demo_01.txt  demo_02.txt  demo_03.txt  example_01.txt  inventory-shipped  mail-list  score-table


示例12 - 获取登录用户记录(第一行至倒数第三行的第一列)
[steven@www bash]$ last|awk 'BEGIN{FS=" +"};{line[NR]=$1};END{for(i=1;i<=NR-2;i++)print line[i]}'


示例13 - 合并所有非空行
awk '/^.+$/{if(NR==1) {printf $0} else {printf ","$0}}' <file>


示例14 - 跳过匹配行
[steven@www bash]$ cat mail-list
Amelia       555-5553     amelia.zodiacusque@gmail.com    F
Anthony      555-3412     anthony.asserturo@hotmail.com   A
Becky        555-7685     becky.algebrarum@gmail.com      A
Bill         555-1675     bill.drowning@hotmail.com       A
Broderick    555-0542     broderick.aliquotiens@yahoo.com R
Camilla      555-2912     camilla.infusarum@skynet.be     R
Fabius       555-1234     fabius.undevicesimus@ucb.edu    F
Julie        555-6699     julie.perscrutabor@skeeve.com   F
Martin       555-6480     martin.codicibus@hotmail.com    A
Samuel       555-3430     samuel.lanceolis@shu.edu        A
Jean-Paul    555-2127     jeanpaul.campanorum@nyu.edu     R

[steven@www bash]$ awk '/ali.*yahoo/{next};{print}' mail-list
Amelia       555-5553     amelia.zodiacusque@gmail.com    F
Anthony      555-3412     anthony.asserturo@hotmail.com   A
Becky        555-7685     becky.algebrarum@gmail.com      A
Bill         555-1675     bill.drowning@hotmail.com       A
Camilla      555-2912     camilla.infusarum@skynet.be     R
Fabius       555-1234     fabius.undevicesimus@ucb.edu    F
Julie        555-6699     julie.perscrutabor@skeeve.com   F
Martin       555-6480     martin.codicibus@hotmail.com    A
Samuel       555-3430     samuel.lanceolis@shu.edu        A
Jean-Paul    555-2127     jeanpaul.campanorum@nyu.edu     R


示例15 - 只读取文件的前两行
steven@steven-IRH8:~/demo/bash$ cat demo_01.txt
This is demo_01.txt
number 1
number 2
number 3

steven@steven-IRH8:~/demo/bash$ cat demo_02.txt
This is demo_02.txt
number 1
number 2
number 3

steven@steven-IRH8:~/demo/bash$ cat demo_03.txt
This is demo_03.txt
number 1
number 2
number 3

steven@steven-IRH8:~/demo/bash$ awk '{if(FNR==3)nextfile;else print $0}' demo_01.txt demo_02.txt demo_03.txt
This is demo_01.txt
number 1
This is demo_02.txt
number 1
This is demo_03.txt
number 1


示例16 - for循环
steven@steven-IRH8:~/demo/bash$ cat demo_01.txt
This is demo_01.txt
number 1
number 2
number 3

steven@steven-IRH8:~/demo/bash$ cat demo_02.txt
This is demo_02.txt
number 1
number 2
number 3

steven@steven-IRH8:~/demo/bash$ cat demo_03.txt
This is demo_03.txt
number 1
number 2
number 3

steven@steven-IRH8:~/demo/bash$ awk '{for(i=1;i<8;i++){if(NR==i)print $0}}' demo_01.txt demo_02.txt demo_03.txt
This is demo_01.txt
number 1
number 2
number 3
This is demo_02.txt
number 1
number 2


示例17 - switch语句
[steven@www bash]$ cat demo_01.txt
This is demo_01.txt
number 1
number 2
number 3

[steven@www bash]$ awk '{switch(NR){case 1: {print "This is line one"; break}; case 2: {print "This is line two"; break}; default: {print "This is additional line"; break}}}' demo_01.txt
This is line one
This is line two
This is additional line
This is additional line


示例18 - getline和next的差别
[steven@www bash]$ cat demo_01.txt
This is demo_01.txt
number 1
number 2
number 3

[steven@www bash]$ awk '{getline};{print $0}' demo_01.txt
number 1
number 3

[steven@www bash]$ awk '{next};{print $0}' demo_01.txt

[steven@www bash]$ awk '{print $0};{next}' demo_01.txt
This is demo_01.txt
number 1
number 2
number 3

[steven@www bash]$ awk '{print $0};{getline}' demo_01.txt
This is demo_01.txt
number 2


示例19 - cmd参数引用
[steven@www bash]$ awk 'BEGIN{for(i=0;i<ARGC;i++)print ARGV[i]}' inventory-shipped mail-list
awk
inventory-shipped
mail-list


示例20 - 多维数组
[steven@www bash]$ awk 'BEGIN{for(i=0;i<3;i++){for(j=0;j<4;j++)a[i][j]=i}; for(i=0;i<length(a);i++){for(j=0;j<length(a[i]);j++){printf a[i][j];printf " "};printf "\n"}}'
0 0 0 0
1 1 1 1
2 2 2 2



引用:
[1]GNU Awk User Guide: https://www.gnu.org/software/gawk/manual/gawk.html
