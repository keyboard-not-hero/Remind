sed - 对文本进行过滤和转换的流编辑器


描述
sed主要用于针对多个文件进行相同的修改操作
逐行读取内容到pattern space, 对当前行执行每个操作指令, 再切换到下一行


运行流程:
1.读取一行内容, 移除尾部换行符, 放入pattern space
2.执行操作指令
3.除非使用-n选项, 否则打印pattern space内容, 将移除的换行符添加回去
4.循环1/2/3步骤


   file                   sed                  standard output  
   ***************   1    *************        ***************
   * first line  * -----> *  script1  *        * first line  *
   * second line * -----> *     |     *   9    * second line *
   * third line  *   3    *     |2    * -----> * third line  *
   * fourth line *        *     v     *        * fourth line *
   * ...         *        *  script2  *        * ...         *
   ***************        *************        ***************     


语法
sed [option] [<script>] [<input_file> ...]


option参数
-b, --binary
    以二进制格式读取文本内容
    用于Windows/DOS/Cygwin类以\r\n为行结束的系统, 因为sed不能识别carriage return符号

--debug
    显示详细的信息

-e <script>, --expression=<script>
    指定操作指令
    当有多个指令时，每个指令必须搭配-e参数

-E, -r, --regexp-extended
    使用Extend Regular Expression(ERE)
    默认使用Basic Regular Expression(BRE)

-f <script_file>, --file=<script_file>
    从指定文件中读取操作指令

--follow-symlinks
    当目标文件为symbolic link时, 作用于实际内容文件
    默认断开symbolic link
    必须配合-i使用

-i[suffix], --in-place[=suffix]
    文本操作直接作用在文件内(in-place)
    默认结果输出到standard output
    可添加指定后缀suffix作为原文件内容备份, suffix的每个'*'符号代表原文件名

-l <n>, --line-length=<n>
    指定内容行长度
    默认为70
    指定为0时, 表示不限定行长度

-n, --quiet, --silent
    不显示所有内容
    默认显示所有内容(无论是否匹配)

--posix
    限定使用posix sed特性, 不使用GNU sed的额外拓展特性

-s, --separate
    将多个文件视为多个文本stream
    默认将多个文件视为一个长的文本steam

--sandbox
    使用沙盒模式, 该模式下不能使用e/w/r指令

-u, --unbuffered
    使用尽可能小的input/output buffer, 从而尽快获取结果

-z, --null-data, --zero-terminated
    将输入视为行列表, 并且行之间使用null('')符号分隔

--help
    帮助信息

--version
    版本信息



script
对内容执行的一系列操作

script语法:
<mode>[!]<process>

mode - 指定操作的行. 默认为所有行, 对应格式: 1,$
    格式1: address - 指定单行
    格式2: address1,address2 - 指定行范围
    格式3: address,+N - address到address+N行
    格式4: address,~N - address到最小的N的倍数. 如: 5,~4, 代表5,6,7,8
    address列表如下:
	<number> - 直接指定行号
	$ - 最后一行
	<first>~<step> - 指定第一行和步进. 如: 0~5, 代表5,10,15...行
	/<re>/ - 使用正则表达式匹配行. 默认使用Basic Regular Expression(BRE). //代表上次使用的正则匹配表达式
	\%<re>% - 与/<re>/相同, 并且%可替换为其他符号
	** /<re>/I和\%<re>%I代表忽略大小写的匹配
	** /<re>/,/<no_match>/和/<re>/,//都会持续到最后一行
	** /<outer_re>/{/<nest_re>/}, 地址嵌套, 需要outer_re和nest_re同时满足


! - 对mode取反


process - 对指定行的具体操作. 列表如下:
a <text>
    将文本append到匹配行之后(行)
    只适用于单行匹配，不适用于范围行
    多命令不适用';', 使用换行或-e

b <label>
    无条件跳转到label位置(类似于goto)
    需先使用:进行label标记

c <text>
    将匹配行的内容替换为指定文本
    多命令不适用';', 使用换行或-e

d
    删除pattern space中匹配行内容, 并直接开始读取下一行

D
    当匹配行中没有包含换行符时, 类似于指令d
    当匹配行中包含换行符时, 删除第一个换行符之前的内容(包括第一个换行符), 并直接开启下一轮操作(不读取新行)

e
    将匹配行的结果作为cmd执行, 并将结果覆盖匹配行内容

e <command>
    在匹配行之前(行), 添加command指令结果

F
    在匹配行之前(行), 显示匹配行所在文件名称

g
    将pattern space内容替换为hold space内容

G
    在pattern space中添加换行符, 并将hold space内容append到pattern space
	
h
    将hold space内容替换为pattern space内容

H
    在hold space中添加换行符, 并将pattern space内容append到hold space

i <text>
    将文本prepend到匹配行的之前(行)
    只适用于单行匹配，不适用于范围行
    多命令不适用';', 使用换行或-e

l
    打印匹配行内容, 并显示不可打印字符

n
    直接读取下一行
    被n读取的行, 不再被匹配

N
    添加换行符到匹配行, 并立即读取下一行内容添加到当前匹配行

p
    打印匹配行内容	

P
    打印第一个换行符之前的内容

q[exit_code]
    读取到匹配行后, 退出读取, 可指定退出码
    只接受指定行, 不接受范围行
    显示匹配行内容

Q[exit_code]
    读取到匹配行后, 退出读取, 可指定退出码
    只接受指定行, 不接受范围行
    不显示匹配行内容

r <file>
    读取指定文件的完整内容, 添加到匹配行之后(行)
    只适用于单行匹配，不适用于范围行
    后续操作只适用于原文件内容
    多命令不适用';', 使用换行或-e

R <file>
    每匹配一行, 从指定文件读取一行添加到匹配行之后
    多命令不适用';', 使用换行或-e

s/<regexp>/<replacement>/[flags]
    使用指定内容replacement内容替换符合正则regexp的内容
    '/'可被其他符号进行替换, 但必须三个'/'同时被替换为同一个符号
    replacement特殊符号:
	\<n> - 对regexp中子表达式的引用. 范围[1-9]
	& - regexp完整内容引用
	\L - 将后续字母全部转化为小写, 直到遇到\U或\E. GNU拓展
	\l - 将下一个字母转化为小写. GNU拓展
	\U - 将后续字母全部转化为大写, 直到遇到\L或\E. GNU拓展
	\u - 将下一个字母转化为大写. GNU拓展
	\E - 停止大小写转化. GNU拓展
    flags列表:
	g - 将替换作用于所有匹配regexp
	<n> - 只替换匹配的第n个regexp
	p - 如果该行进行替换, 则打印该行内容
	w <file> - 如果该行进行替换, 则将结果输出到指定文件
	e - 如果该行进行替换, 将结果作为shell指令执行. GNU拓展
	I/i - regexp不在乎大小写. GNU拓展
	M/m - regexp多行匹配模式. GNU拓展

t <label>
    当前行有替换成功操作时, 跳转到label

T <label>
    当前行没有替换成功操作时, 跳转到label

v [version]
    未指定version时, sed不支持GNU extension则报错
    指定version时, 该版本不可获得时进行报错 

w <file>
    将匹配行保存到指定文件
    指定文件未存在, 创建; 指定文件已存在, 覆盖原内容
    多命令不适用';', 使用换行或-e

W <file>
    将匹配行的第一个换行符之前的内容保存到指定文件
    多命令不适用';', 使用换行或-e

x
    交换pattern space和hold space内容

y/<src>/<dst>/
    字符级替换, 将src中的字符替换为dst中对应顺序的字符
    src与dst必须包含相同数量的字符

z
    清空匹配行内容	

#
    注释内容

{cmd;cmd ...}
    将多个指令作用于匹配行

=
    在匹配行的之前(行)插入行号

: <label>
    对当前位置进行标记label
    该指令不适用于指定address



示例1 - 替换指定字符串
[steven@localhost demo]$ cat list
John Daggett, 341 King Road, Plymouth MA
Alice Ford, 22 East Broadway, Richmond VA
Orville Thomas, 11345 Oak Bridge Road, Tulsa OK
Terry Kalkas, 402 Lans Road, Beaver Falls PA
Eric Adams, 20 Post Road, Sudbury MA
Hubert Sims, 328A Brook Road, Roanoke VA
Amy Wilde, 334 Bayshore Pkwy, Mountain View CA
Sal Carpenter, 73 6th Street, Boston MA

[steven@localhost demo]$ sed 's/MA/Massachusetts/' list
John Daggett, 341 King Road, Plymouth Massachusetts
Alice Ford, 22 East Broadway, Richmond VA
Orville Thomas, 11345 Oak Bridge Road, Tulsa OK
Terry Kalkas, 402 Lans Road, Beaver Falls PA
Eric Adams, 20 Post Road, Sudbury Massachusetts
Hubert Sims, 328A Brook Road, Roanoke VA
Amy Wilde, 334 Bayshore Pkwy, Mountain View CA
Sal Carpenter, 73 6th Street, Boston Massachusetts


示例2 - 替换多组字符串，执行多次操作
1)使用';'
[steven@localhost demo]$ sed 's/MA/Massachusetts/;s/VA/Vissa/' list
John Daggett, 341 King Road, Plymouth Massachusetts
Alice Ford, 22 East Broadway, Richmond Vissa
Orville Thomas, 11345 Oak Bridge Road, Tulsa OK
Terry Kalkas, 402 Lans Road, Beaver Falls PA
Eric Adams, 20 Post Road, Sudbury Massachusetts
Hubert Sims, 328A Brook Road, Roanoke Vissa
Amy Wilde, 334 Bayshore Pkwy, Mountain View CA
Sal Carpenter, 73 6th Street, Boston Massachusetts

2)使用换行符
[steven@localhost demo]$ sed 's/MA/Massachusetts/
> s/VA/Vissa/' list
John Daggett, 341 King Road, Plymouth Massachusetts
Alice Ford, 22 East Broadway, Richmond Vissa
Orville Thomas, 11345 Oak Bridge Road, Tulsa OK
Terry Kalkas, 402 Lans Road, Beaver Falls PA
Eric Adams, 20 Post Road, Sudbury Massachusetts
Hubert Sims, 328A Brook Road, Roanoke Vissa
Amy Wilde, 334 Bayshore Pkwy, Mountain View CA
Sal Carpenter, 73 6th Street, Boston Massachusetts

3)使用-e参数
[steven@localhost demo]$ sed -e 's/MA/Massachusetts/' -e 's/VA/Vissa/' list
John Daggett, 341 King Road, Plymouth Massachusetts
Alice Ford, 22 East Broadway, Richmond Vissa
Orville Thomas, 11345 Oak Bridge Road, Tulsa OK
Terry Kalkas, 402 Lans Road, Beaver Falls PA
Eric Adams, 20 Post Road, Sudbury Massachusetts
Hubert Sims, 328A Brook Road, Roanoke Vissa
Amy Wilde, 334 Bayshore Pkwy, Mountain View CA
Sal Carpenter, 73 6th Street, Boston Massachusetts


示例3 - 使用脚本文件进行操作
[steven@localhost demo]$ cat list
John Daggett, 341 King Road, Plymouth MA
Alice Ford, 22 East Broadway, Richmond VA
Orville Thomas, 11345 Oak Bridge Road, Tulsa OK
Terry Kalkas, 402 Lans Road, Beaver Falls PA
Eric Adams, 20 Post Road, Sudbury MA
Hubert Sims, 328A Brook Road, Roanoke VA
Amy Wilde, 334 Bayshore Pkwy, Mountain View CA
Sal Carpenter, 73 6th Street, Boston MA

[steven@localhost demo]$ cat sedscript
s/ PA/, Pennsylvania/
s/ OK/, Oklahoma/

[steven@localhost demo]$ sed -f sedscript list
John Daggett, 341 King Road, Plymouth MA
Alice Ford, 22 East Broadway, Richmond VA
Orville Thomas, 11345 Oak Bridge Road, Tulsa, Oklahoma
Terry Kalkas, 402 Lans Road, Beaver Falls, Pennsylvania
Eric Adams, 20 Post Road, Sudbury MA
Hubert Sims, 328A Brook Road, Roanoke VA
Amy Wilde, 334 Bayshore Pkwy, Mountain View CA
Sal Carpenter, 73 6th Street, Boston MA


示例4 - 不显示所有行，只显示被操作的行
[steven@localhost demo]$ sed -n -e 's/MA/Massachusetts/p' list
John Daggett, 341 King Road, Plymouth Massachusetts
Eric Adams, 20 Post Road, Sudbury Massachusetts
Sal Carpenter, 73 6th Street, Boston Massachusetts


示例5 - 删除空白行(包括只有空格和制表符的行)
[steven@localhost demo]$ cat -A delete_blank
first line$
$
second line$
   $
third line$
^I$
fourth line$
  ^I$
fifth line$

[steven@localhost demo]$ sed '/^[ \t]*$/d' delete_blank
first line
second line
third line
fourth line
fifth line


示例6 - 对同时包含#/beautiful/love的行进行删除
[steven@localhost demo]$ cat group_script
/#/{ /beautiful/ {/love/d} }

[steven@localhost demo]$ cat group_add
# beautiful love
# beautiful like
beautiful
# wonderful
wonderful

[steven@localhost demo]$ sed -f group_script group_add
# beautiful like
beautiful
# wonderful
wonderful


示例7 - 在匹配行的上一行添加内容
[steven@localhost demo]$ cat demo_01.txt
love you

like you

touch you

only you

[steven@localhost demo]$ sed '/like/i catch you' demo_01.txt
love you

catch you
like you

touch you

only you


示例8 - 在匹配行的下一行添加内容
[steven@localhost demo]$ cat demo_01.txt
love you

like you

touch you

only you

[steven@localhost demo]$ sed '/like/a catch you' demo_01.txt
love you

like you
catch you

touch you

only you


示例9 - 将匹配行的内容进行替换
[steven@localhost demo]$ cat demo_01.txt
love you

like you

touch you

only you

[steven@localhost demo]$ sed '/like/c tag' demo_01.txt
love you

tag

touch you

only you


示例10 - 显示匹配行内容, 并显示不可打印字符
[steven@localhost demo]$ sed -n 'l' demo_01.txt
love you$
\t$
like you$
$
touch you$
$
only you$


示例11 - 显示行号
[steven@localhost demo]$ sed -n '/love/,/like/{=;p}' demo_01.txt
1
love you
2

3
like you


示例12 - 当匹配行的下一行为空行时, 进行删除
[steven@localhost demo]$ cat demo_01.txt
love you

like you

touch you

only you

[steven@localhost demo]$ sed '/you/{n;/^$/d}' demo_01.txt
love you
like you
touch you
only you

[steven@localhost demo]$ sed '/you/{n;n;n;/^$/d}' demo_01.txt
love you

like you
touch you

only you


示例13 - 在指定行后插入其他文件内容
[steven@localhost demo]$ cat demo_01.txt
love you

like you

touch you

only you

[steven@localhost demo]$ cat demo_02.txt

alice dream

[steven@localhost demo]$ sed '$r demo_02.txt' demo_01.txt
love you

like you

touch you

only you

alice dream


示例14 - 将指定文件的匹配行，保存到其他文件
[steven@localhost demo]$ cat demo_02.txt
love you

like you

touch you

only you

[steven@localhost demo]$ sed -n '/you/w demo_03.txt' demo_01.txt

[steven@localhost demo]$ cat demo_03.txt
love you
like you
touch you
only you


示例15 - 读取行的跳转
[steven@localhost demo]$ cat demo_01.txt
love me

like me

touch me

only me

[steven@localhost demo]$ sed ': tag;n;n;s/me/you/' demo_01.txt
love me

like you

touch me

only me

[steven@localhost demo]$ sed ': tag;n;n;b tag;s/me/you/' demo_01.txt
love me

like me

touch me

only me


示例16 - 将匹配行的内容作为cmd执行, 并使用执行结果替换匹配行内容
[steven@localhost demo]$ cat demo_01.txt
love me

ls

touch me

only me

[steven@localhost demo]$ sed '/ls/e' demo_01.txt
love me

bash
bookwords
circle-01
delete_blank
demo_01.txt
demo_01.txt.bak
demo_02.txt
demo_03.txt
demo_04.txt
demo_04.txt}
example
group_add
group_script
list
sedscript
summary

touch me

only me


示例17 - N/D/P的综合应用
[steven@localhost demo]$ cat demo_01.txt
love you
like you
touch you
only you
like her

[steven@localhost demo]$ sed 'N;l;D' demo_01.txt
love you\nlike you$
like you\ntouch you$
touch you\nonly you$
only you

原理:
1.匹配行添加\n, 读取下一行内容(无论是否匹配行)
2.显示当前内容
3.删除第一个\n之前的内容(包括\n)

[steven@localhost demo]$ sed -n 'N;N;l;D' demo_01.txt
love you\nlike you\ntouch you$
like you\ntouch you\nonly you\nlike her$

原理:
1.添加\n, 读取下一行内容(无论是否匹配行)
2.添加\n, 读取下一行内容
3.显示当前内容
4.删除第一个\n之前的内容(包括\n)

[steven@localhost demo]$ sed -n 'N;N;P;D;D;D' demo_01.txt
love you
like you


示例18 - 读取指定文件内容, 添加到匹配行之后
[steven@localhost demo]$ cat demo_01.txt
love you
like you
touch you
only you
like her

[steven@localhost demo]$ cat demo_02.txt
character
short integer
integer
long integer

[steven@localhost demo]$ sed 'r demo_02.txt' demo_01.txt
love you
character
short integer
integer
long integer
like you
character
short integer
integer
long integer
touch you
character
short integer
integer
long integer
only you
character
short integer
integer
long integer
like her
character
short integer
integer
long integer

[steven@localhost demo]$ sed 'R demo_02.txt' demo_01.txt
love you
character
like you
short integer
touch you
integer
only you
long integer
like her


示例19 - 字符大小写转化
[steven@localhost demo]$ cat demo_01.txt
love you
like you
touch you
only you
like her

[steven@localhost demo]$ sed 's/\(li\)\(ke\)/\U\1\E\2/' demo_01.txt
love you
LIke you
touch you
only you
LIke her


示例20 - 持续替换字符
[steven@localhost demo]$ cat demo_01.txt
9999999
699999
89999999
299999

[steven@localhost demo]$ sed ':d ; s/9\(_*\)/_\1/ ; td' demo_01.txt
_______
6_____
8_______
2_____



最后编辑于: 2025-01-08
