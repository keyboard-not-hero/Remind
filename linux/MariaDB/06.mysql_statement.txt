提示符类型:
mysql> - 首行提示符
->     - 多行查询的非首行提示符
'>     - 多行查询的非首行提示符, 并需要字符串起始'对应的结束符'
''>    - 多行查询的非首行提示符, 并需要字符串起始"对应的结束符"
`>     - 多行查询的非首行提示符, 并需要标志结束`对应的结束符`
/*     - 多行查询的非首行提示符, 并需要注释起始/*对应的结束符*/



MySQL指令
数据库
create [or replace] {database | schema} [if not exist] <DB_NAME> <create_specification>;
	创建数据库, schema与database意思相同. 参考: https://mariadb.com/kb/en/create-database/
	
	create_specification:
		[default] character set [=] <charset_name>
		| [default] collation [=] <collation_name>
		| comment [=] '<comment>'


alter {database | schema} <DB_NAME> <alter_specification>
	修改数据库. 参考: https://mariadb.com/kb/en/alter-database/
	
	alter_specification:
		[default] character set [=] <charset_name>
		| [default] collation [=] <collation_name>
		| comment [=] '<comment>'


show {databases | scheams} [like '<pattern>' | where <expr>];
	查看已有数据库

use <DB_NAME>
	访问指定数据库



表格
show [full] tables [from <db_name>] [like '<pattern>' | where <expr>];
	查看数据库中的非temporary表格/sequences/views

	full
		在名称列之外, 新增加一列指明table类型


create [or replace] [temporary] table [if not exists] <TAB_NAME> (
	<col_name> <column_definition>,
	...
)
	[<table_options>]
	[<partition_options>];
	创建表格. 参考: https://mariadb.com/kb/en/create-table/

	or replace
		等于如下:
		drop table if exists <table_name>;
		create table <table_name>(<item_definition>);

	temporary
		临时表格, 只用于当前session, session结束后进行drop

	<column_definition>:
		<data_type> 
		[not null | null] 
		[default <default_value> | (<expression>)]
		[on update [now | current_timestamp] [(<precision>)]]
		[auto_increment]
		[zerofill]
		[unique [key] | [primary] key]
		[invisible]
		[{with | without} system versioning]
		[comment '<comment>']
		[ref_system_id = <value>]
		
		not null | null
			确定列内容是否可以为null. 默认为null

		default <default_value> | (<expression>)
			指定列的默认值

		auto_increment
			用于数字类型列, 没有提供值时自动提供并增长
			该列必须为key, 一个表格只能有一个auto_increment列
			该值由last_insert_id()返回

		zerofill
			作用于数字类型列时, 列设置为unsigned, 并且使用0填充有效位

		unique [key] | [primary] key
			unique key代表该列的每一个值都不同, 但可以有多个null
			primary key是特殊的unique key, 每个表最多只能有一个primary key, 并且隐式设置为not null

		invisible
			指定列不可见. MariaDB 10.3.3引入

	<table_options>:
		格式为: <option_name>=<option_value>,[<option_name>=<option_value> ...], 参数列表如下:
		[storage] engine [=] <engine_name>
		| auto_increment [=] <value>
		| [default] character set [=] <character_set>
		| checksum [=] {0 | 1}
		| [default] collation [=] <collation>
		| comment [=] '<comment>'


alter
	[online]
	[ignore]
	table [if exists] <table_name>
	[wait <n> | nowait]
	<alter_specification> [,<alter_specification>] ...
	修改表格metadata内容

	<alter_specification>:
		add [column] [if not exists] <col_name> <column_definition> [first | after <column>]
		| add [column] [if not exists] (<col_name> <column_definition>, ...)
		| change [column] [if exists] <old_col_name> <new_col_name> <column_definition> [first | after <col_name>]
		| modify [column] [if exists] <col_name> <col_definition> [first | after <col_name>]
		| drop [column] [if exists] <col_name> [restrict | cascade]
		| rename [to] <new_table_name>
		| rename column <old_col_name> to <new_col_name>

		<column_definition>:
			参考create table


show create table <TAB_NAME>;
	显示创建表格的语句


describe <TAB_NAME>
	显示表格metadata信息	


load data [low_priority | concurrent] [local] infile '<FILE_NAME>' 
	[replace | ignore]
	into table <TAB_NAME>
	[character set <charset>]
	[{fields | columns} 
		[terminated by <str>]
		[[optionally] enclosed by <str>]
		[escaped by <str>]
	]
	[lines
		[starting by <str>]
		[terminated by <str>]
	]
	[ignore <num> lines]
	[(col_name_or_user_var, ...)]
	[set <col_name>=<expr>, ...]
	从文件内加载数据到表格. 变量local_infile控制是否能使用该语句

	low_priority | concurrent
		当执行表格级locking时(适用于MyISAM/MEMORY/MERGE引擎), 同时有其他客户端发起读取请求, 有如下两种解决方案:
		low_priority - 插入请求优先级低, 等待其他客户端读取完成再插入 
		concurrent - 插入与读取同时进行. 只适用于MyISAM引擎
	
	local
		未指定时, 从服务器查找文件
		指定时, 从客户端查找文件

	replace | ignore
		当表格中包含primary key时, 插入内容与表格内容的primary key冲突, 会出现两种解决方法:
		replace - 删除原来内容, 使用新内容替换
		ignore - 保留原来内容, 忽略插入请求


insert
	[low_priority | delayed | high_priority]
	[ignore] 
	[into] <TAB_NAME> 
	[partition (<partition_list>)] 
	[(<col_name>, ...)]
	{values | value} (value, ...), ...
	[on duplicate key update <col> = <value> [,<col> = <value>] ...]
	[returning <select_expr> [,<select_expr>] ...]
	插入值到表格中

	low_priority | high_priority
		当执行表格级locking时(适用于MyISAM/MEMORY/MERGE引擎), 同时有其他客户端发起读取请求, 有如下解决方案:
		low_priority - 插入请求优先级低, 等待其他客户端读取完成再插入 
		high_priority - 插入请求优先级高, 队伍中的读取任务等待插入任务完成

	delayed
		将所有客户端的插入请求进行合并, 最后汇总插入. 合并过程发生在内存中, 插入过程出现error, 则表内无新增内容

	ignore
		默认出现error时, 事务进行回滚, 所有插入无效. ignore代表将error转化为warning, 其他插入行正常插入

	on duplicate key update <col> = <value> [,<col> = <value>] ...
		当插入的unique key与表内重复, 更新指定列的值


select ... into outfile '<file_name>'
	[character set <character_name>]
	[<export_option>]
	从表格中提取内容到文件

	file_name
		file_name必须不存在, 不能进行覆盖

	export_option:
		[{fields | columns}
			[terminated by '<str>']
			[[optionally] enclosed by '<str>']
			[escaped by '<str>']
		]
		[lines
			[starting by '<str>']
			[terminated by '<str>']
		]
		fields terminated by指定字段分隔符, 默认为'\t'
		lines terminated by指定行分隔符, 默认为'\n'


select 
	[all | distinct | distinctrow] 
	[high_priority] 
	[straight_join] 
	[sql_small_result]
	[sql_big_result]
	[sql_buffer_result]
	[sql_cache | sql_no_cache]
	[sql_calc_found_rows]
	<select_expr> [,<select_expr> ...]
	[from <table_reference>
		[where <where_condition>]
		[group by {<col_name> | <expr> | <position>} [asc | desc], ... [with rollup]]
		[having <where_condition>]
		[order by {<col_name> | <expr> | <position>} [asc | desc], ...]
		[limit {[<offset>,] <row_count> | <row_count> offset <offset>}]
		<procedure> | [procedure <procedure_name>(<argument_list>)]
		[into outfile '<file_name>' [character set <charset_name>] [<export_options>]
			into dumpfile '<file_name>' into <var_name> [,<var_name>]
		]
		[[for update | lock in share mode] [wait <num> | nowait]]
	]
	从表格中查找内容. 参考: https://mariadb.com/kb/en/select/
	
	all | distinct | distinctrow
		all代表允许重复内容, 默认选项
		distinct代表不允许重复内容. distinctrow相同

	<select_exp>
		[<table_name>.]<col_name>
		| <function> and <operators>
		| *
		| <table_name>.*
		*代表from子句后所有表格的所有列
		<table_name>.*代表指定表格的所有列

	<table_reference>:
		<table_factor>
		| <join_table>

		<table_factor>:
			<table_name>

		<join_table>:
			<table_name> [inner | cross] join <table_name> [<join_condition>]
			| <table_name> straight_join <table_name> [on <conditional_expr>]
			| <table_name> {left | right} [outer] join <table_name> <join_condition>
			| <table_name> natural [{left | right} [outer]] join <table_name>

			<join_condition>
				on <condiftion_expr>
				| using (<column_list>)

	group by {<col_name> | <expr> | <position>} [asc | desc], ... [with rollup]
		根据单个或多个列进行分类并排序
		
		position
			代表指定第n列
	
		asc | desc
			排序方式. 默认为asc升序

		with rollup
			增加一个汇总行. 不能与order by一起使用
		
	having <where_condition>
		对group by之后的内容进行筛选
		where子句对group by之前的内容进行筛选

	order by {<col_name> | <expr> | <position>} [asc | desc], ...
		对结果进行排序

	limit {[<offset>,] <row_count> | <row_count> offset <offset>}
		只提取结果的前row_count行
		当提供offset时, 提取偏移offset行之后的row_count行


delete
	[low_priority]
	[quick]
	[ignore] 
	from <TAB_NAME>
	[partition (<partition_list>)]
	[where <where_condition>]
	[order by ...]
	[limit <row_count>]
	[returning <select_expr> [,<select_expr>] ...]
	从表格中删除内容

	low_priority
		在所有select完成后, 才执行delete

	quick
		停止合并操作, 以提升执行效率

	ignore
		不停止一般性error, 继续后续操作

	order by
		将结果排序, 按排序顺序进行删除. 只能用于单个表格


update
	[low_priority]
	[ignore]
	<table_reference>
	[partition (partition_list)]
	set <col1>={<expr1> | default} [,<col2>={<expr2> | default}] ...
	[where <where_condition>]
	[order by ...]
	[limit <row_count>]
	更新表格中符合条件的行内容


source <DB_file>;
	使用脚本内的查询语句



账户
create [or replace] user [if not exists] 
	<user_specification> [,<user_specification> ...]
	[require {none | <tls_option> [[AND] <tls_option> ...]}]
	[with <resource_option> [<resource_option> ...]]
	[<lock_option>]
	[<password_option>];
	创建账户, 插入无权限用户到mysql.user table
	or replace内容如下: drop user if exists <name>; create user <name> ...;
	if not exists提供时: 当用户已存在, 使用warning代替默认的error

	<user_specification>
		<account_info> [<authentication_option>]

		<account_info>
			<user_name>[@<host_name>]
			user_name提供''时, 代表anonymous用户, 即匹配任意用户名
			host_name未提供时, 默认为%, 即任意多个字符, 代表所有主机可连接

		<authentication_option>
			identified by '<passwd>' 
			| identified by password '<encrypt_passwd>'
			| identified {via|with} <authentication_rule> [or <authentication_rule> ...]
			passwd代表明文密码; encrypt_passwd代表经过password()函数转化的密码

			<authentication_rule>
				<authentication_plugin>
				| <authentication_plugin> {using|as} '<authentication_string>' 
				| <authentication_plugin> {using|as} password('<passwd>')
				<authentication_plugin>为插件名称. 
				当old_passwords变量为0时, 新建用户默认使用mysql_native_password,否则使用mysql_old_password
				初始化root用户默认使用unix_socket, 本地登录利用Unix sock, 实现system root用户免密码登陆, 失败后使用mysql_native_password
				mysql_native_password也用于password()函数
				** 查看plugin是否已安装: show plugins

	<tls_option>
		ssl
		| x509
		| cipher '<cipher>'
		| issuer '<issuer>'
		| subject '<subject>'
		ssl代表必须使用tls, 但x509证书非必要. 不能与其他选项联合
		x509必须使用x509证书(隐式包含tls). 不能与其他选项联合
		cipher必须使用tls, 但x509非必须, 并且证书必须使用指定证书等级(TLSv1/TLSv1.1/TLSv1.2/TLSv1.3)加密. 可以与subject/issuer联合
		issuer必须使用x509证书, 证书必须指定issuer字段. 可以与cipher/subject联合
		subject必须使用x509证书, 证书必须指定subject字段. 可以与cipher/issuer联合

	<resource_option>
		max_queries_per_hour <count>
		| max_updates_per_hour <count>
		| max_connections_per_hour <count>
		| max_user_connections <count>
		| max_statement_time <count>
		max_queries_per_hour代表该账号每小时最大查询次数(包括update)
		max_updates_per_hour代表该账号每小时最大更新次数(不包括select)
		max_connections_per_hour代表该账号每小时能发起的连接次数
		max_user_connections代表该账号能同时发起的连接数. 如果为0, 则使用max_connections
		max_statement_time代表账号语句执行的超时时间
		** 所有参数, 0代表无限制

	<password_option>
		password expire
		| password expire default
		| password expire never
		| password expire interval <N> day
		default代表使用变量default_password_lifetime来指定密码过期时间

	<lock_option>
		account lock
		| account unlock
		lock代表锁定账户, 已存在连接不影响, 不能发起连接. 向服务器的lock账号发起连接, 会出现ER_ACCOUNT_HAS_LOCKED错误


show create user <user_specification>;
	查看创建用户时的详细指令


alter user [if exists] 
	<user_specification> [,<user_specification> ...]
	[require {none | <tls_option> [[and] <tls_option> ...]}]
	[with <resource_option> [<resource_option> ...]]
	[<lock_option>]
	[<password_option>];
	修改账户内容, 参考create user


drop user [if exists] <user_specification> [,<user_specification> ...];
	删除账户, 参考create user
	当删除时, 当前账号包含已存在连接, 会等待所有连接关闭后再删除, 不会直接断开连接


grant
	<priv_type> [(<column_list>)] [,<priv_type> [(<column_list>)] ...]
	on [<object_type>] <priv_level>
	to <user_specification> [<user_options> ...];
	给指定账户赋予权限. 账户不存在时隐式创建账号

	<priv_type>
		授予的权限类型, 列表如下:
			usage - 无实际权限, 占位. 创建账户时默认
			all privileges - 授予所有权限. 可缩写为all
			proxy - 当前用户信息显示为代理用户, 需要authentication plugin的支持, 默认的mysql_native_password不支持, 当前仅pam支持. 如: current_user()方法
			数据库权限:
			create - 创建数据库和表格
			create routine - 创建function/procedure
			create temporary tables - 创建临时表格
			drop - 删除数据库和表格
			event - 创建/删除/修改event
			lock tables - 锁住表格, 必须同时拥有select权限
			表格权限:
			alter - 修改表格
			create - 创建表格
			create view - 创建view
			delete - 从表格中删除数据
			delete history - 删除历史行
			drop - 删除表格/view
			index - 创建索引
			insert - 插入行到表格
			select - 从表格中检索数据
			show view - 查看创建view的语句
			trigger - 创建/删除trigger
			update - 更新表格. 必须同时有select权限, 用于where子句
			
	<column_list>
		某表格指定列(或多个列). 用于对表格的限定列操作

	<object_type>
		table
		| function
		| procedure
	
	<priv_level>
		*
		| *.*
		| db_name.*
		| db_name.tbl_name
		| tbl_name
		| db_name.routine_name
		*.*代表可以操作所有数据库的所有表格
		db_name.*代表可以操作指定数据库的所有表格
			*代表操作默认数据库的所有表格
		db_name.tbl_name代表可以操作指定数据库的指定表格
			tbl_name代表可以操作默认数据库的指定表格
		db_name.routine_name配合function或procedure可以对指定数据库执行名为routine的function/procedure

	<user_specification>
		<account_info> [<authentication_option>]

		<account_info>
			<user_name>[@<host_name>]
			user_name提供''时, 代表anonymous用户, 即匹配任意用户名
			host_name未提供时, 默认为%, 即任意多个字符, 代表所有主机可连接

		<authentication_option>
			identified by '<passwd>' 
			| identified by password '<encrypt_passwd>'
			| identified {via|with} <authentication_rule> [or <authentication_rule> ...]
			passwd代表明文密码; encrypt_passwd代表经过password()函数转化的密码

			<authentication_rule>
				<authentication_plugin>
				| <authentication_plugin> {using|as} '<authentication_string>' 
				| <authentication_plugin> {using|as} password('<passwd>')
				<authentication_plugin>为插件名称. 
				当old_passwords变量为0时, 新建用户默认使用mysql_native_password,否则使用mysql_old_password
				初始化root用户默认使用unix_socket, 本地登录利用Unix sock, 实现system root用户免密码登陆, 失败后使用mysql_native_password
				mysql_native_password也用于password()函数
				** 查看plugin是否已安装: show plugins
	
	<user_options>
		[require {none | <tls_option> [[AND] <tls_option> ...]}]
		[with <with_option> [<with_option> ...]]
		
		<tls_option>
			ssl
			| x509
			| cipher '<cipher>'
			| issuer '<issuer>'
			| subject '<subject>'
			ssl代表必须使用tls, 但x509证书非必要. 不能与其他选项联合
			x509必须使用x509证书(隐式包含tls). 不能与其他选项联合
			cipher必须使用tls, 但x509非必须, 并且证书必须使用指定证书等级(TLSv1/TLSv1.1/TLSv1.2/TLSv1.3)加密. 可以与subject/issuer联合
			issuer必须使用x509证书, 证书必须指定issuer字段. 可以与cipher/subject联合
			subject必须使用x509证书, 证书必须指定subject字段. 可以与cipher/issuer联合
		
		<with_option>
			grant option
			| <resource_option>
			grant option代表可以拥有给其他账户授权的权利. 但必须基于自身拥有的privileges

			<resource_option>
				max_queries_per_hour <count>
				| max_updates_per_hour <count>
				| max_connections_per_hour <count>
				| max_user_connections <count>
				| max_statement_time <count>
				max_queries_per_hour代表该账号每小时最大查询次数(包括update)
				max_updates_per_hour代表该账号每小时最大更新次数(不包括select)
				max_connections_per_hour代表该账号每小时能发起的连接次数
				max_user_connections代表该账号能同时发起的连接数. 如果为0, 则使用max_connections
				max_statement_time代表账号语句执行的超时时间
				** 所有参数, 0代表无限制


show grants [for <user_specification>];
	查看账户授权情况


rename user <old_user_specification> to <new_user_specification> [,<old_user_specification> to <new_user_specification> ...]
	重命名账户


revoke
    <priv_type> [(<column_list>)] [,<priv_type> [(<column_list>)] ...]
    on [<object_type>] <priv_level>
    from <user_specification> [, <user_specification> ...]
	撤销用户权限. 参数参考grant


set password [for <user_specification>] =
		password('<passwd_str>')
		| old_password('<passwd_str>')
		| '<encrypted passwd>';
	为已创建的用户设置密码
	for子句未提供时, 为当前用户设置密码
	password()适用于MariaDB 4.0.0及以上版本
	old_password()适用于MariaDB 4.0.0以下版本
	encrypted_passwd代表已使用password()加密的字符串
	


变量
1.global server变量 - 影响后续创建session, 已存在session不影响
set global <variable>=<value>;
	设置全局变量

show global variables like '%<str>%';
	查询匹配全局变量

2.session server变量 - 只影响当前连接session
set session <variable>=<value>;
	设置当前session变量

show session variables like '%<str>%';
	查询匹配当前session变量

3.user-defined变量 - 自定义变量, 只存在于当前连接session
set @<variable>=<value>;
	配置用户自定义变量

select (@<variable>:=<value>);
	配置自定义变量



function(用于select语句):
count(column)
	计算指定列的行数

curdate()
	当前日期

database()
	当前使用的数据库

last_insert_id()
	最近一次插入的auto_increment值, 该方法与连接相关, 只返回当前连接的最后一次插入值

max(column)
	指定列的最大值

timestampdiff(diff_basic, date1, date2)
	时间根据diff_basic差异进行计算

user()
	当前登录用户

version()
	版本信息



数据类型:
boolean
	1 bit整数. 同tinyint(1)

tinyint[(M)] [unsigned]
	1字节整数. M代表bit数, 不超过8 bit. unsigned为非符号整数

smallint[(M)] [unsigned]
	2字节整数

mediumint[(M)] [unsigned]
	3字节整数

int[(M)] [unsigned]
	4字节整数
	同integer

bigint[(M)] [unsigned]
	8字节整数

decimal[(M[,D])] [unsigned]
	小数
	M为有效位数, 默认为10. 最高65位
	D为小数后的位数, 默认为0. MariaDB 10.2.1之前最高30位, MariaDB 10.2.1及之后最高38位
	同dec/numeric/fixed

float[(M,D)] [unsigned]
	单精度浮点数
	
double[(M,D)] [unsigned]
	双精度浮点数
	同real
	单精度浮点数
	
char[(M)]
	定长字符
	M范围为0-255

varchar(M)
	变长字符
	M代表最大字符长度

text[(M)]
	变长字符
	M范围为0-65535

enum(val1, val2, ...)
	枚举类型

date
	日期

time
	时间

datetime
	日期和时间



MySQL特性:
1.MySQL语法不在乎大小写
2.数据库名称在乎大小写
3.语句以';'/'\g'/'\G'结尾
4.'\c'代表退出执行当前输入语句
5.interactive下的指令保存到~/.mysql_history
