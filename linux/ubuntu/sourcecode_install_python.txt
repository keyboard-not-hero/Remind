ubuntu官方packages列表：
packages.ubuntu.com


python3编译：
1.必要环境安装
steven@steven:~$ sudo apt-get install zlib1g-dev libffi-dev libbz2-dev libncurses5-dev libgdbm-dev libgdbm-compat-dev liblzma-dev libsqlite3-dev uuid-dev libreadline-dev gcc make


2.openssl编译
steven@steven:~$ curl -O https://www.openssl.org/source/openssl-3.1.1.tar.gz

下载参考列表: https://www.openssl.org/source/

# 安装前提环境(perl版本至少为5.10.0)
1)make
2)gcc
3)perl 5 and core
4)perl module `Text::Template`
steven@steven:~$ sudo apt install perl

steven@steven:~$ sudo apt search Text::Template

steven@steven:~$ sudo apt install libtext-template-perl

# 安装
steven@steven:~$ tar -zxvf openssl-3.1.1.tar.gz -C /tmp

steven@steven:~$ cd /tmp/openssl-3.0.5/

# configure
steven@steven:~$ ./Configure --prefix=/usr/local/openssl -Wl,-rpath,/usr/local/ssl/lib
# -Wl,-rpath指定openssl搜寻动态库的路径(rpath)
#Shared objects are searched for in this order:
#    1. Using directories specified in rpath(-Wl,-rpath,<path>)
#    2. Using the environment variable LD_LIBRARY_PATH
#    3. Using directories specified in runpath(-Wl,--enable-new-dtags,-path,<path>)
#    4. Using system shared object caches and default directories

steven@steven:~$ make -j16

steven@steven:~$ sudo make install

steven@steven:~$ sudo mkdir -p /usr/local/ssl/lib

steven@steven:~$ sudo cp libssl.so.3 /usr/local/ssl/lib

steven@steven:~$ sudo cp libcrypto.so.3 /usr/local/ssl/lib

# 验证rpath
steven@steven:~$ readelf /usr/local/bin/openssl -d | grep path
0x000000000000000f (RPATH)              Library rpath: [/usr/local/ssl/lib]


3.tcl/tk编译
下载地址: http://www.tcl.tk/software/tcltk/download.html

steven@steven:~$ tar -zxf tcl8.6.10-src.tar.gz -C /tmp

steven@steven:~$ cd /tmp/tcl8.6.10/unix

steven@steven:~$ ./configure

steven@steven:~$ make -j16

steven@steven:~$ sudo make install

------------------------------------------------------------

steven@steven:~$ tar -zxf tk8.6.10-src.tar.gz -C /tmp

steven@steven:~$ cd /tmp/tk8.6.10/unix

steven@steven:~$ sudo apt-get install libx11-dev

steven@steven:~$ ./configure

steven@steven:~$ make -j16

steven@steven:~$ sudo make install

steven@steven:~$ sudo ldconfig


4.编译python
下载python
下载地址: https://www.python.org/downloads/source/
steven@steven:~$ curl -O https://www.python.org/ftp/python/3.11.4/Python-3.11.4.tar.xz

steven@steven:~$ tar -Jxf Python-3.11.4.tar.xz -C /tmp

# 试编译
steven@steven:~$ cd /tmp/Python3.11.4

steven@steven:~$ ./configure --prefix=/usr/local/python --with-openssl-rpath=/usr/local/ssl/lib

steven@steven:~$ make -j16

steven@steven:~$ sudo make install

steven@steven:~$ sudo chown -R steven:steven /usr/local/python

steven@steven:~$ sudo ln -s /usr/local/python/bin/python3.11 /usr/bin/python

steven@steven:~$ sudo ln -s /usr/local/python/bin/pip3.11 /usr/bin/pip
** warning: 使用python/pip指令名称，与系统自带python3版本区分



报错集：
1.subprocess.CalledProcessError: Command '('lsb_release', '-a')' returned non-zero exit status 1.
解决:
# lsb_release指定详细系统自带python版本
[thompson@~] sudo vi /usr/bin/lsb_release
#!/usr/bin/python3.8


2.ERROR: Could not install packages due to an EnvironmentError: Missing dependencies for SOCKS support.
解决：
# python添加socks支持(先取消proxy)
[thompson@~] unset ALL_PROXY
或注释配置文件proxy内容(#符号为注释符)

[thompson@~] sudo pip install pysocks


3.安装完成后无法打开terminal，在ctrl+alt+F1输入gnome-terminal显示无'gi'模块
解决方法1：
## 系统自带gi模块目录：/usr/lib/python/dist-packages/gi
## 如不在该目录，使用find / -name gi查找
## 使用情况: 
	系统自带3.8及以上版本(ubuntu 20.04)，并且手动安装也是3.8及以上版本；
	系统自带3.7及以下版本(ubuntu 18.04及以下系统版本)，并且手动安装也是3.7及以下版本
	原因是ubuntu自带的python库在ubuntu 20.04做了很大变动，造成python库不兼容

## 将gi模块目录转移到手动安装python库目录(安装目录为/usr/local/python时，对应于/usr/local/pytnon/lib/python3.7/site-packages)
[thompson@~] cp -fr /usr/lib/python/dist-packages/gi /usr/local/python/lib/python3.7/site-packages

## 修改指定动态库匹配的python版本(系统默认版本为3.6，以修改为手动安装的3.7为例，主.次版本相同则不用修改)
[thompson@~] cd /usr/local/python/lib/python3.8/site-packages/gi

[thompson@gi] mv _gi_cairo.cpython-36m-x86_64-linux-gnu.so _gi_cairo.cpython-37m-x86_64-linux-gnu.so

[thompson@gi] mv _gi.cpython-36m-x86_64-linux-gnu.so _gi.cpython-37m-x86_64-linux-gnu.so

解决方法2：
## 将gnome-terminal使用的python版本指向系统自带版本
## 使用情况，系统自带Python3.7及以下版本，手动安装3.8版本；或者系统自带Python3.8版本，手动安装3.7及以下版本
sudo vi /usr/bin/gnome-terminal
#!/usr/bin/python3
修改为
#!/usr/bin/python3.6

4.ModuleNotFoundError: No module named 'CommandNotFound'
解决:
sudo apt purge python3-apt
sudo apt autoremove
sudo apt install python3-apt


引用:
[1]tkinter error: https://bugs.python.org/issue31817


编辑于: 2023-07-21
