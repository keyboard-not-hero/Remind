wireshark有两种过滤
1.capture过滤
2.display过滤


一、capture过滤
方法：工具条"捕获选项"--"输入"tab--选择接口，并填写捕获条件
语法
[not] primitive [and|or [not] primitive ...]

primitive类型
1.[src|dst] host <host>
来源主机或目标主机的IP/域名，不提供src和dst时，来源/目标主机皆可

2.ether [src|dst] host <eth_add>
来源主机或目标主机的以太网卡地址

3.gateway host <host>
指定网关为指定IP，即ethernet的源或目标为该ip对应的以太地址，但是IP层的源和目标都不是该ip

4.[src|dst] net <net> [{mask <mask>}|{len <len>}]
指定来源或目标主机的网络位，可指定掩码或网络位长度。不提供src和dst时，来源/目标符合该指定皆可

5.[tcp|udp] [src|dst] port <port>
指定来源或目标主机的端口，当协议未提供时，两者都符合，当src/dst未提供时，来源/目标主机任一符合该端口皆可

6.less|greater <length>
符合<=或者>=指定长度的包

7.ip|ether proto <protocol>
指定ip层或ethernet层的协议

8.ether|ip broadcast|multicast
指定ip层或ethernet层的广播或多播

9.<expr> relop <expr>
更复杂的过滤，参考：https://www.tcpdump.org/manpages/pcap-filter.7.html


二、display过滤
方法：在工具条下的输入框中输入内容，点击'Enter'键即可
比较操作符：
English       C-like  Description
eq            ==      等于
ne            !=      不等于
gt            >       大于
lt            <       小于
ge            >=      大于等于
le            <=      小于等于
contains              协议/字段包含一个值
matches       ~       协议/文本字段匹配一个perl兼容的regular expression
bitwise_and   &       位与

逻辑操作符：
English       C-like  Description
and           &&      与
or            ||      或
xor           ^^      异或
not           !       非
[...]                 子序列(切片操作符)
in                    包含于

function列表：
upper()
    将str内容转化为大写

lower()
    将str内容转化为小写

len()
    返回str的字节长度

count()
    返回field数量

string()
    将非str转化为str

1.协议类型：
格式 - <protocol_name>
范例：
    http/tcp/udp

2.来源或目标IP/MAC：
来源ip/mac
格式 - ip.src == <ip> 或 eth.src == <eth>
范例：
    ip.src == 192.168.1.1 
    eth.src == ff:ff:ff:ff:ff:ff

目标ip/mac
格式 - ip.dst == <ip>
范例：
    ip.dst == 192.168.1.2

来源ip/mac或目标ip/mac
格式 - ip.addr == <ip>，等价于ip.src == <ip> or ip.dst == <ip>
范例：
    ip.addr == 192.168.1.1

3.端口号：
格式 - {tcp|udp}.port == <num>
范例：
    tcp.port == 80

4.协议的长度：
格式 - http.content_length_header == <number> 或 tcp.len > <num>
范例：
    http.content_length_header >= 100

5.数据包内容：
格式 - http.request.uri matches <str>，请求url中包含字符串str
范例：
    http.request.uri matches "key"
