#### 表格
1.使用---分隔表头与后续行<br>
2.使用|分割列<br>
3.表格后必须为空行<br>
##### 实例1 - 基础表格<br>
|name    |age     |
|---     |---     |
|david   |17      |
|lucy    |18      |
|peter   |20      |

<br>
<br>


##### 实例2 - 表格列对齐方式(`{:---左对齐, :---:居中对齐, ---:右对齐}, &#124;用于在表格中显示|`)
|name      |virtual_age     |
|---:      |:---:   |
|david &#124; peter     |17      |
|lucy      |18      |
|Alexandra |20      |

<br>
<br>
<br>
<br>


#### fenced code block
1.所有内容原样输出(包括space)<br>
2.使用```或~~~限定<br>
3.`或~可使用三个或以上, 但起始或结束部分的符号类型和个数需要一致<br>
4.如果起始限定符号进行缩进(不能小于3, 否则视为indent代码块), 则正文所有内容缩进同样space(如果正文没有缩进, 则忽略)<br>
5.类似于HTML tag: \<pre>\<code> ... \</code>\</pre><br>

##### 实例1 - 基础代码块
```
for i in ['a','b','c']:
    print(i)
```

~~~
sum = 0
while i<10:
    sum += i
~~~
<br>
<br>

##### 实例2 - 代码块语法高亮特性(在```或~~~的open code后标注代码语言)

~~~python
import numpy as np
rng = np.random.default_rng(233)
arr = rng.standard_normal((6, 4))
print(arr)
~~~
<br>
<br>

##### 实例3 - fenced代码块与环绕文字的垂直距离
C语言实现快速排序
```C
# include <stdio.h>
void Swap(int *, int *);  //函数声明, 交换两个变量的值
void QuickSort(int *, int, int);  //函数声明, 快速排序
int main(void)
{
    int i;  //循环变量
    int a[] = {900, 2, -58, 3, 34, 5, 76, 7, 32, 4, 43, 9, 1, 56, 
    8,-70, 635, -234, 532, 543, 2500};
    QuickSort(a, 0, 20);  /*引用起来很简单, 0为第一个元素的下标, 20为最后一个元素的下标*/
    printf("最终排序结果为:\n");
    for (i=0; i<21; ++i)
    {
        printf("%d ", a[i]);
    }
    printf("\n");
    return 0;
}
void Swap(int *p, int *q)
{
    int buf;
    buf = *p;
    *p = *q;
    *q = buf;
    return;
}
void QuickSort(int *a, int low, int high)
{
    int i = low;
    int j = high;
    int key = a[low];
    if (low >= high)  //如果low >= high说明排序结束了
    {
        return ;
    }
    while (low < high)  //该while循环结束一次表示比较了一轮
    {
        while (low < high && key <= a[high])
        {
            --high;  //向前寻找
        }
        if (key > a[high])
        {
            Swap(&a[low], &a[high]);
            ++low;
        }
        while (low < high && key >= a[low])
        {
            ++low;  //向后寻找
        }
        if (key < a[low])
        {
            Swap(&a[low], &a[high]);
            --high;
        }
    }
    QuickSort(a, i, low-1);  //用同样的方式对分出来的左边的部分进行同上的做法
    QuickSort(a, low+1, j);  //用同样的方式对分出来的右边的部分进行同上的做法
}
```
快速排序的时间复杂度$O(n^2)$<br>
快速排序的空间复杂度$O(n\log n)$<br>
<br>
<br>

##### 实例4 - 限定字符的起始位置缩进, 应用到正文
  ```
  catch path
    see you
love it
```
<br>
<br>
<br>
<br>


#### 脚注
1.脚注引用包含在[]内, 使用^开始, 后跟数字或单词(不能包含空格)<br>
2.脚注实体开头与脚注引用内容一致, 然后是:符号, 最后紧跟注解内容<br>
##### 实例1 - 脚注
Here's a simple footnote,[^1]  
and here's a longer one.[^bignote]

[^1]: This is the first footnote.

[^bignote]: Here's one with multiple paragraphs and code.

<br>
<br>
<br>
<br>


#### 删除线
1.在内容前与内容后添加~~<br>

##### 实例1 - 删除线
~~you are fired~~, but you can hava a good job
<br>
<br>
<br>
<br>


#### 任务列表
- [x] 起床
- [ ] 刷牙
- [ ] 洗脸
- [ ] 上班
<br>
<br>
<br>
<br>


#### emoji - 可以直接粘贴, 或使用shortcut
✨  
:tent:  
emoji列表: https://emojipedia.org/  
emoji shortcut列表: https://gist.github.com/rxaviers/7360908

<br>
<br>
<br>
<br>


#### 高亮文字(HTML元素)
I need to highlight these <mark>very important words</mark>.

<br>
<br>
<br>
<br>


#### 下角标(HTML元素)
H<sub>2</sub>O

<br>
<br>
<br>
<br>


#### 上角标(HTML元素)
X<sup>2</sup>

<br>
<br>
<br>
<br>


#### 自动对URL超链接
##### 实例1 - 超链接
https://www.baidu.com

##### 实例2 - 禁用自动超链接
`https://www.baidu.com`

<br>
<br>
<br>
<br>


#### 化学式
$\ce{2KMnO_4 \stackrel{\Delta}{=\!=} K_2MnO_4 + MnO_2 + O_2\uparrow}$<br>
$\ce{2H_2O_2 \stackrel{MnO_2}{=\!=\!=} 2H_2O + O_2}$<br>
** $\Delta$代表加热
