hash算法: 算法单向不可逆, 用于确保数据完整性. 
常见hash算法: MD5/SHA-1/SHA-256/SHA512


对称加密算法: 加密和解密端使用相同的密钥. 
常见对称加密算法: 3DES/AES/Blowfish/ChaCha20/DES


非对称加密算法: 加密端使用公钥, 解密端使用私钥. 
常见非对称加密算法: RSA/DSA/ECDSA


数字签名: 对数据或数据的哈希值使用私钥进行加密后的内容
数字签名种类(第二种效率更高):
1.利用源数据
将数据使用私钥进行加密, 并且将加密内容与源数据一并发送给接收者. 
当接收者收到信息后, 使用公钥对加密内容进行解密, 并且将解密内容与
源数据作对比, 一致则成功


2.利用散列值
将哈希值使用私钥进行加密, 并且将加密内容与哈希值一并发送给接收者. 
当接收者收到信息后, 使用公钥对加密内容进行解密, 并且将解密得到的
哈希值与文件哈希值作对比, 一致则成功

图解如下:
server:
         hash           private key
message ------> digest -------------> signature + message


client:
           public key           compare           hash
signature ------------> digest <-------> digest <------ message       



数字证书(Digital Certificate/public key certificate): 用于证明公钥拥有者身份的文件
证书授权机构(Certificate Authority, CA): 负责发放和管理数字证书的权威机

CA证书签发过程:
1.服务器提供公钥以及域名等附加信息进行申请

2.CA对服务器合法性进行验证, 验证通过后, CA使用自己的私钥将服务器的公钥及附加信息加密, 生成证书, 并且将证书颁发给服务器

3.客户端向服务器发出申请, 服务器发送内容时, 附带证书

4.客户端进行验证, 通过后使用CA的公钥对证书进行解密, 获得服务器的公钥

补充:
step 4验证阶段:
1)验证浏览域名与证书的域名是否匹配
2)验证CA是否在"受信任的根证书颁发机构"列表中(客户端的证书管理器)
3)证书是否在有效期内


最后编辑于: 2022-08-30


引用:
[1] https://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html

[2] https://www.cnblogs.com/Presley-lpc/p/9776463.html
